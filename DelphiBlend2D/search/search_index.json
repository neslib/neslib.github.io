{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DelphiBlend2D - Documentation Index","text":""},{"location":"#topics","title":"Topics","text":"<p>If you are new to Blend2D please checkout out the following links:</p> <ul> <li> <p>Getting Started - introduction to Blend2D with code samples and outputs</p> </li> <li> <p>Multithreaded Rendering - introduction to multi-threaded rendering</p> </li> </ul>"},{"location":"#groups","title":"Groups","text":"<p>The documentation is split into the following groups:</p> <ul> <li>Globals - Global functions, constants, and classes used universally across the library</li> <li>Containers - Containers and views used by Blend2D</li> <li>Geometries - Geometries, paths, and transformations</li> <li>Imaging - Images and image codecs</li> <li>Styling - Colors, gradients, and patterns</li> <li>Text - Fonts &amp; Text support</li> <li>Rendering - 2D rendering context API, structures, and constants</li> <li>Runtime - Interaction with Blend2D runtime</li> <li>Filesystem - Filesystem utilities</li> <li>Miscellaneous - Miscellaneous and uncategorized API</li> </ul>"},{"location":"Containers/","title":"Containers","text":"<p>Containers and views used by Blend2D.</p> <p>Blend2D needs certain containers to function, but it cannot use Delphi containers other than <code>TArray&lt;T&gt;</code>. In addition, the underlying representation of all classes that inherit from TBLObjectCore need to provide reference counting, even for containers, so they can be shared across threads without requiring to do any extra work by Blend2D users.</p> <p>In addition, Blend2D embraces small data optimization (often described as SSO - small string optimization), which is utilized by TBLString, TBLArray&lt;T&gt;, TBLBitArray and other specialized containers.</p>"},{"location":"Containers/#views-common-types","title":"Views &amp; Common Types","text":"<ul> <li>TBLArrayView&lt;T&gt; - read-only view of an array (any array, not just TBLArray&lt;T&gt;).</li> <li>TBLStringView - read-only view of a UTF-8 encoded string.</li> <li>TBLRange - start/end range, which can be used with sequential containers.</li> </ul>"},{"location":"Containers/#sequential-containers","title":"Sequential Containers","text":"<ul> <li>TBLArray&lt;T&gt; - growable array of <code>T</code> elements. Can hold both primitive types and Blend2D objects.</li> <li>TBLString - 8-bit null terminated string, usually UTF-8 encoded, but it's not a requirement.</li> </ul>"},{"location":"Containers/#bit-containers","title":"Bit Containers","text":"<ul> <li>TBLBitArray - a dense bit-array (stores bits starting from 0 to size, sequentially).</li> </ul>"},{"location":"Filesystem/","title":"Filesystem","text":"<p>Filesystem utilities.</p> <p>Blend2D doesn't do much with filesystem, however, since the library provides API for loading and saving raster images and for loading font files, it internally needs a lightweight filesystem access. The API is also provided for users that would like to use a very simple API to access a filesystem.</p>"},{"location":"Filesystem/#file","title":"File","text":"<ul> <li>TBLFile - a lightweight non-shareable file API that uses a system file descriptor API where possible.</li> <li>TBLFileOpenFlags - flags used by TBLFile.Open method.</li> <li>TBLFileReadFlags - flags used when reading whole files by TBLFileSystem.ReadFile.</li> <li>TBLFileSeekType - flags used by TBLFile.Seek method.</li> </ul>"},{"location":"Filesystem/#filesystem_1","title":"Filesystem","text":"<ul> <li>TBLFileSystem - filesystem utilities.</li> <li>TBLFileInfo - file information.</li> <li>TBLFileInfoFlags - flags used by TBLFileInfo.</li> </ul>"},{"location":"Geometries/","title":"Geometries","text":"<p>Geometries, paths, and transformations.</p> <p>Blend2D offers various geometry records and objects that can be used with either TBLPath for path building or TBLContext for rendering. In general there are two categories - TBLPath, which specifies a 2D path composed of path segments, and lightweight geometries such as TBLRect, TBLRoundRect, etc... which are only described by a trivial Delphi record.</p>"},{"location":"Geometries/#paths","title":"Paths","text":"<ul> <li>TBLPath - path container.</li> <li>TBLPathCmd - path command specifies the type of a path segment withing TBLPath.</li> <li>TBLPathFlags - flags associated with TBLPath.</li> <li>TBLPathReverseMode - reverse mode accepted by TBLPath.AddReversedPath.</li> <li>TBLPathView - view providing all necessary variables to inspect and iterate a TBLPath.</li> </ul>"},{"location":"Geometries/#path-operations","title":"Path Operations","text":"<ul> <li>TBLStrokeOptions - holds stroking options.</li> <li>TBLOffsetMode - path offsetting mode.</li> <li>TBLFlattenMode - path flattening mode.</li> <li>TBLStrokeCap - stroke cap option.</li> <li>TBLStrokeCapPosition - stroke cap position (can be specified separately).</li> <li>TBLStrokeJoin - stroke join option.</li> <li>TBLStrokeTransformOrder - the order of a transformation when rendering a stroked path or geometry.</li> </ul>"},{"location":"Geometries/#lightweight-geometries-and-records","title":"Lightweight Geometries and Records","text":"<ul> <li>TBLPoint - 2D point composed of <code>[X, Y]</code> values (64-bit floats).</li> <li>TBLPointI - 2D point composed of <code>[X, Y]</code> values (32-bit integers).</li> <li>TBLSize - 2D size composed of <code>[W, H]</code> values (64-bit floats).</li> <li>TBLSizeI - 2D size composed of <code>[W, H]</code> values (32-bit integers).</li> <li>TBLBox - 2D rectangular area composed of <code>[X0, Y0, X1, Y1]</code> values (64-bit floats).</li> <li>TBLBoxI - 2D rectangular area composed of <code>[X0, Y0, X1, Y1]</code> values (32-bit integers).</li> <li>TBLRect - 2D rectangular area composed of <code>[X, Y, W, H]</code> values (64-bit floats).</li> <li>TBLRectI - 2D rectangular area composed of <code>[X, Y, W, H]</code> values (32-bit integers).</li> <li>TBLRoundRect - rounded rectangle within <code>[X, Y, W, H]</code> with radius <code>[RX, RY]</code> (64-bit floats).</li> <li>TBLCircle - circle at <code>[CX, CY]</code> with radius <code>R</code> (64-bit floats).</li> <li>TBLEllipse - ellipse at <code>[CX, CY]</code> with radius <code>[RX, RY]</code> (64-bit floats).</li> <li>TBLArc - arc at <code>[CX, CY]</code> with radius <code>[RX, RY]</code> and <code>Start</code> + <code>Sweep</code> values (64-bit floats).</li> <li>TBLLine - line segment from <code>[X0, Y0]</code> to <code>[X1, Y1]</code> (64-bit floats).</li> <li>TBLTriangle - triangle having <code>[X0, Y0]</code>, <code>[X1, Y1]</code>, and <code>[X2, Y2]</code> vertices (64-bit floats).</li> </ul>"},{"location":"Geometries/#geometry-types","title":"Geometry Types","text":"<ul> <li>TBLGeometryDirection - specifies a direction.</li> <li>TBLGeometryType - specifies a type of a geometry argument (low-level).</li> <li>TBLFillRule - specifies a fill rule (used by both TBLPath and TBLContext).</li> <li>TBLHitTest - specifies a result of hit-testing.</li> </ul>"},{"location":"Geometries/#transformations","title":"Transformations","text":"<ul> <li>TBLMatrix2D - 2D transformation matrix (affine).</li> <li>TBLTransformOp - transformation operation (low-level).</li> <li>TBLTransformKind - transformation type.</li> </ul>"},{"location":"GettingStarted/","title":"Getting Started","text":"<p>Let's start with a simple example, taken from the blGettingStarted01 example project:</p>"},{"location":"GettingStarted/#delphi-source","title":"Delphi Source","text":"<pre><code>procedure Run;\nbegin\n  { Use constructor or `Make` method to allocate a new image data of the\n    required format. }\n  var Image := TBLImage.Create(480, 480, TBLFormat.Prgb32);\n\n  { Attach a rendering context into Image. }\n  var Context := TBLContext.Create(Image);\n\n  { Clearing the image would make it transparent. }\n  Context.ClearAll;\n\n  { Create a path having cubic curves. }\n  var Path: TBLPath;\n  Path.MoveTo(26, 31);\n  Path.CubicTo(642, 132, 587, -136, 25, 464);\n  Path.CubicTo(882, 404, 144, 267, 27, 31);\n\n  { Fill a path with opaque white - $AARRGGBB. }\n  Context.FillPath(Path, TAlphaColors.White);\n\n  { Detach the rendering context from `Image`.}\n  Context.Finish;\n\n  { Let's use some built-in codecs provided by Blend2D. }\n  Image.WriteToFile('blGettingStarted01.png');\nend;\n</code></pre>"},{"location":"GettingStarted/#output","title":"Output","text":"<p>If you compile and run the application it should create the image shown above.</p> <p>Note</p> <p>As can be seen in the example Blend2D Delphi API uses a <code>TBL</code> prefix and uses RAII for all \"classes\" that require memory management. This design simplifies the use of the API and minimizes the possibility of memory leaks. Instead of Delphi classes, the Delphi API uses Custom Managed Records as a lightweight alternative that automatically manages memory and other resources, while still being very efficient and lightweight. You can mostly treat these are regular Delphi classes, without having to worry about creating and destroying them. They are created automatically as soon as you declare them, and destroyed automatically as soon as they go out of scope (as the <code>var Path: TBLPath;</code> declaration in the example above). Some of these still provide constructors as a convenient way to create an instance with certain parameters (as in <code>var Context := TBLContext.Create(Image);</code> in the example above). In the remainder of this document, the term \"class\" actually refers to a Custom Managed Records, but you can forget about that detail.</p>"},{"location":"GettingStarted/#gradients","title":"Gradients","text":"<p>Blend2D provides a <code>TBLGradient</code> class that can be used to describe the following gradients:</p> <ul> <li>Linear gradient from <code>[X0, Y0]</code> to <code>[X1, Y1]</code>.</li> <li>Radial gradient having the center at <code>[CX, CY]</code>, focal point at <code>[FX, FY]</code>, and radius <code>R</code>.</li> <li>Conical gradient having the center at <code>[CX, CY]</code> and angle <code>A</code>.</li> </ul> <p>The next example (blGettingStarted02) shows how to use create a linear gradient:</p>"},{"location":"GettingStarted/#delphi-source_1","title":"Delphi Source","text":"<pre><code>procedure Run;\nbegin\n  var Image := TBLImage.Create(480, 480, TBLFormat.Prgb32);\n  var Context := TBLContext.Create(Image);\n\n  Context.ClearAll;\n\n  var Linear := TBLGradient.Create(\n    BLLinearGradientValues(0, 0, 0, 480));\n\n  { Coordinates can be specified now or changed later via TBLGradient accessors. }\n  Linear := TBLGradient.Create(BLLinearGradientValues(0, 0, 0, 480));\n\n  { Color stops can be added in any order. }\n  Linear.AddStop(0.0, $FFFFFFFF);\n  Linear.AddStop(0.5, $FF5FAFDF);\n  Linear.AddStop(1.0, $FF2F5FDF);\n\n  { SetFillStyle can be used for both colors and styles. Alternatively, a color\n    or style can be passed explicitly to a render function. }\n  Context.SetFillStyle(Linear);\n\n  { Rounded rect will be filled with the linear gradient. }\n  Context.FillRoundRect(40, 40, 400, 400, 45.5);\n  Context.Finish;\n\n  Image.WriteToFile('blGettingStarted02.png');\nend;\n</code></pre>"},{"location":"GettingStarted/#output_1","title":"Output","text":"<p>To make this document shorter we will not demonstrate radial and conical gradients as they will be used in later examples. In addition, the example above used fractional coordinates when calling <code>FillRoundRect</code> to show that Blend2D API is not restricted to integers. All functions accept double precision floating point coordinates with few exceptions where integral coordinates are allowed like <code>FillRect</code>.</p>"},{"location":"GettingStarted/#patterns","title":"Patterns","text":"<p>Pattern in Blend2D represents an image, transformation matrix, and other properties like extend mode and filter. A single image can be used by multiple patterns and it's also possible to use only a part of an image as a pattern.</p> <p>Example blGettingStarted03:</p>"},{"location":"GettingStarted/#delphi-source_2","title":"Delphi Source","text":"<pre><code>procedure Run;\nbegin\n  var Image := TBLImage.Create(480, 480, TBLFormat.Prgb32);\n  var Context := TBLContext.Create(Image);\n\n  Context.ClearAll;\n\n  { Read an image from file. }\n  var Texture: TBLImage;\n  Texture.ReadFromFile('Resources/Leaves.jpeg');\n\n  { Create a pattern and use it to fill a rounded-rect.\n    By default a repeat extend mode is used, but it can be configured to use\n    more extend modes. }\n  var Pattern := TBLPattern.Create(Texture);\n\n  Context.FillRoundRect(40, 40, 400, 400, 45.5, Pattern);\n  Context.Finish;\n\n  Image.WriteToFile('blGettingStarted03.png');\nend;\n</code></pre>"},{"location":"GettingStarted/#output_2","title":"Output","text":""},{"location":"GettingStarted/#transformations","title":"Transformations","text":"<p>Transformations can be applied to geometry, images, and styles.</p> <p>Example blGettingStarted04:</p>"},{"location":"GettingStarted/#delphi-source_3","title":"Delphi Source","text":"<pre><code>procedure Run;\nbegin\n  var Image := TBLImage.Create(480, 480, TBLFormat.Prgb32);\n  var Context := TBLContext.Create(Image);\n\n  Context.ClearAll;\n\n  { Read an image from file. }\n  var Texture: TBLImage;\n  Texture.ReadFromFile('Resources/Leaves.jpeg');\n\n  { Rotate by 45 degrees about a point at [240, 240]. }\n  Context.Rotate(DegToRad(45), 240, 240);\n\n  { Create a pattern and use it to fill a rounded-rect. }\n  var Pattern := TBLPattern.Create(Texture);\n\n  Context.FillRoundRect(50, 50, 380, 380, 80.5, Pattern);\n  Context.Finish;\n\n  Image.WriteToFile('blGettingStarted04.png');\nend;\n</code></pre>"},{"location":"GettingStarted/#output_3","title":"Output","text":"<p>The exactly same transformations that can be applied to <code>TBLContext</code> can also be applied to paths and styles. It's also possible to use a <code>TBLMatrix2D</code> to build a transformation matrix consisting of several consecutive transformations and apply it at once.</p>"},{"location":"GettingStarted/#composition","title":"Composition","text":"<p>Blend2D supports all Porter &amp; Duff composition operators and many blending operators that are described in SVG and PDF specifications. These operators can be set via the <code>TBLContext.CompOp</code> property.</p> <p>Example blGettingStarted05:</p>"},{"location":"GettingStarted/#delphi-source_4","title":"Delphi Source","text":"<pre><code>procedure Run;\nbegin\n  var Image := TBLImage.Create(480, 480, TBLFormat.Prgb32);\n  var Context := TBLContext.Create(Image);\n\n  Context.ClearAll;\n\n  { First shape filled with a radial gradient.\n    By default, SrcOver composition is used. }\n  var Radial := TBLGradient.Create(\n    BLRadialGradientValues(180, 180, 180, 180, 180));\n  Radial.AddStop(0.0, $FFFFFFFF);\n  Radial.AddStop(1.0, $FFFF6F3F);\n  Context.FillCircle(180, 180, 160, Radial);\n\n  { Second shape filled by a linear gradient. }\n  var Linear := TBLGradient.Create(\n    BLLinearGradientValues(195, 195, 470, 470));\n  Linear.AddStop(0.0, $FFFFFFFF);\n  Linear.AddStop(1.0, $FF3F9FFF);\n\n  { Use CompOp to change a composition operator. }\n  Context.CompOp := TBLCompOp.Difference;\n  Context.FillRoundRect(195, 195, 270, 270, 25, Linear);\n\n  Context.Finish;\n\n  Image.WriteToFile('blGettingStarted05.png');\nend;\n</code></pre>"},{"location":"GettingStarted/#output_4","title":"Output","text":""},{"location":"GettingStarted/#stroking","title":"Stroking","text":"<p>Stroking can be specified through the <code>TBLStrokeOptions</code> class or set directly through <code>TBLContext</code> API as demonstrated in the example (blGettingStarted06) below:</p>"},{"location":"GettingStarted/#delphi-source_5","title":"Delphi Source","text":"<pre><code>procedure Run;\nbegin\n  var Image := TBLImage.Create(480, 480, TBLFormat.Prgb32);\n  var Context := TBLContext.Create(Image);\n\n  Context.ClearAll;\n\n  var Linear := TBLGradient.Create(\n    BLLinearGradientValues(0, 0, 0, 480));\n  Linear.AddStop(0.0, $FFFFFFFF);\n  Linear.AddStop(0.5, $FFFF1F7F);\n  Linear.AddStop(1.0, $FF1F7FFF);\n\n  var Path: TBLPath;\n  Path.MoveTo(119, 49);\n  Path.CubicTo(259, 29, 99, 279, 275, 267);\n  Path.CubicTo(537, 245, 300, -170, 274, 430);\n\n  { Change stroke options. }\n  Context.StrokeWidth := 15;\n  Context.StrokeStartCap := TBLStrokeCap.Round;\n  Context.StrokeEndCap := TBLStrokeCap.Butt;\n  Context.StrokePath(Path, Linear);\n\n  Context.Finish;\n\n  Image.WriteToFile('blGettingStarted06.png');\nend;\n</code></pre>"},{"location":"GettingStarted/#output_5","title":"Output","text":""},{"location":"GettingStarted/#text-rendering","title":"Text Rendering","text":"<p>Text rendering was added recently to Blend2D and it's one of the features that would need further improvements. Blend2D provides both low-level and high-level interfaces to render text and the following example (blGettingStarted07) shows how to use the high-level one:</p>"},{"location":"GettingStarted/#delphi-source_6","title":"Delphi Source","text":"<pre><code>procedure Run;\nbegin\n  var Image := TBLImage.Create(480, 480, TBLFormat.Prgb32);\n  var Context := TBLContext.Create(Image);\n\n  Context.ClearAll;\n\n  var Face: TBLFontFace;\n  Face.MakeFromFile('Resources/ABeeZee-Regular.ttf');\n\n  var Font: TBLFont;\n  Font.MakeFromFace(Face, 50);\n\n  Context.SetFillStyle($FF000000);\n  Context.FillText(BLPoint(60, 80), Font, 'Hello Blend2D!');\n\n  Context.Rotate(0.785398);\n  Context.FillText(BLPoint(250, 80), Font, 'Rotated Text');\n\n  Context.Finish;\n\n  Image.WriteToFile('blGettingStarted07.png');\nend;\n</code></pre>"},{"location":"GettingStarted/#output_6","title":"Output","text":""},{"location":"GettingStarted/#glyph-buffer","title":"Glyph Buffer","text":"<p><code>TBLGlyphBuffer</code> is a low-level interface that can be used to convert text to glyphs and to retrieve useful information about them. If you need to position text or calculate text metrics then <code>TBLGlyphBuffer</code> is the only way of obtaining such information.</p> <p>Example blGettingStarted08:</p>"},{"location":"GettingStarted/#delphi-source_7","title":"Delphi Source","text":"<pre><code>procedure Run;\nconst\n  TEXTS: array [0..2] of String = (\n    'Hello Blend2D!',\n    'I''m a simple multiline text example',\n    'that uses GlyphBuffer and GlyphRun!');\nbegin\n  var Image := TBLImage.Create(480, 480, TBLFormat.Prgb32);\n  var Context := TBLContext.Create(Image);\n\n  var Face: TBLFontFace;\n  Face.MakeFromFile('Resources/ABeeZee-Regular.ttf');\n\n  var Font: TBLFont;\n  Font.MakeFromFace(Face, 20);\n\n  var GlyphBuffer: TBLGlyphBuffer;\n  var TextMetrics: TBLTextMetrics;\n  var FontMetrics := Font.Metrics;\n  var Y: Double := 190 + FontMetrics.Ascent;\n\n  Context.ClearAll;\n\n  for var I := 0 to Length(TEXTS) - 1 do\n  begin\n    GlyphBuffer.SetText(TEXTS[I]);\n    Font.Shape(GlyphBuffer);\n    Font.GetTextMetrics(GlyphBuffer, TextMetrics);\n\n    var X: Double := (TextMetrics.BoundingBox.X1 - TextMetrics.BoundingBox.X0);\n    Context.FillGlyphRun(BLPoint((480 - X) / 2, Y), Font,\n      GlyphBuffer.GlyphRun, $FF000000);\n\n    Y := Y + FontMetrics.Ascent + FontMetrics.Descent + FontMetrics.LineGap;\n  end;\n\n  Context.Finish;\n\n  Image.WriteToFile('blGettingStarted08.png');\nend;\n</code></pre>"},{"location":"GettingStarted/#output_7","title":"Output","text":""},{"location":"Globals/","title":"Globals","text":"<p>Global functions, constants, and classes used universally across the library.</p>"},{"location":"Globals/#resultstatus-code","title":"Result/Status Code","text":"<ul> <li>TBLResult - an enumeration of result codes used to indicate failure for most APIs.</li> </ul>"},{"location":"Globals/#types","title":"Types","text":"<ul> <li>TBLTag - tag is a 32-bit value representing 4 ASCII characters, used by PNG and OpenType at the moment.</li> <li>TBLUniqueId - unique identifier is a 64-bit value, which must be unique for each domain where used.</li> <li>TBLDataAccessFlags - provides a type of data access (read, write, or both).</li> <li>TBLModifyOp - modification operation.</li> <li>TBLBooleanOp - boolean operation.</li> </ul>"},{"location":"Globals/#classes","title":"Classes","text":"<ul> <li>TBLVar - variant type.</li> </ul>"},{"location":"Imaging/","title":"Imaging","text":"<p>Images and image codecs.</p> <p>Provides image container (TBLImage), image codecs (TBLImageCodec), and pixel conversion (TBLPixelConverter).</p>"},{"location":"Imaging/#images","title":"Images","text":"<ul> <li>TBLImage - image container that holds pixel data.</li> <li>TBLImageData - pixel data and additional attributes.</li> <li>TBLImageInfo - image information data.</li> <li>TBLImageInfoFlags - image information flags.</li> <li>TBLImageScaleFilter - image scaling filters.</li> </ul>"},{"location":"Imaging/#image-codecs","title":"Image Codecs","text":"<ul> <li>TBLImageCodec - image codec.</li> <li>TBLImageCodecFeatures - image codec feature flags.</li> <li>TBLImageDecoder - image decoder.</li> <li>TBLImageEncoder - image encoder.</li> </ul>"},{"location":"Imaging/#pixel-format","title":"Pixel Format","text":"<ul> <li>TBLFormat - pixel format.</li> <li>TBLFormatFlags - pixel format flags.</li> <li>TBLFormatInfo - pixel format information.</li> </ul>"},{"location":"Imaging/#pixel-conversion","title":"Pixel Conversion","text":"<ul> <li>TBLPixelConverter - pixel converter.</li> <li>TBLPixelConverterCreateFlags - flags that can be used when creating a pixel converter.</li> <li>TBLPixelConverterOptions - pixel conversion options.</li> </ul>"},{"location":"Miscellaneous/","title":"Miscellaneous","text":"<p>Miscellaneous and uncategorized API.</p>"},{"location":"Miscellaneous/#random","title":"Random","text":"<ul> <li>TBLRandom - pseudo random number generator.</li> </ul>"},{"location":"MultithreadedRendering/","title":"Multithreaded Rendering","text":"<p>Blend2D's rendering context can utilize multiple threads that render to the same target image. This section elaborates on various aspects of this feature and includes useful tips to avoid problems that naturally arise with asynchronous rendering, i.e. the rendering context doesn't change the content of the target image immediately. Instead, it serializes the work to be done into batches that are then executed by worker threads when ready.</p> <p>Since most of the software-based 2D rendering engines are synchronous some users may expect that calling a function like <code>FillRect</code> would immediately change relevant pixels of the target image and then return. This is true for many 2D libraries like AGG, Cairo, Qt, and Skia when a software accelerated rendering is used. We can describe such rendering mode as synchronous as it blocks until each operation is completed. However, this assumption is not true with Blend2D's multi-threaded rendering context implementation. Such implementations will be referred to as asynchronous, because in that case the rendering context only serializes the requested operations to be completed later in batches.</p> <p>Note</p> <p>The multi-threaded rendering engine implementation is still experimental. We believe that its performance can be improved in the future, especially its synchronization and resource sharing parts. We definitely need more feedback from Blend2D users to improve the implementation even further.</p>"},{"location":"MultithreadedRendering/#initialization-finalization","title":"Initialization &amp; Finalization","text":"<p>By default a single-threaded (and thus synchronous rendering context) is created unless a filled <code>TBLContextCreateInfo</code> is passed to the rendering context's constructor or <code>Start</code> method. A <code>ThreadCount</code> member specifies how many threads to use. At the moment there are no defaults or heuristics in the library so users must carefully use a value that makes sense for their workloads. In general 2 to 4 threads should be suitable for most workloads including real-time rendering to 4K frame-buffers. If the framebuffer is relatively small (e.g. 200x200 pixels) it's recommended to either use single-threaded rendering by default or to at least benchmark whether it has any benefits before switching to multi-threaded rendering.</p> <p>The initialization may look like this:</p> <pre><code>var Image := TBLImage.Create(500, 500, TBLFormat.Prgb32);\n\n{ The best is to use Reset so the record content is zeroed.\n  Blend2D guarantees that any future additions will work well with\n  zeros by default. }\nvar CreateInfo: TBLContextCreateInfo;\nCreateInfo.Reset;\n\n{ Configure the number of threads to use. }\nCreateInfo.ThreadCount := SomeThreadCount;\n\n{ Create the rendering context.\n\n  Either use constructor like TBLContext.Create(Image, CreateInfo) or\n  TBLContext.Start. This operation shouldn't fail by default unless there\n  is not enough memory to allocate the context and some helper data.\n\n  In addition, if the internal thread-pool is exhausted the rendering\n  context would still be asynchronous, but would only use the user\n  thread. This behavior can be overridden by changing initialization\n  flags in 'CreateInfo'. }\nvar Context: TBLContext;\nContext.Start(Image, CreateInfo);\n\n{ ... render something ...\n\n  Use either Context.Flush or Context.Finish to synchronize }\nContext.Finish;\n\n{ Now you can use the content of Image. }\nImage.WriteToFile('blMultithreadedExampleInit.png');\n</code></pre> <p>It can be seen from the previous example that Blend2D provides the same API for both synchronous and asynchronous rendering, only the initialization phase is different. Additionally, one important detail is the significance of the <code>Finish</code> method. For the synchronous case it's a relatively cheap call that only releases some resources and detaches the rendering context from the image. However, in the asynchronous case, <code>Finish</code> actually synchronizes first. The rendering will start at that point and the execution will block until it's done. Only after it's done the resources can be released and the function can return.</p>"},{"location":"MultithreadedRendering/#synchronization","title":"Synchronization","text":"<p>There are two functions that can be used to require synchronization of the rendering context, which means flushing the render queue and waiting for completion:</p> <ul> <li><code>Flush([TBLContextFlushFlag.Sync])</code> - flushes all pending operations and waits for their completion</li> <li><code>Finish</code> - this call does the same as <code>Flush([TBLContextFlushFlag.Sync])</code> in addition to detaching the rendering context from the target image after there are no more pending operations</li> </ul> <p>Both <code>Flush</code> and <code>Finish</code> calls are blocking, which means that they would only return after all threads finish their work. The importance of flush can be illustrated on the next example:</p> <pre><code>var CreateInfo: TBLContextCreateInfo;\nCreateInfo.Reset;\nCreateInfo.ThreadCount := 2;\n\nvar Image := TBLImage.Create(500, 500, TBLFormat.Prgb32);\nvar Context := TBLContext.Create(Image, CreateInfo);\n\nContext.FillAll(TAlphaColors.Black);\nContext.FillRoundRect(BLRoundRect(25, 25, 450, 450, 50), TAlphaColors.White);\n\n{ This won't work! The content of the pixels is undefined at the moment. }\nImage.WriteToFile('blMultithreadedExampleSyncWrong.png');\n\n{ This actually flushes all render calls and synchronizes. }\nContext.Flush([TBLContextFlushFlag.Sync]);\n\n{ Now the image contains everything we have asked for. }\nImage.WriteToFile('blMultithreadedExampleSyncRight.png');\n\n{ This would synchronize if there were any pending operations, but in\n  our case it would just detach the rendering context from the image\n  and return all threads to the thread pool (which is a cheap operation). }\nContext.Finish;\n</code></pre>"},{"location":"MultithreadedRendering/#lifetime-of-passed-objects","title":"Lifetime of Passed Objects","text":"<p>All objects that are passed to the rendering context (such as gradients, patterns, images, and paths) must live through asynchronous processing. To simplify this Blend2D automatically manages the lifetime of such objects by using reference counting. When an object is passed to the rendering context, and the context decides to keep that object for later use, it would temporarily increase the reference count of such object. In other words, it creates a weak copy of it so that it can be used by a worker thread later. Blend2D uses atomic reference counting, which means that styles can be shared between threads without races.</p> <p>There is one important detail regarding reference counting in Blend2D, called copy-on-write. When two <code>TBLPath</code> instances share the same data and one instance is being changed, the data has to be copied first so that the other instance's data doesn't change as well. It is called copy-on-write, because the copy will only be made if such object is changed.</p> <p>Let's demonstrate how it works:</p> <pre><code>var CreateInfo: TBLContextCreateInfo;\nCreateInfo.Reset;\nCreateInfo.ThreadCount := 2;\n\nvar Image := TBLImage.Create(500, 500, TBLFormat.Prgb32);\nvar Context := TBLContext.Create(Image, CreateInfo);\n\nContext.FillAll(TAlphaColors.Black);\n\nbegin\n  { Let's construct a path - now it will have a reference count 1. }\n  var Path: TBLPath;\n  Path.AddRoundRect(BLRoundRect(25, 25, 450, 450, 25));\n\n  { The reference count of path may change depending on the rendering type\n    and path complexity:\n\n      - Synchronous rendering - path is consumed directly so there is no\n        need to keep it. The rendering context uses the path to build edges\n        and then such edges will be used by the rasterizer.\n\n      - Asynchronous rendering - depending on path complexity the rendering\n        context may construct edges for the rasterizer directly or it may\n        decide to keep the path and construct edges later. If it decides to\n        keep the path then its reference count will be increased by 1. }\n  Context.FillPath(Path, TAlphaColors.White);\n\n  { Now the path destructor will be called (since Path went out of scope). \n    If the reference count is greater than one then the path data will \n    outlive this scope and the rendering context will destroy it after \n    it's been  processed. }  \nend;\n\n{ Even if the path data was still alive at this point, \n  it won't outlive neither Flush nor Finish calls. }\nContext.Finish;\n</code></pre> <p>The same scenario applies to images. E.g. the in asynchronous case it's not possible to blit an image, and then immediately change its content and then blit it again. To be more precise it would be possible, but when changing the image a deep copy of the image will be made before attempting to change it.</p> <pre><code>var CreateInfo: TBLContextCreateInfo;\nCreateInfo.Reset;\nCreateInfo.ThreadCount := 2;\n\nvar Image := TBLImage.Create(500, 500, TBLFormat.Prgb32);\nvar Context := TBLContext.Create(Image, CreateInfo);\n\nvar Sprite: TBLImage;\nSprite.ReadFromFile('SomeSprite.png');\n\nContext.FillAll(TAlphaColors.Black);\n\n{ If the rendering context is asynchronous the sprite's reference count will\n  be increased by one by the rendering context as it won't blit it now. }\nContext.BlitImage(BLPointI(0, 0), Sprite);\n\n{ Now the sprite's reference count may be greater than zero, which means that\n  a copy will have to be made if it has to be changed. For example attaching\n  a different rendering context to that image would make a copy of it. }\nbegin\n  var Context2 := TBLContext.Create(Sprite);\n  Context2.FillRect(BLRectI(10, 10, 100, 100), TAlphaColors.White);\nend;\n\n{ If the rendering context is asynchronous the sprite's reference count will\n  be increased by one again, but in this case the sprite's internal data will\n  already be different compared to the first blitted sprite. This means that\n  after this call the rendering context will have weak copies of two independent\n  images.}\nContext.BlitImage(BLPointI(200,20 0), Sprite);\n\n{ As usual - Finish will drop all references to images passed to BlitImage. }\nContext.Finish;\n</code></pre> <p>In the example above the user would actually get the same result in both the synchronous and asynchronous case. However, in the asynchronous case the image data will be copied by the secondary rendering context as it cannot start rendering into a shared image that is still in use by the primary rendering context.</p>"},{"location":"MultithreadedRendering/#geometries-are-lightweight","title":"Geometries Are Lightweight","text":"<p>The rendering context can render paths and simpler geometries that are passed as Delphi records (like <code>TBLCircle</code>). Since the multi-threaded rendering context has to retain all paths passed to it, it's sometimes cheaper to use geometries instead. For example to fill a rounded rectangle, use <code>FillRoundRect</code> instead of constructing a path and then filling it via <code>FillPath</code>. To retain a geometry the rendering context just copies its data to a buffer, which would be then used by worker threads. Making a copy of a small Delphi record is much cheaper than managing a shared resource.</p> <p>For example, consider the following example:</p> <pre><code>var CreateInfo: TBLContextCreateInfo;\nCreateInfo.Reset;\nCreateInfo.ThreadCount := 2;\n\nvar Image := TBLImage.Create(500, 500, TBLFormat.Prgb32);\nvar Context := TBLContext.Create(Image, CreateInfo);\n\nContext.FillAll(TAlphaColors.Black);\n\n{ This rounded rectangle will be serialized as is, it won't use TBLPath. }\nContext.FillRoundRect(BLRoundRect(100, 100, 400, 100, 50), TAlphaColors.Red));\n\n{ This rounded rectangle is in fact a TBLPath, and the rendering context\n  will have to retain it. }\nvar P: TBLPath;\nP.AddRoundRect(BLRoundRect(100, 300, 400, 100, 50));\nContext.FillPath(P, TAlphaColors.Blue);\n\nContext.Finish;\n</code></pre>"},{"location":"MultithreadedRendering/#conclusion","title":"Conclusion","text":"<p>This section has illustrated how the multi-threaded rendering context changes the lifetime of passed objects. It should have also been clarified that the user may expect those objects released by either calling <code>Flush</code> with particular flags or <code>Finish</code>. Finally, it has described the functionality of copy-on-write which results in deep copy of objects that are mutated and still in use by the rendering context.</p> <p>It's also worth noting that calling <code>Flush</code> with <code>TBLContextFlushFlag.Sync</code> would start worker threads and wait for all of them to complete. These calls should be considered exceptional and not be overused. It isn't cheap to wake up all worker threads and wait for them to complete their work, which is the main reason that the rendering context uses batching. The result is a minimal synchronization and maximum throughput.</p>"},{"location":"Rendering/","title":"Rendering","text":"<p>2D rendering context API, structures, and constants.</p>"},{"location":"Rendering/#rendering-context","title":"Rendering Context","text":"<ul> <li>TBLContext - a 2D rendering context.</li> <li>TBLContextType - rendering context type.</li> <li>TBLContextCookie - cookie can be used with TBLContext.Save and TBLContext.Restore.</li> <li>TBLContextCreateInfo - additional options that can be used when creating a rendering context.</li> <li>TBLContextCreateFlags - flags that can be used by TBLContextCreateInfo.</li> <li>TBLContextErrorFlags - accumulated error flags during the lifetime of a rendering context.</li> <li>TBLContextFlushFlags - flags that can be passed to TBLContext.Flush.</li> <li>TBLContextHint - rendering hint.</li> <li>TBLContextHints - all rendering hints in a single record.</li> <li>TBLContextStyleSlot - style slot (either fill or stroke).</li> <li>TBLContextStyleSwapMode - style swap mode (how to swap a fill and stroke styles).</li> <li>TBLContextStyleTransformMode - style transform mode (how to combine with existing transform).</li> <li>TBLContextRenderTextOp - type of a text rendering operation (low-level).</li> <li>TBLCompOp - composition operator.</li> <li>TBLRenderingQuality - rendering quality (aliased rendering or the quality of anti-aliasing).</li> </ul>"},{"location":"Runtime/","title":"Runtime","text":"<p>Interaction with Blend2D runtime.</p>"},{"location":"Runtime/#runtime-information","title":"Runtime information","text":"<ul> <li>TBLRuntime</li> <li>TBLRuntimeBuildInfo</li> <li>TBLRuntimeSystemInfo</li> <li>TBLRuntimeLimits</li> <li>TBLRuntimeBuildType</li> <li>TBLRuntimeCleanupFlags</li> <li>TBLRuntimeCpuArch</li> <li>TBLRuntimeCpuFeatures</li> </ul>"},{"location":"Styling/","title":"Styling","text":"<p>Colors, gradients, and patterns.</p> <p>Styling provides various classes that represent colors, gradients, and patterns. While colors are used universally across the library (not just as styles), gradients and patterns are always used as fill or stroke styles.</p>"},{"location":"Styling/#colors","title":"Colors","text":"<ul> <li>TBLRgba - RGBA color specified as 32-bit floating point value per channel.</li> <li>TBLRgba32 - RGBA color specified as 8-bit value per channel as <code>$AARRGGBB</code>. This type is compatible with Delphi's <code>TAlphaColor</code> type.</li> <li>TBLRgba64 - RGBA color specified as 16-bit value per channel as <code>$AAAARRRRGGGGBBBB</code>.</li> </ul> <p>Note</p> <p>The order if bytes in <code>TBLRgba32</code> and <code>TBLRgba64</code> is ARGB (from MSB to LSB) for compatibility with other libraries and common representations.</p>"},{"location":"Styling/#gradients","title":"Gradients","text":"<ul> <li>TBLGradient - container that holds gradient values and stops.</li> <li>TBLGradientStop - associates a color with offset (from 0.0 to 1.0).</li> <li>TBLGradientKind - describes a gradient type.</li> <li>TBLGradientValue - index of a gradient value (overlaps between various gradient types).</li> <li>TBLGradientQuality - describes a gradient quality.</li> <li>TBLExtendMode - specifies a gradient extend mode (only simple extend modes can be used with gradients).</li> <li>TBLLinearGradientValues - values describing a linear gradient.</li> <li>TBLRadialGradientValues - values describing a radial gradient.</li> <li>TBLConicGradientValues - values describing a conic gradient.</li> </ul>"},{"location":"Styling/#patterns","title":"Patterns","text":"<ul> <li>TBLPattern - represents a pattern.</li> <li>TBLPatternQuality - describes a pattern quality.</li> <li>TBLExtendMode - specifies a pattern extend mode (all extend modes can be used with patterns).</li> </ul>"},{"location":"Styling/#variant","title":"Variant","text":"<ul> <li>TBLVar - variant type can be used to hold any style and then passed to the rendering context.</li> </ul>"},{"location":"Text/","title":"Text","text":"<p>Fonts &amp; Text support.</p>"},{"location":"Text/#glyph-containers-processing","title":"Glyph Containers &amp; Processing","text":"<ul> <li>TBLGlyphBuffer - holds glyphs and additional metadata.</li> <li>TBLGlyphRun - provides a glyph run data.</li> <li>TBLGlyphRunFlags - flags used by TBLGlyphRun.</li> <li>TBLGlyphRunIterator - iterates a TBLGlyphRun.</li> <li>TBLGlyphId - a type representing a single glyph (32-bit value).</li> <li>TBLGlyphInfo - glyph information used by TBLGlyphBuffer and TBLGlyphRun.</li> <li>TBLGlyphMappingState - information accumulated during mapping characters to glyphs.</li> <li>TBLGlyphPlacement - glyph placement used by TBLGlyphBuffer and TBLGlyphRun.</li> <li>TBLGlyphPlacementType - glyph placement type used by TBLGlyphBuffer and TBLGlyphRun.</li> </ul>"},{"location":"Text/#fonts","title":"Fonts","text":"<ul> <li>TBLFont - represents a displayable font (having size, font properties, and variations configured).</li> <li>TBLFontMatrix - a simple matrix that can be used to transform a font, used by TBLFont.</li> <li>TBLFontMetrics - font metrics, used by TBLFont.</li> <li>TBLFontStretch - font stretch property, used by TBLFont.</li> <li>TBLFontStyle - font style property, used by TBLFont.</li> <li>TBLFontWeight - font weight property, used by TBLFont.</li> <li>TBLFontData - provides font data that can be used by TBLFont and TBLFontFace.</li> <li>TBLFontDataFlags - Flags used by TBLFontData.</li> <li>TBLFontTable - represents a TrueType/OpenType table identified by a TBLTag.</li> <li>TBLFontFace - represents a font face (OpenType file loaded from file or memory).</li> <li>TBLFontFaceInfo - font face information, used by TBLFontFace.</li> <li>TBLFontFaceFlags - flags used by TBLFontFace.</li> <li>TBLFontFaceDiagFlags - diagnostic flags used by TBLFontFace.</li> <li>TBLFontFaceType - type of a font face, provided by TBLFontFace.</li> <li>TBLFontDesignMetrics - design font metrics, used by TBLFontFace.</li> <li>TBLFontOutlineType - type of outlines used by a font, used by TBLFontFace.</li> <li>TBLFontPanose - panose information, provided by TBLFontFace.</li> <li>TBLFontUnicodeCoverage - unicode coverage bits, provided by by TBLFontFace.</li> <li>TBLFontFeatureSettings - provides feature settings of a TBLFont.</li> <li>TBLFontFeatureSettingsView - view of TBLFontFeatureSettings.</li> <li>TBLFontFeatureItem - associates a font feature tag (TBLTag) with a value.</li> <li>TBLFontVariationSettings - provides variation settings of a TBLFont.</li> <li>TBLFontVariationSettingsView - view of TBLFontVariationSettings.</li> <li>TBLFontVariationItem - associates a font variation tag (TBLTag) with a value.</li> </ul>"},{"location":"Text/#font-management","title":"Font Management","text":"<ul> <li>TBLFontManager - simple font management that can store and query TBLFontFace instances.</li> <li>TBLFontQueryProperties - font query properties, used by TBLFontManager.</li> </ul>"},{"location":"Text/#text_1","title":"Text","text":"<ul> <li>TBLOrientation - text or glyph run orientation.</li> <li>TBLTextDirection - specifies text direction.</li> <li>TBLTextEncoding - specifies text encoding.</li> <li>TBLTextMetrics - metrics of a whole text run.</li> </ul>"},{"location":"Reference/Blend2D/","title":"Blend2D","text":""},{"location":"Reference/Blend2D/#classes-records","title":"Classes &amp; Records","text":"Name Description EBlend2DError Type of exception that is raised for Blend2D errors. Exceptions are enabled by default, but can be disabled using <code>BLSetErrorHandler</code>. TBLApproximationOptions Options used to describe how geometry is approximated. TBLArc Arc specified as [CX, CY, RX, RY, Start, Sweep] using <code>Double</code> as a storage type. TBLArray&lt;T&gt; Generic array container. TBLArray&lt;T&gt;.P A pointer to type <code>T</code>. TBLArrayView&lt;T&gt; Array view of <code>T</code>. TBLArrayView&lt;T&gt;.P A pointer to type <code>T</code>. TBLBitArray BitArray container. TBLBox Box specified as [X0, Y0, X1, Y1] using <code>Double</code> as a storage type. TBLBoxI Box specified as [X0, Y0, X1, Y1] using <code>Integer</code> as a storage type. TBLCircle Circle specified as [CX, CY, R] using <code>Double</code> as a storage type. TBLConicGradientValues Conic gradient values packed into a structure. TBLContext Rendering context. TBLContextCookie Holds an arbitrary 128-bit value (cookie) that can be used to match other cookies. Blend2D uses cookies in places where it allows to \"lock\" some state that can only be unlocked by a matching cookie. Please don't confuse cookies with a security of any kind, it's just an arbitrary data that must match to proceed with a certain operation. TBLContextCreateInfo Information that can be used to customize the rendering context. TBLContextHints Rendering context hints. TBLEllipse Ellipse specified as [CX, CY, RX, RY] using <code>Double</code> as a storage type. TBLFile A thin abstraction over a native OS file IO. TBLFileInfo File information. TBLFileSystem File-system utilities. TBLFont Font. TBLFontData Font data. TBLFontDesignMetrics Design metrics of a font. TBLFontFace Font face. TBLFontFaceInfo Information of <code>TBLFontFace</code>. TBLFontFeatureItem Associates a font feature tag with a value. Tag describes the feature (as provided by the font) and <code>Value</code> describes its value. Some features only allow boolean values 0 and 1 and some allow values up to 65535. Values less than 0 and greater than 65535 are invalid, however, only <code>-1</code> should be used as invalid value in general. TBLFontFeatureSettings Font feature settings. TBLFontFeatureSettingsView A view unifying the representation of an internal storage used by <code>TBLFontFeatureSettings</code>. TBLFontManager Font manager. TBLFontMatrix 2x2 transformation matrix used by <code>TBLFont</code>. It's similar to <code>TBLMatrix2D</code>, however, it doesn't provide a translation part as it's assumed to be zero. TBLFontMetrics Scaled <code>TBLFontDesignMetrics</code> based on font size and other properties. TBLFontPanose Font PANOSE classification. TBLFontPanose.TDecorative TBLFontPanose.TScript TBLFontPanose.TSymbol TBLFontPanose.TText TBLFontQueryProperties Properties that can be used to query <code>TBLFont</code> and <code>TBLFontFace</code>. TBLFontTable A read only data that represents a font table or its sub-table. TBLFontUnicodeCoverage Font unicode coverage. TBLFontVariationItem Associates a font variation tag with a value. TBLFontVariationSettings Font variation settings. TBLFontVariationSettingsView A view unifying the representation of an internal storage used by <code>TBLFontVariationSettings</code>. TBLFormatInfo Provides a detailed information about a pixel format. Use <code>Query</code> for information of Blend2D native pixel formats. TBLGlyphBuffer Glyph buffer. TBLGlyphInfo Contains additional information associated with a glyph used by <code>TBLGlyphBuffer</code>. TBLGlyphMappingState Character to glyph mapping state. TBLGlyphPlacement Glyph placement. TBLGlyphRun TBLGlyphRun describes a set of consecutive glyphs and their placements. TBLGlyphRunIterator A helper to iterate over a <code>TBLGlyphRun</code>. TBLGradient Gradient. TBLGradientStop Defines an <code>Offset</code> and <code>Rgba</code> color that is used by <code>TBLGradient</code> to define a linear transition between colors. TBLImage 2D raster image. TBLImageCodec Image codec. TBLImageData Data that describes a raster image. Used by <code>TBLImage</code>. TBLImageDecoder Image decoder. TBLImageEncoder Image encoder. TBLImageInfo Image information provided by image codecs. TBLLine Line specified as [X0, Y0, X1, Y1] using <code>Double</code> as a storage type. TBLLinearGradientValues Linear gradient values packed into a structure. TBLMatrix2D 2D matrix represents an affine transformation matrix that can be used to transform geometry and images. TBLObjectCore Base \"class\" used by all Blend2D objects. TBLPath 2D vector path. TBLPathView 2D vector path view provides pointers to vertex and command data along with their size. TBLPattern Pattern. TBLPixelConverter Pixel converter. TBLPixelConverterOptions Pixel conversion options. TBLPoint Point specified as [X, Y] using <code>Double</code> as a storage type. TBLPointI Point specified as [X, Y] using <code>Integer</code> as a storage type. TBLRadialGradientValues Radial gradient values packed into a structure. TBLRandom Simple pseudo random number generator based on <code>XORSHIFT+</code>, which has 64-bit seed, 128 bits of state, and full period <code>2^128 - 1</code>. TBLRange Provides start and end indexes. It has the same semantics as Slices in other programming languages - range is always within [Start, Stop) internal (Start is inclusive, Stop is exclusive). It's used to specify a range of an operation of indexed containers like TBLString, TBLArray, TBLGradient, TBLPath, etc... TBLRect Rectangle specified as [X, Y, W, H] using <code>Double</code> as a storage type. TBLRectI Rectangle specified as [X, Y, W, H] using <code>Integer</code> as a storage type. TBLRgba 128-bit RGBA color stored as 4 32-bit floating point values in [RGBA] order. This record is compatible with Delphi's <code>TAlphaColorF</code> and can be typecase to and from it. TBLRgba32 32-bit RGBA color (8-bit per component) stored as <code>$AARRGGBB</code>. This record is compatible with Delphi's <code>TAlphaColor</code> and <code>TAlphaColorRec</code> and can be typecast to and from these. TBLRgba64 64-bit RGBA color (8-bit per component) stored as <code>$AAAARRRRGGGGBBBB</code>. TBLRoundRect Rounded rectangle specified as [X, Y, W, H, RX, RY] using <code>Double</code> as a storage type. TBLRuntime Interface to access Blend2D runtime. TBLRuntimeBuildInfo Blend2D build information. TBLRuntimeLimits Blend2D runtime limits. TBLRuntimeResourceInfo Provides information about resources allocated by Blend2D. TBLRuntimeSystemInfo System information queried by the runtime. TBLSize Size specified as [W, H] using <code>Double</code> as a storage type. TBLSizeI Size specified as [W, H] using <code>Integer</code> as a storage type. TBLString Byte string. TBLStrokeOptions Stroke options. TBLTextMetrics Text metrics. TBLTriangle Triangle data specified as [X0, Y0, X1, Y1, X2, Y2] using <code>Double</code> as a storage type. TBLVar Blend2D variant."},{"location":"Reference/Blend2D/#types","title":"Types","text":"Name Description PBLApproximationOptions PBLArc PBLBox PBLBoxI PBLCircle PBLConicGradientValues PBLContextCookie PBLContextCreateInfo PBLContextHints PBLEllipse PBLFileInfo PBLFontDesignMetrics PBLFontFaceInfo PBLFontFeatureItem PBLFontFeatureSettingsView PBLFontMatrix PBLFontMetrics PBLFontPanose PBLFontQueryProperties PBLFontTable PBLFontUnicodeCoverage PBLFontVariationItem PBLFontVariationSettingsView PBLFormatInfo PBLGlyphId PBLGlyphInfo PBLGlyphMappingState PBLGlyphPlacement PBLGlyphRun PBLGradientStop PBLImageData PBLImageInfo PBLLine PBLLinearGradientValues PBLMatrix2D PBLPixelConverterOptions PBLPoint PBLPointI PBLRadialGradientValues PBLRange PBLRect PBLRectI PBLRgba PBLRgba32 PBLRgba64 PBLRoundRect PBLRuntimeBuildInfo PBLRuntimeResourceInfo PBLRuntimeSystemInfo PBLSize PBLSizeI PBLStrokeOptions PBLTextMetrics PBLTriangle PSize_T Size_T TBLBooleanOp Boolean operator (between A and B). TBLByteOrder Byte order. TBLCompOp Composition &amp; blending operator. TBLContextCreateFlag Rendering context creation flags. TBLContextCreateFlags Rendering context creation flags. TBLContextErrorFlag Error flags that are accumulated during the rendering context lifetime and that can be queried through <code>TBLContext.AccumulatedErrorFlags</code>. The reason why these flags exist is that errors can happen during asynchronous rendering, and there is no way the user can catch these errors. TBLContextErrorFlags Error flags that are accumulated during the rendering context lifetime. TBLContextFlushFlag Rendering context flush flags, used by <code>TBLContext.Flush</code>. TBLContextFlushFlags Rendering context flush flags, used by <code>TBLContext.Flush</code>. TBLContextHint Rendering context hint. TBLContextRenderTextOp The type of a text rendering operation. TBLContextStyleSlot Describes a rendering context style slot - fill or stroke. TBLContextStyleSwapMode Specifies the behavior of <code>TBLContext.SwapStyles</code> operation. TBLContextStyleTransformMode Specifies how style transformation matrix is combined with the rendering context transformation matrix, used by <code>TBLContext.SetStyle</code> function. TBLContextType Rendering context type. TBLDataAccessFlags Data access flags. TBLDataSourceType Data source type. TBLDataView View of untyped data. TBLDebugMessageSinkFunc A sink that can be used to debug various parts of Blend2D. TBLDestroyExternalDataFunc A function callback that is called when an object that holds external data is going to be destroyed. It's often used as a notification that a data passed to a certain object is no longer in use by Blend2D. TBLErrorHandler Type of procedure that is called when a Blend2D error occurs. TBLExtendMode Extend mode. TBLFileInfoFlag File information flags, used by <code>TBLFileInfo</code>. TBLFileInfoFlags File information flags, used by <code>TBLFileInfo</code>. TBLFileOpenFlag File open flags. TBLFileOpenFlags File open flags. TBLFileReadFlag File read flags used by <code>TBLFileSystem.ReadFile</code>. TBLFileReadFlags File read flags used by <code>TBLFileSystem.ReadFile</code>. TBLFileSeekType File seek mode. TBLFillRule Fill rule. TBLFlattenMode Mode that specifies how curves are approximated to line segments. TBLFontDataFlag Flags used by `TBLFontData'. TBLFontDataFlags Flags used by `TBLFontData'. TBLFontFaceDiagFlag Diagnostic flags offered by <code>TBLFontFace</code>. TBLFontFaceDiagFlags Diagnostic flags offered by <code>TBLFontFace</code>. TBLFontFaceFlag Flags used by <code>TBLFontFace</code> TBLFontFaceFlags Flags used by <code>TBLFontFace</code> TBLFontFaceType Type of a font or font face, see <code>TBLFontFace</code>. TBLFontOutlineType Format of an outline stored in a font. TBLFontStretch Font stretch. TBLFontStyle Font style. TBLFontWeight Font weight. TBLFormat Pixel format. TBLFormatFlag Pixel format flags. TBLFormatFlags Pixel format flags. TBLFourBytes TBLGeometryDirection Direction of a geometry used by geometric primitives and paths. TBLGeometryType Geometry type. TBLGlyphId Glyph id - a 32-bit unsigned integer. TBLGlyphPlacementType Placement of glyphs stored in a <code>TBLGlyphRun</code>. TBLGlyphRunFlag Flags used by <code>TBLGlyphRun</code>. TBLGlyphRunFlags Flags used by <code>TBLGlyphRun</code>. TBLGradientKind Gradient type. TBLGradientQuality Gradient rendering quality. TBLGradientValue Gradient data index. TBLHitTest Hit-test result. TBLImageCodecFeature Image codec feature bits. TBLImageCodecFeatures Image codec feature bits. TBLImageInfoFlag Flags used by <code>TBLImageInfo</code>. TBLImageInfoFlags Flags used by <code>TBLImageInfo</code>. TBLImageScaleFilter Filter type used by <code>TBLImage.Scale</code>. TBLModifyOp Modification operation applied to Blend2D containers. TBLObjectType Object type identifier. TBLOffsetMode Mode that specifies how to construct offset curves. TBLOrientation Orientation. TBLPathCmd Path command. TBLPathFlag Path flags. TBLPathFlags Path flags. TBLPathReverseMode Path reversal mode. TBLPathSinkFunc Optional callback that can be used to consume a path data. TBLPatternQuality Pattern quality. TBLPixelConverterCreateFlag Flags used by <code>TBLPixelConverter.Make</code> function. TBLPixelConverterCreateFlags Flags used by <code>TBLPixelConverter.Make</code> function. TBLRenderingQuality Rendering quality. TBLResult Blend2D result code. TBLRuntimeBuildType Blend2D runtime build type. TBLRuntimeCleanupFlag Runtime cleanup flags that can be used through <code>TBLRuntime.Cleanup</code>. TBLRuntimeCleanupFlags Runtime cleanup flags that can be used through <code>TBLRuntime.Cleanup</code>. TBLRuntimeCpuArch CPU architecture that can be queried by <code>TBLRuntime.QuerySystemInfo</code>. TBLRuntimeCpuFeature CPU features Blend2D supports. TBLRuntimeCpuFeatures CPU features Blend2D supports. TBLStringView View of <code>UTF8Char[]</code> data used by TBLString. TBLStrokeCap A presentation attribute defining the shape to be used at the end of open sub-paths. TBLStrokeCapPosition Position of a stroke-cap. TBLStrokeJoin Stroke join type. TBLStrokeTransformOrder Stroke transform order. TBLTag Tag is a 32-bit integer consisting of 4 bytes (or ASCII characters) in the following format: TBLTextDirection Text direction. TBLTextEncoding Text encoding. TBLTransformKind Transformation matrix type that can be obtained by calling <code>TBLMatrix2D.Kind</code>. TBLTransformOp Transformation matrix operation type. TBLUniqueId Unique identifier that can be used for caching purposes."},{"location":"Reference/Blend2D/#routines","title":"Routines","text":"Name Description BLAbs(TBLPoint) BLAbs(TBLSize) BLArc BLBox BLBoxI BLCircle BLClamp BLConicGradientValues(Double, Double, Double, Double) BLConicGradientValues BLEllipse(Double, Double, Double, Double) BLEllipse(Double, Double, Double) BLGetLastError Retrieves the last Blend2D error, or <code>TBLResult.Success</code> if there was none. BLGradientStop(Double, TAlphaColor) BLGradientStop(Double, TBLRgba64) BLGradientStop(Double, TBLRgba32) BLGradientStop BLLine(Double, Double, Double, Double) BLLine(TBLPoint, TBLPoint) BLLinearGradientValues BLLinearGradientValues(Double, Double, Double, Double) BLMax(TBLRgba32, TBLRgba32) BLMax(TBLRgba, TBLRgba) BLMax(Double, TBLPoint) BLMax(TBLPoint, Double) BLMax(TBLPoint, TBLPoint) BLMax(TBLSize, TBLSize) BLMax(TBLRgba64, TBLRgba64) BLMin(TBLRgba64, TBLRgba64) BLMin(TBLRgba32, TBLRgba32) BLMin(TBLRgba, TBLRgba) BLMin(TBLPoint, Double) BLMin(Double, TBLPoint) BLMin(TBLSize, TBLSize) BLMin(TBLPoint, TBLPoint) BLPoint BLPointI BLRadialGradientValues BLRadialGradientValues(Double, Double, Double, Double, Double, Double) BLRect BLRectI BLRgba(TBLRgba32) BLRgba(TAlphaColorF) BLRgba(Single, Single, Single, Single) BLRgba(TBLRgba64) BLRgba BLRgba32(UInt32) BLRgba32 BLRgba32(TAlphaColorRec) BLRgba32(Byte, Byte, Byte, Byte) BLRgba32(TBLRgba64) BLRgba64 BLRgba64(UInt64) BLRgba64(Word, Word, Word, Word) BLRgba64(TBLRgba32) BLRoundRect(Double, Double, Double, Double, Double) BLRoundRect(TBLRect, Double, Double) BLRoundRect(TBLRect, Double) BLRoundRect(Double, Double, Double, Double, Double, Double) BLSetErrorHandler Sets a Blend2D error handler. BLSetExceptionErrorHandler Sets the error handler to a procedure that raises an exception when a Blend2D error occurs. This is the default behavior. BLSetGetLastErrorHandler Sets the error handler to a procedure that sets a global error variable when a Blend2D error occurs. You can then use <code>BLGetLastError</code> to retrieve this error code. BLSize BLSizeI BLTriangle"},{"location":"Reference/Blend2D/classes/EBlend2DError/","title":"EBlend2DError","text":"<p>Type of exception that is raised for Blend2D errors. Exceptions are enabled by default, but can be disabled using <code>BLSetErrorHandler</code>. </p>"},{"location":"Reference/Blend2D/classes/EBlend2DError/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type EBlend2DError = class(Exception) ... end\n</code></pre>"},{"location":"Reference/Blend2D/classes/EBlend2DError/#inheritance","title":"Inheritance","text":"<p>Inherits: Exception</p>"},{"location":"Reference/Blend2D/classes/EBlend2DError/#see-also","title":"See Also","text":"<ul> <li>BLSetErrorHandler</li> </ul>"},{"location":"Reference/Blend2D/classes/EBlend2DError/#properties","title":"Properties","text":"Name Description ResultCode The Blend2D result code."},{"location":"Reference/Blend2D/classes/EBlend2DError/#constructors","title":"Constructors","text":"Name Description Create Creates an exception object."},{"location":"Reference/Blend2D/classes/EBlend2DError/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/EBlend2DError/#ResultCode","title":"ResultCode","text":"<p>The Blend2D result code. </p> <p><code>property ResultCode: TBLResult read FResult</code></p> <p>Type: <code>TBLResult</code></p>"},{"location":"Reference/Blend2D/classes/EBlend2DError/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/EBlend2DError/#Create","title":"<code>Create</code>","text":"<p>Creates an exception object. </p> <p><code>constructor Create(const AResult: TBLResult)</code></p>"},{"location":"Reference/Blend2D/classes/EBlend2DError/#parameters","title":"Parameters","text":"<p><code>AResult</code>: <code>TBLResult</code></p>"},{"location":"Reference/Blend2D/classes/P/","title":"TBLArray&lt;T&gt;.P","text":"<p>A pointer to type <code>T</code>. </p>"},{"location":"Reference/Blend2D/classes/P/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type P = ^T\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLApproximationOptions/","title":"TBLApproximationOptions","text":"<p>Options used to describe how geometry is approximated.</p> <p>This record cannot be simply zeroed and then passed to functions that accept approximation options. Use <code>TBLApproximationOptions.Default</code> to setup defaults and then alter values you want to change.</p> <p>Example of using <code>TBLApproximationOptions</code>:</p> <pre><code>  // Initialize with defaults first.\n  var Approx := TBLApproximationOptions.Default;\n\n  // Override values you want to change.\n  Ppprox.SimplifyTolerance = 0.02;\n\n  // ... now safely use approximation options in your code ...\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLApproximationOptions/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLApproximationOptions = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLApproximationOptions/#properties","title":"Properties","text":"Name Description FlattenMode Specifies how curves are flattened. FlattenTolerance Tolerance used to flatten curves. OffsetMode Specifies how curves are offsetted (used by stroking). OffsetParameter Curve offsetting parameter, exact meaning depends on <code>offsetMode</code>. SimplifyTolerance Tolerance used to approximate cubic curves with quadratic curves."},{"location":"Reference/Blend2D/classes/TBLApproximationOptions/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLApproximationOptions/#FlattenMode","title":"FlattenMode","text":"<p>Specifies how curves are flattened. </p> <p><code>property FlattenMode: TBLFlattenMode read GetFlattenMode write SetFlattenMode</code></p> <p>Type: <code>TBLFlattenMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLApproximationOptions/#FlattenTolerance","title":"FlattenTolerance","text":"<p>Tolerance used to flatten curves. </p> <p><code>property FlattenTolerance: Double read FFlattenTolerance write FFlattenTolerance</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLApproximationOptions/#OffsetMode","title":"OffsetMode","text":"<p>Specifies how curves are offsetted (used by stroking). </p> <p><code>property OffsetMode: TBLOffsetMode read GetOffsetMode write SetOffsetMode</code></p> <p>Type: <code>TBLOffsetMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLApproximationOptions/#OffsetParameter","title":"OffsetParameter","text":"<p>Curve offsetting parameter, exact meaning depends on <code>offsetMode</code>. </p> <p><code>property OffsetParameter: Double read FOffsetParameter write FOffsetParameter</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLApproximationOptions/#SimplifyTolerance","title":"SimplifyTolerance","text":"<p>Tolerance used to approximate cubic curves with quadratic curves. </p> <p><code>property SimplifyTolerance: Double read FSimplifyTolerance write FSimplifyTolerance</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/","title":"TBLArc","text":"<p>Arc specified as [CX, CY, RX, RY, Start, Sweep] using <code>Double</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLArc/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLArc = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLArc/#fields","title":"Fields","text":"Name Description CX CY RX RY Start Sweep"},{"location":"Reference/Blend2D/classes/TBLArc/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLArc/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLArc/#methods","title":"Methods","text":"Name Description Equals Reset(TBLArc) Reset(Double, Double, Double, Double, Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLArc/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLArc/#CX","title":"CX","text":"<p><code>var CX: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#CY","title":"CY","text":"<p><code>var CY: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#RX","title":"RX","text":"<p><code>var RX: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#RY","title":"RY","text":"<p><code>var RY: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#Start","title":"Start","text":"<p><code>var Start: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#Sweep","title":"Sweep","text":"<p><code>var Sweep: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLArc/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const ACX, ACY, ARX, ARY, AStart, ASweep: Double)</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#parameters","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLArc/#Equal","title":"Equal(TBLArc, TBLArc)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLArc): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLArc</code></p> <p><code>ARight</code>: <code>TBLArc</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#NotEqual","title":"NotEqual(TBLArc, TBLArc)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLArc): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLArc</code></p> <p><code>ARight</code>: <code>TBLArc</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLArc/#Equals","title":"Equals(TBLArc)","text":"<p><code>function Equals(const AOther: TBLArc): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#parameters_3","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLArc</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#Reset_0","title":"Reset(TBLArc)","text":"<p><code>procedure Reset(const AOther: TBLArc); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#parameters_4","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLArc</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#Reset_1","title":"Reset(Double, Double, Double, Double, Double, Double)","text":"<p><code>procedure Reset(const ACX, ACY, ARX, ARY, AStart, ASweep: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#parameters_5","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLArc/#Reset_2","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/","title":"TBLArrayView&lt;T&gt;","text":"<p>Array view of <code>T</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLArrayView&lt;T&gt; = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code>: </p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#remarks","title":"Remarks","text":"<p><code>T</code> must be an unmanaged type (eg. cannot be a String or interface or dynamic array) and cannot contain [weak] references. This is checked with an assertion. </p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#nested-types","title":"Nested Types","text":"Name Description P A pointer to type <code>T</code>."},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#properties","title":"Properties","text":"Name Description Items Refs Size"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#constructors","title":"Constructors","text":"Name Description Create(P, NativeInt) Create Initialize Creates a default empty array view"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#methods","title":"Methods","text":"Name Description First Last Reset(P, NativeInt) Reset"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#Items","title":"Items","text":"<p><code>property Items[const AIndex: NativeInt]: T read GetItem; default</code></p> <p>Type: <code>T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#Refs","title":"Refs","text":"<p><code>property Refs[const AIndex: NativeInt]: P read GetRef</code></p> <p>Type: <code>P</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#Size","title":"Size","text":"<p><code>property Size: NativeInt read FSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#Create_0","title":"<code>Create</code>","text":"<p><code>constructor Create(const ADataIn: P; const ASizeIn: NativeInt)</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#parameters","title":"Parameters","text":"<p><code>ADataIn</code>: <code>P</code></p> <p><code>ASizeIn</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#Create_1","title":"<code>Create</code>","text":"<p><code>class constructor Create</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default empty array view </p> <p><code>constructor Initialize(out ADest: TBLArrayView&lt;T&gt;)</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLArrayView&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#First","title":"First","text":"<p><code>function First: P; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#returns","title":"Returns","text":"<p><code>P</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#Last","title":"Last","text":"<p><code>function Last: P; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#returns_1","title":"Returns","text":"<p><code>P</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#Reset_0","title":"Reset(P, NativeInt)","text":"<p><code>procedure Reset(const ADataIn: P; const ASizeIn: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#parameters_2","title":"Parameters","text":"<p><code>ADataIn</code>: <code>P</code></p> <p><code>ASizeIn</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArrayView_1/#Reset_1","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/","title":"TBLArray&lt;T&gt;","text":"<p>Generic array container. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLArray&lt;T&gt; = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code>: </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks","title":"Remarks","text":"<p><code>T</code> must be of one of the following types:</p> <ul> <li>A signed or unsigned 8-, 16-, 32- or 64-bit integer.</li> <li>Enumerated types.</li> <li>A 32- or 64-bit floating-point value (Single or Double).</li> <li>An unmanaged record that does not contain any [weak] references. So the record cannot contain reference-counted values like Strings, Interfaces or dynamic arrays. Also, only small records of certain sizes (32 bytes or less) bytes are supported.</li> </ul> <p>These conditions are checked with an assertion. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#nested-types","title":"Nested Types","text":"Name Description P A pointer to type <code>T</code>."},{"location":"Reference/Blend2D/classes/TBLArray_1/#properties","title":"Properties","text":"Name Description Capacity The capacity of the array (number of items). Data Pointer to the array data. IsEmpty Whether the array is empty. Items The items in the array. Refs References to the items in the array. Size The size of the array (number of items)."},{"location":"Reference/Blend2D/classes/TBLArray_1/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor. Create Finalize Destroys the path. Initialize Creates a default constructed array."},{"location":"Reference/Blend2D/classes/TBLArray_1/#operators","title":"Operators","text":"Name Description Equal(TBLArray&lt;T&gt;, TBLArray&lt;T&gt;) Returns True if two arrays are equal (have the same contents). Equal(TBLArray&lt;T&gt;, Pointer) Used to compare against <code>nil</code> (empty array). NotEqual(TBLArray&lt;T&gt;, TBLArray&lt;T&gt;) Returns True if two arrays are not equal (do not have the same contents). NotEqual(TBLArray&lt;T&gt;, Pointer) Used to compare against <code>nil</code> (empty array)."},{"location":"Reference/Blend2D/classes/TBLArray_1/#methods","title":"Methods","text":"Name Description Append(T[]) Appends a number of items items passed in <code>AItems</code> to the array. Append(T) Appends <code>AItem</code> to the array. AppendData(P, NativeInt) Appends <code>AItems</code> to the array of length <code>ASize</code>. AppendData(TBLArrayView&lt;T&gt;) Appends items to the array of the given array <code>AView</code>. Assign Replaces the content of the array with the items passed in <code>AItems</code>. AssignData(P, NativeInt) Replaces the content of the array <code>AItems</code> of length <code>ASize</code>. AssignData(TBLArrayView&lt;T&gt;) Replaces the content of the array by items in the passed array <code>AView</code>. AssignDeep Copy assignment, but creates a deep copy of the <code>AOther</code> array instead of weak copy. AssignExternalData Assign an external buffer to the array, which would replace the existing content. At Returns the array item at the given <code>AIndex</code>. Clear Clears the content of the array. Equals Returns whether the content of this array and <code>AOther</code> matches. First Returns a reference to the first item. IndexOf(T, NativeInt) Returns the index at which a given <code>AItem</code> can be found in the array starting from <code>AFromIndex</code>, or -1 if not found. IndexOf(T) Returns the first index at which a given <code>AItem</code> can be found in the array, or -1 if not found. Insert(NativeInt, T[]) Inserts a number of items passed in <code>AItems</code> at the given <code>AIndex</code>. Insert(NativeInt, T) Inserts <code>AItem</code> at the given <code>AIndex</code>. InsertData(NativeInt, P, NativeInt) Prepends <code>AItems</code> to the array of length <code>ASize</code> at the given <code>AIndex</code>. InsertData(NativeInt, TBLArrayView&lt;T&gt;) Inserts items to the array of the given array <code>AView</code> at the given <code>AIndex</code>. InsertOp Insert operation, the semantics is similar to <code>ModifyOp</code>, however, ASize items are inserted at the given <code>AIndex</code> instead of assigned or appended. Last Returns a reference to the last item. LastIndexOf(T, NativeInt) Returns the index at which a given <code>AItem</code> can be found in the array starting from <code>AFromIndex</code> and ending at 0, or -1 if not present. LastIndexOf(T) Returns the last index at which a given <code>AItem</code> can be found in the array, or -1 if not present. MakeMutable Makes the array mutable by possibly creating a deep copy of the data if it's either read-only or shared with another array. Returns a pointer to the beginning of mutable data in <code>dataOut</code>. Modify Similar to <code>ModifyOp</code>, but the items to assign/append to the array are given after the <code>AOp</code> argument. ModifyOp Modify operation is similar to <code>MakeMutable</code>, however, the <code>AOp</code> argument specifies the desired array operation, and <code>ASize</code> specified the number of items to assign or append. Returns a pointer to the first item to be either assigned or appended and it points to an uninitialized memory. Prepend(T[]) Prepends a number of items passed in <code>AItems</code> to the array. Prepend(T) Prepends <code>AItem</code> to the array. PrependData(P, NativeInt) Prepends <code>AItems</code> to the array of length <code>ASize</code>. PrependData(TBLArrayView&lt;T&gt;) Prepends items to the array of the given array <code>AView</code>. RefAt Returns a reference to the array item at the given <code>AIndex</code>. Remove(TBLRange) Removes <code>ARange</code> of items. Remove(NativeInt) Removes an item at the given <code>Andex</code>. Replace Replaces an item at the given <code>AIndex</code> by <code>AItem</code>. ReplaceData(TBLRange, P, NativeInt) Replaces the given <code>ARange</code> of items by <code>AItems</code> of length <code>ASize</code>. ReplaceData(TBLRange, TBLArrayView&lt;T&gt;) Replaces the given <code>ARange</code> of items by the given array <code>AView</code>. Reserve Reserves the array capacity to hold at least <code>AMinCapacity</code> items. Reset Resets the array into a default constructed state by clearing its content and releasing its memory. Resize Resizes the array to <code>ASize</code> items. Shrink Shrinks the capacity of the array to fit its length. Swap Swaps the content of this array with the <code>AOther</code> array. ToArray Converts this array to a Delphi `TArray Truncate Truncates the length of the array to maximum <code>AMaxSize</code> items. View Returns the array data as `TBLArrayView"},{"location":"Reference/Blend2D/classes/TBLArray_1/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLArray_1/#Capacity","title":"Capacity","text":"<p>The capacity of the array (number of items). </p> <p><code>property Capacity: NativeInt read GetCapacity</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Data","title":"Data","text":"<p>Pointer to the array data. </p> <p><code>property Data: P read GetData</code></p> <p>Type: <code>P</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#IsEmpty","title":"IsEmpty","text":"<p>Whether the array is empty. </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Items","title":"Items","text":"<p>The items in the array. </p> <p><code>property Items[const AIndex: NativeInt]: T read GetItem write SetItem; default</code></p> <p>Type: <code>T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_1","title":"Remarks","text":"<p>This is the same as calling <code>At(AIndex)</code>. The index must be valid, which means it has to be less than the array length. Accessing items out of range is undefined behavior that would be caught by assertions in debug builds. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Refs","title":"Refs","text":"<p>References to the items in the array. </p> <p><code>property Refs[const AIndex: NativeInt]: P read GetRef</code></p> <p>Type: <code>P</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_2","title":"Remarks","text":"<p>This is the same as calling <code>RefAt(AIndex)</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Size","title":"Size","text":"<p>The size of the array (number of items). </p> <p><code>property Size: NativeInt read GetSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLArray_1/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor.</p> <p>Creates a weak-copy of the <code>ASrc</code> array by increasing it's internal reference counter. This array and <code>ASrc</code> would point to the same data and would be otherwise identical. Any change to <code>ASrc</code> would also affect this array. </p> <p><code>constructor Assign(var ADest: TBLArray&lt;T&gt;; const ASrc: TBLArray&lt;T&gt;); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLArray&lt;T&gt;</code></p> <p><code>ASrc</code>: <code>TBLArray&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Create","title":"<code>Create</code>","text":"<p><code>class constructor Create</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the path. </p> <p><code>destructor Finalize(var ADest: TBLArray&lt;T&gt;)</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLArray&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default constructed array. </p> <p><code>constructor Initialize(out ADest: TBLArray&lt;T&gt;)</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLArray&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLArray_1/#Equal_0","title":"Equal(TBLArray, TBLArray)","text":"<p>Returns True if two arrays are equal (have the same contents). </p> <p><code>class operator Equal(const ALeft, ARight: TBLArray&lt;T&gt;): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLArray&lt;T&gt;</code></p> <p><code>ARight</code>: <code>TBLArray&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Equal_1","title":"Equal(TBLArray, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty array). </p> <p><code>class operator Equal(const ALeft: TBLArray&lt;T&gt;; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLArray&lt;T&gt;</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#NotEqual_0","title":"NotEqual(TBLArray, TBLArray)","text":"<p>Returns True if two arrays are not equal (do not have the same contents). </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLArray&lt;T&gt;): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLArray&lt;T&gt;</code></p> <p><code>ARight</code>: <code>TBLArray&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#NotEqual_1","title":"NotEqual(TBLArray, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty array). </p> <p><code>class operator NotEqual(const ALeft: TBLArray&lt;T&gt;; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLArray&lt;T&gt;</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLArray_1/#Append_0","title":"Append(T[])","text":"<p>Appends a number of items items passed in <code>AItems</code> to the array. </p> <p><code>procedure Append(const AItems: array of T); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_7","title":"Parameters","text":"<p><code>AItems</code>: <code>array of T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_3","title":"Remarks","text":"<p>The data in <code>AItems</code> cannot point to the same data that the array holds as the function that prepares the append operation has no way to know about the source (it only makes space for new data). It's an undefined behavior in such case. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Append_1","title":"Append(T)","text":"<p>Appends <code>AItem</code> to the array. </p> <p><code>procedure Append(const AItem: T); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_8","title":"Parameters","text":"<p><code>AItem</code>: <code>T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#AppendData_0","title":"AppendData(P, NativeInt)","text":"<p>Appends <code>AItems</code> to the array of length <code>ASize</code>. </p> <p><code>procedure AppendData(const AItems: P; const ASize: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_9","title":"Parameters","text":"<p><code>AItems</code>: <code>P</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_4","title":"Remarks","text":"<p>The implementation guarantees that a <code>AItems</code> pointing to the array data itself would work. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#AppendData_1","title":"AppendData(TBLArrayView&lt;T&gt;)","text":"<p>Appends items to the array of the given array <code>AView</code>. </p> <p><code>procedure AppendData(const AView: TBLArrayView&lt;T&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_10","title":"Parameters","text":"<p><code>AView</code>: <code>TBLArrayView&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_5","title":"Remarks","text":"<p>The implementation guarantees that a <code>AView</code> pointing to the array data itself would work. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Assign","title":"Assign(T[])","text":"<p>Replaces the content of the array with the items passed in <code>AItems</code>. </p> <p><code>procedure Assign(const AItems: array of T)</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_11","title":"Parameters","text":"<p><code>AItems</code>: <code>array of T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#AssignData_0","title":"AssignData(P, NativeInt)","text":"<p>Replaces the content of the array <code>AItems</code> of length <code>ASize</code>. </p> <p><code>procedure AssignData(const AItems: P; const ASize: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_12","title":"Parameters","text":"<p><code>AItems</code>: <code>P</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_6","title":"Remarks","text":"<p>The implementation can handle items pointing to the array's data as well, so it's possible to create a slice of the array if required. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#AssignData_1","title":"AssignData(TBLArrayView&lt;T&gt;)","text":"<p>Replaces the content of the array by items in the passed array <code>AView</code>. </p> <p><code>procedure AssignData(const AView: TBLArrayView&lt;T&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_13","title":"Parameters","text":"<p><code>AView</code>: <code>TBLArrayView&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_7","title":"Remarks","text":"<p>The implementation can handle <code>AView</code> pointing to the array's data as well, so it's possible to create a slice of the array if required. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#AssignDeep","title":"AssignDeep(TBLArray&lt;T&gt;)","text":"<p>Copy assignment, but creates a deep copy of the <code>AOther</code> array instead of weak copy. </p> <p><code>procedure AssignDeep(const AOther: TBLArray&lt;T&gt;); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_10","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_14","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLArray&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#AssignExternalData","title":"AssignExternalData(P, NativeInt, NativeInt, TBLDataAccessFlags, TBLDestroyExternalDataFunc, Pointer)","text":"<p>Assign an external buffer to the array, which would replace the existing content. External data buffer to use (cannot be nil).Size of the data buffer in items.Capacity of the buffer, cannot be zero or smaller than <code>ASize</code>.Flags that describe whether the data is read-only or read-write.(Optional) function that would be called when the array is destroyed (can be nil if you don't need it).(Optional) user data passed to <code>ADestroyFunc</code>.</p> <p><code>procedure AssignExternalData(const AData: P; const ASize, ACapacity: NativeInt; const AAccessFlags: TBLDataAccessFlags; const ADestroyFunc: TBLDestroyExternalDataFunc = nil; const AUserData: Pointer = nil); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_11","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_15","title":"Parameters","text":"<p><code>AData</code>: <code>P</code></p> <p><code>ASize</code>: <code>NativeInt</code></p> <p><code>ACapacity</code>: <code>NativeInt</code></p> <p><code>AAccessFlags</code>: <code>TBLDataAccessFlags</code></p> <p><code>ADestroyFunc</code>: <code>TBLDestroyExternalDataFunc = nil</code></p> <p><code>AUserData</code>: <code>Pointer = nil</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#At","title":"At(NativeInt)","text":"<p>Returns the array item at the given <code>AIndex</code>. </p> <p><code>function At(const AIndex: NativeInt): T; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_16","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_4","title":"Returns","text":"<p><code>T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_8","title":"Remarks","text":"<p>The index must be valid, which means it has to be less than the array length. Accessing items out of range is undefined behavior that would be caught by assertions in debug builds. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Clear","title":"Clear","text":"<p>Clears the content of the array. </p> <p><code>procedure Clear; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_12","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_9","title":"Remarks","text":"<p>If the array uses a dynamically allocated memory and the instance is mutable the memory won't be released, it will be reused instead. Consider using <code>Reset</code> if you want to release the memory in such case instead. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Equals","title":"Equals(TBLArray&lt;T&gt;)","text":"<p>Returns whether the content of this array and <code>AOther</code> matches. </p> <p><code>function Equals(const AOther: TBLArray&lt;T&gt;): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_17","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLArray&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_5","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#First","title":"First","text":"<p>Returns a reference to the first item. </p> <p><code>function First: P; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_6","title":"Returns","text":"<p><code>P</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_10","title":"Remarks","text":"<p>The array must have at least one item otherwise calling <code>First</code> would point to the end of the array, which is not initialized, and such reference would be invalid. Debug builds would catch this condition with an assertion. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#IndexOf_0","title":"IndexOf(T, NativeInt)","text":"<p>Returns the index at which a given <code>AItem</code> can be found in the array starting from <code>AFromIndex</code>, or -1 if not found. </p> <p><code>function IndexOf(const AItem: T; const AFromIndex: NativeInt): NativeInt; overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_18","title":"Parameters","text":"<p><code>AItem</code>: <code>T</code></p> <p><code>AFromIndex</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_7","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#IndexOf_1","title":"IndexOf(T)","text":"<p>Returns the first index at which a given <code>AItem</code> can be found in the array, or -1 if not found. </p> <p><code>function IndexOf(const AItem: T): NativeInt; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_19","title":"Parameters","text":"<p><code>AItem</code>: <code>T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_8","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Insert_0","title":"Insert(NativeInt, T[])","text":"<p>Inserts a number of items passed in <code>AItems</code> at the given <code>AIndex</code>. </p> <p><code>procedure Insert(const AIndex: NativeInt; const AItems: array of T); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_13","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_20","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AItems</code>: <code>array of T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_11","title":"Remarks","text":"<p>The data in <code>AItems</code> cannot point to the same data that the array holds as the function that prepares the insert operation has no way to know about the source (it only makes space for new data). It's an undefined behavior in such case. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Insert_1","title":"Insert(NativeInt, T)","text":"<p>Inserts <code>AItem</code> at the given <code>AIndex</code>. </p> <p><code>procedure Insert(const AIndex: NativeInt; const AItem: T); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_14","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_21","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AItem</code>: <code>T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#InsertData_0","title":"InsertData(NativeInt, P, NativeInt)","text":"<p>Prepends <code>AItems</code> to the array of length <code>ASize</code> at the given <code>AIndex</code>. </p> <p><code>procedure InsertData(const AIndex: NativeInt; const AItems: P; const ASize: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_15","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_22","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AItems</code>: <code>P</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_12","title":"Remarks","text":"<p>The implementation guarantees that a <code>AItems</code> pointing to the array data itself would work. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#InsertData_1","title":"InsertData(NativeInt, TBLArrayView&lt;T&gt;)","text":"<p>Inserts items to the array of the given array <code>AView</code> at the given <code>AIndex</code>. </p> <p><code>procedure InsertData(const AIndex: NativeInt; const AView: TBLArrayView&lt;T&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_16","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_23","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AView</code>: <code>TBLArrayView&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_13","title":"Remarks","text":"<p>The implementation guarantees that a <code>AView</code> pointing to the array data itself would work. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#InsertOp","title":"InsertOp(NativeInt, NativeInt)","text":"<p>Insert operation, the semantics is similar to <code>ModifyOp</code>, however, ASize items are inserted at the given <code>AIndex</code> instead of assigned or appended.</p> <p>The caller is responsible for initializing the returned data. </p> <p><code>function InsertOp(const AIndex, ASize: NativeInt): P; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_17","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_24","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_9","title":"Returns","text":"<p><code>P</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Last","title":"Last","text":"<p>Returns a reference to the last item. </p> <p><code>function Last: P; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_10","title":"Returns","text":"<p><code>P</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_14","title":"Remarks","text":"<p>The array must have at least one item otherwise calling <code>Last</code> would point to the end of the array, which is not initialized, and such reference would be invalid. Debug builds would catch this condition with an assertion. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#LastIndexOf_0","title":"LastIndexOf(T, NativeInt)","text":"<p>Returns the index at which a given <code>AItem</code> can be found in the array starting from <code>AFromIndex</code> and ending at 0, or -1 if not present. </p> <p><code>function LastIndexOf(const AItem: T; const AFromIndex: NativeInt): NativeInt; overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_25","title":"Parameters","text":"<p><code>AItem</code>: <code>T</code></p> <p><code>AFromIndex</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_11","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#LastIndexOf_1","title":"LastIndexOf(T)","text":"<p>Returns the last index at which a given <code>AItem</code> can be found in the array, or -1 if not present. </p> <p><code>function LastIndexOf(const AItem: T): NativeInt; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_26","title":"Parameters","text":"<p><code>AItem</code>: <code>T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_12","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#MakeMutable","title":"MakeMutable","text":"<p>Makes the array mutable by possibly creating a deep copy of the data if it's either read-only or shared with another array. Returns a pointer to the beginning of mutable data in <code>dataOut</code>.</p> <pre><code>  var A: TBLArray&amp;lt;Byte&gt;;\n  A.Append([0, 1, 2, 3, 4, 5, 6, 7]);\n\n  var Data := A.MakeMutable;\n\n  // Data is a mutable pointer to array content of 8 items.\n  Data[0] = 100;\n\n  // Calling array member functions could invalidate Data.\n  A.Append(9); // You shouldn't use Data afterwards.\n</code></pre> <p><code>function MakeMutable: P; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_18","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_13","title":"Returns","text":"<p><code>P</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Modify","title":"Modify(TBLModifyOp, T[])","text":"<p>Similar to <code>ModifyOp</code>, but the items to assign/append to the array are given after the <code>AOp</code> argument. </p> <p><code>procedure Modify(const AOp: TBLModifyOp; const AItems: array of T)</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_19","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_27","title":"Parameters","text":"<p><code>AOp</code>: <code>TBLModifyOp</code></p> <p><code>AItems</code>: <code>array of T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#ModifyOp","title":"ModifyOp(TBLModifyOp, NativeInt)","text":"<p>Modify operation is similar to <code>MakeMutable</code>, however, the <code>AOp</code> argument specifies the desired array operation, and <code>ASize</code> specified the number of items to assign or append. Returns a pointer to the first item to be either assigned or appended and it points to an uninitialized memory.</p> <p>Please note that assignments mean to wipe out the whole array content and to set the length of the array to <code>ASize</code>. The caller is responsible for initializing the returned data. </p> <p><code>function ModifyOp(const AOp: TBLModifyOp; const ASize: NativeInt): P; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_20","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_28","title":"Parameters","text":"<p><code>AOp</code>: <code>TBLModifyOp</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_14","title":"Returns","text":"<p><code>P</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Prepend_0","title":"Prepend(T[])","text":"<p>Prepends a number of items passed in <code>AItems</code> to the array. </p> <p><code>procedure Prepend(const AItems: array of T); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_21","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_29","title":"Parameters","text":"<p><code>AItems</code>: <code>array of T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_15","title":"Remarks","text":"<p>The data in <code>AItems</code> cannot point to the same data that the array holds as the function that prepares the prepend operation has no way to know about the source (it only makes space for new data). It's an undefined behavior in such case. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Prepend_1","title":"Prepend(T)","text":"<p>Prepends <code>AItem</code> to the array. </p> <p><code>procedure Prepend(const AItem: T); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_22","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_30","title":"Parameters","text":"<p><code>AItem</code>: <code>T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#PrependData_0","title":"PrependData(P, NativeInt)","text":"<p>Prepends <code>AItems</code> to the array of length <code>ASize</code>. </p> <p><code>procedure PrependData(const AItems: P; const ASize: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_23","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_31","title":"Parameters","text":"<p><code>AItems</code>: <code>P</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_16","title":"Remarks","text":"<p>The implementation guarantees that a <code>AItems</code> pointing to the array data itself would work. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#PrependData_1","title":"PrependData(TBLArrayView&lt;T&gt;)","text":"<p>Prepends items to the array of the given array <code>AView</code>. </p> <p><code>procedure PrependData(const AView: TBLArrayView&lt;T&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_24","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_32","title":"Parameters","text":"<p><code>AView</code>: <code>TBLArrayView&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_17","title":"Remarks","text":"<p>The implementation guarantees that a <code>AView</code> pointing to the array data itself would work. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#RefAt","title":"RefAt(NativeInt)","text":"<p>Returns a reference to the array item at the given <code>AIndex</code>. </p> <p><code>function RefAt(const AIndex: NativeInt): P; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_33","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_15","title":"Returns","text":"<p><code>P</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#remarks_18","title":"Remarks","text":"<p>The index must be valid, which means it has to be less than the array length. Accessing items out of range is undefined behavior that would be caught by assertions in debug builds. </p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Remove_0","title":"Remove(TBLRange)","text":"<p>Removes <code>ARange</code> of items. </p> <p><code>procedure Remove(const ARange: TBLRange); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_25","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_34","title":"Parameters","text":"<p><code>ARange</code>: <code>TBLRange</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Remove_1","title":"Remove(NativeInt)","text":"<p>Removes an item at the given <code>Andex</code>. </p> <p><code>procedure Remove(const AIndex: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_26","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_35","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Replace","title":"Replace(NativeInt, T)","text":"<p>Replaces an item at the given <code>AIndex</code> by <code>AItem</code>. </p> <p><code>procedure Replace(const AIndex: NativeInt; const AItem: T); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_27","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_36","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AItem</code>: <code>T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#ReplaceData_0","title":"ReplaceData(TBLRange, P, NativeInt)","text":"<p>Replaces the given <code>ARange</code> of items by <code>AItems</code> of length <code>ASize</code>. </p> <p><code>procedure ReplaceData(const ARange: TBLRange; const AItems: P; const ASize: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_28","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_37","title":"Parameters","text":"<p><code>ARange</code>: <code>TBLRange</code></p> <p><code>AItems</code>: <code>P</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#ReplaceData_1","title":"ReplaceData(TBLRange, TBLArrayView&lt;T&gt;)","text":"<p>Replaces the given <code>ARange</code> of items by the given array <code>AView</code>. </p> <p><code>procedure ReplaceData(const ARange: TBLRange; const AView: TBLArrayView&lt;T&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_29","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_38","title":"Parameters","text":"<p><code>ARange</code>: <code>TBLRange</code></p> <p><code>AView</code>: <code>TBLArrayView&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Reserve","title":"Reserve(NativeInt)","text":"<p>Reserves the array capacity to hold at least <code>AMinCapacity</code> items. </p> <p><code>procedure Reserve(const AMinCapacity: NativeInt); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_30","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_39","title":"Parameters","text":"<p><code>AMinCapacity</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Reset","title":"Reset","text":"<p>Resets the array into a default constructed state by clearing its content and releasing its memory. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_31","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Resize","title":"Resize(NativeInt, T)","text":"<p>Resizes the array to <code>ASize</code> items.</p> <p>If <code>ASize</code> is greater than the array length then all new items will be initialized by <code>AFill</code> item. </p> <p><code>procedure Resize(const ASize: NativeInt; const AFill: T); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_32","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_40","title":"Parameters","text":"<p><code>ASize</code>: <code>NativeInt</code></p> <p><code>AFill</code>: <code>T</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Shrink","title":"Shrink","text":"<p>Shrinks the capacity of the array to fit its length.</p> <p>Some array operations like <code>Append</code> may grow the array more than necessary to make it faster when such manipulation operations are called consecutively. When you are done with modifications and you know the lifetime of the array won't be short you can use <code>Shrink</code> to fit its memory requirements to the number of items it stores, which could optimize the application's memory requirements. </p> <p><code>procedure Shrink; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_33","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Swap","title":"Swap(TBLArray&lt;T&gt;)","text":"<p>Swaps the content of this array with the <code>AOther</code> array. </p> <p><code>procedure Swap(var AOther: TBLArray&lt;T&gt;); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_41","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLArray&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#ToArray","title":"ToArray","text":"<p>Converts this array to a Delphi <code>TArray&lt;t&gt;</code>. </p> <p><code>function ToArray: TArray&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_16","title":"Returns","text":"<p><code>TArray&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#Truncate","title":"Truncate(NativeInt)","text":"<p>Truncates the length of the array to maximum <code>AMaxSize</code> items.</p> <p>If the length of the array is less than <code>AMaxSize</code> then truncation does nothing. </p> <p><code>procedure Truncate(const AMaxSize: NativeInt); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#exceptions_34","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#parameters_42","title":"Parameters","text":"<p><code>AMaxSize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#View","title":"View","text":"<p>Returns the array data as <code>TBLArrayView&lt;t&gt;</code>. </p> <p><code>function View: TBLArrayView&lt;T&gt;; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLArray_1/#returns_17","title":"Returns","text":"<p><code>TBLArrayView&lt;T&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/","title":"TBLBitArray","text":"<p>BitArray container. </p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLBitArray = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#properties","title":"Properties","text":"Name Description Bits The bits in the bit array. Capacity The capacity of the bit array in bits. Cardinality The number of bits set in the bit array. Data The bit data. IsEmpty Whether the bit array is empty (has no content). Size The size of the bit array in bits. WordCount The number of bit words this bit array uses."},{"location":"Reference/Blend2D/classes/TBLBitArray/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor. Finalize Destroys the bit array. Initialize Creates an empty bit array."},{"location":"Reference/Blend2D/classes/TBLBitArray/#operators","title":"Operators","text":"Name Description Equal(TBLBitArray, TBLBitArray) Returns True if two bit arrays are equal (have the same contents). Equal(TBLBitArray, Pointer) Used to compare against <code>nil</code> (empty bit array). GreaterThan GreaterThanOrEqual LessThan LessThanOrEqual NotEqual(TBLBitArray, TBLBitArray) Returns True if two bit arrays are not equal (do not have the same contents). NotEqual(TBLBitArray, Pointer) Used to compare against <code>nil</code> (empty bit array)."},{"location":"Reference/Blend2D/classes/TBLBitArray/#methods","title":"Methods","text":"Name Description AppendBit Appends a bit <code>ABitValue</code> to the bit array. AppendWord Appends a single word <code>AWordValue</code> to the bit array. AppendWords(PUInt32, Integer) Appends whole words to the bit array. AppendWords(TArray&lt;UInt32&gt;) Appends whole words to the bit array. AssignWords(PUInt32, Integer) Replaces the content of the bit array by bits specified by <code>AWordData</code> of size <code>AWordCount</code> [the size is in UInt32 units]. AssignWords(TArray&lt;UInt32&gt;) Replaces the content of the bit array by bits specified by <code>AWordData</code>. CardinalityInRange Returns the number of bits set in the given <code>[AStartBit, AEndBit)</code> range. Clear Clears the content of the bit array without releasing its dynamically allocated data, if possible. ClearBit Sets a bit to False at the given <code>ABitIndex</code>. ClearRange Sets bits in <code>[AStartBit, EndBit)</code> range to False. ClearWord Sets bits starting from <code>ABitIndex</code> specified by <code>AWordValue</code> to False (zeros in ASordValue are ignored). ClearWords(Integer, PUInt32, UInt32) Sets bits starting from <code>ABitIndex</code> specified by <code>AWordData</code> and <code>AWordCount</code> to False (zeros in AWordData are ignored). ClearWords(Integer, TArray&lt;UInt32&gt;) Sets bits starting from <code>ABitIndex</code> specified by <code>AWordData</code> to False (zeros in AWordData are ignored). Compare Compares this bit array with <code>AOther</code> and returns either <code>-1</code>, <code>0</code>, or <code>1</code>. Equals Returns whether this bit array and <code>AOther</code> are bitwise equal. FillRange Fills bits in <code>[AStartBit, AEndBit)</code> range to True. FillWords(Integer, PUInt32, UInt32) Fills bits starting from <code>ABitIndex</code> specified by <code>AWordData</code> and <code>AWordCount</code> to True (zeros in AWordData are ignored). FillWords(Integer, TArray&lt;UInt32&gt;) Fills bits starting from <code>ABitIndex</code> specified by <code>AWordData</code> to True (zeros in AWordData are ignored). HasBit Returns a bit-value at the given <code>ABitIndex</code>. HasBitsInRange Returns whether the bit-set has at least on bit in the given <code>[AStartBit, AEndbit)</code> range. Intersects Returns whether this bit array intersects with <code>AOther</code>. ReplaceBit Replaces a bit in the bit array at the given <code>ABitIndex</code> to match <code>ABitValue</code>. ReplaceOp Makes the bit array mutable with the intention to replace all bits of it. ReplaceWord Replaces bits starting from <code>ABitIndex</code> to match the bits specified by <code>AWordValue</code>. ReplaceWords(Integer, PUInt32, UInt32) Replaces bits starting from <code>ABitIndex</code> to match the bits specified by <code>AWordData</code> and <code>AWordCount</code>. ReplaceWords(Integer, TArray&lt;UInt32&gt;) Replaces bits starting from <code>ABitIndex</code> to match the bits specified by <code>AWordData</code>. Reserve Reserves <code>ANumBits</code> in the bit array (capacity would match <code>ANumBits</code>) without changing its size. Reset Clears the content of the bit array and releases its data. Resize Resizes the bit array so its size matches <code>ANumBits</code>. SetBit Sets a bit to True at the given <code>ABitIndex</code>. Shrink Shrinks the capacity of the bit array to match the actual content with the intention to save memory. Subsumes Returns whether this bit array subsumes <code>AOther</code>. Swap Swaps the content of this bit array with the <code>AOther</code> bit array."},{"location":"Reference/Blend2D/classes/TBLBitArray/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLBitArray/#Bits","title":"Bits","text":"<p>The bits in the bit array. </p> <p><code>property Bits[const AIndex: Integer]: Boolean read GetBit write SetBit; default</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Capacity","title":"Capacity","text":"<p>The capacity of the bit array in bits. </p> <p><code>property Capacity: Integer read GetCapacity</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Cardinality","title":"Cardinality","text":"<p>The number of bits set in the bit array. </p> <p><code>property Cardinality: Integer read GetCardinality</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Data","title":"Data","text":"<p>The bit data. </p> <p><code>property Data: PUInt32 read GetData</code></p> <p>Type: <code>PUInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#IsEmpty","title":"IsEmpty","text":"<p>Whether the bit array is empty (has no content). </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Size","title":"Size","text":"<p>The size of the bit array in bits. </p> <p><code>property Size: Integer read GetSize</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#WordCount","title":"WordCount","text":"<p>The number of bit words this bit array uses. </p> <p><code>property WordCount: Integer read GetWordCount</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLBitArray/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor.</p> <p>Performs weak copy of the data held by the <code>ASrc</code> bit array. </p> <p><code>constructor Assign(var ADest: TBLBitArray; const ASrc: TBLBitArray); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLBitArray</code></p> <p><code>ASrc</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the bit array. </p> <p><code>destructor Finalize(var ADest: TBLBitArray)</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates an empty bit array. </p> <p><code>constructor Initialize(out ADest: TBLBitArray)</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLBitArray/#Equal_0","title":"Equal(TBLBitArray, TBLBitArray)","text":"<p>Returns True if two bit arrays are equal (have the same contents). </p> <p><code>class operator Equal(const ALeft, ARight: TBLBitArray): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBitArray</code></p> <p><code>ARight</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Equal_1","title":"Equal(TBLBitArray, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty bit array). </p> <p><code>class operator Equal(const ALeft: TBLBitArray; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBitArray</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#GreaterThan","title":"GreaterThan(TBLBitArray, TBLBitArray)","text":"<p><code>class operator GreaterThan(const ALeft, ARight: TBLBitArray): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBitArray</code></p> <p><code>ARight</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#GreaterThanOrEqual","title":"GreaterThanOrEqual(TBLBitArray, TBLBitArray)","text":"<p><code>class operator GreaterThanOrEqual(const ALeft, ARight: TBLBitArray): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBitArray</code></p> <p><code>ARight</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#LessThan","title":"LessThan(TBLBitArray, TBLBitArray)","text":"<p><code>class operator LessThan(const ALeft, ARight: TBLBitArray): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_7","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBitArray</code></p> <p><code>ARight</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#LessThanOrEqual","title":"LessThanOrEqual(TBLBitArray, TBLBitArray)","text":"<p><code>class operator LessThanOrEqual(const ALeft, ARight: TBLBitArray): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_8","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBitArray</code></p> <p><code>ARight</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_5","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#NotEqual_0","title":"NotEqual(TBLBitArray, TBLBitArray)","text":"<p>Returns True if two bit arrays are not equal (do not have the same contents). </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLBitArray): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_9","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBitArray</code></p> <p><code>ARight</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_6","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#NotEqual_1","title":"NotEqual(TBLBitArray, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty bit array). </p> <p><code>class operator NotEqual(const ALeft: TBLBitArray; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_10","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBitArray</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_7","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLBitArray/#AppendBit","title":"AppendBit(Boolean)","text":"<p>Appends a bit <code>ABitValue</code> to the bit array. </p> <p><code>procedure AppendBit(const ABitValue: Boolean); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_11","title":"Parameters","text":"<p><code>ABitValue</code>: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#AppendWord","title":"AppendWord(UInt32)","text":"<p>Appends a single word <code>AWordValue</code> to the bit array. </p> <p><code>procedure AppendWord(const AWordValue: UInt32); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_12","title":"Parameters","text":"<p><code>AWordValue</code>: <code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#AppendWords_0","title":"AppendWords(PUInt32, Integer)","text":"<p>Appends whole words to the bit array. </p> <p><code>procedure AppendWords(const AWordData: PUInt32; const AWordCount: Integer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_13","title":"Parameters","text":"<p><code>AWordData</code>: <code>PUInt32</code></p> <p><code>AWordCount</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#AppendWords_1","title":"AppendWords(TArray&lt;UInt32&gt;)","text":"<p>Appends whole words to the bit array. </p> <p><code>procedure AppendWords(const AWordData: TArray&lt;UInt32&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_14","title":"Parameters","text":"<p><code>AWordData</code>: <code>TArray&lt;UInt32&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#AssignWords_0","title":"AssignWords(PUInt32, Integer)","text":"<p>Replaces the content of the bit array by bits specified by <code>AWordData</code> of size <code>AWordCount</code> [the size is in UInt32 units]. </p> <p><code>procedure AssignWords(const AWordData: PUInt32; const AWordCount: Integer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_15","title":"Parameters","text":"<p><code>AWordData</code>: <code>PUInt32</code></p> <p><code>AWordCount</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#AssignWords_1","title":"AssignWords(TArray&lt;UInt32&gt;)","text":"<p>Replaces the content of the bit array by bits specified by <code>AWordData</code>. </p> <p><code>procedure AssignWords(const AWordData: TArray&lt;UInt32&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_16","title":"Parameters","text":"<p><code>AWordData</code>: <code>TArray&lt;UInt32&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#CardinalityInRange","title":"CardinalityInRange(Integer, Integer)","text":"<p>Returns the number of bits set in the given <code>[AStartBit, AEndBit)</code> range. </p> <p><code>function CardinalityInRange(const AStartBit, AEndBit: Integer): Integer; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_17","title":"Parameters","text":"<p><code>AStartBit</code>: <code>Integer</code></p> <p><code>AEndBit</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_8","title":"Returns","text":"<p><code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Clear","title":"Clear","text":"<p>Clears the content of the bit array without releasing its dynamically allocated data, if possible. </p> <p><code>procedure Clear; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_10","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#ClearBit","title":"ClearBit(Integer)","text":"<p>Sets a bit to False at the given <code>ABitIndex</code>. </p> <p><code>procedure ClearBit(const ABitIndex: Integer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_11","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_18","title":"Parameters","text":"<p><code>ABitIndex</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#ClearRange","title":"ClearRange(Integer, Integer)","text":"<p>Sets bits in <code>[AStartBit, EndBit)</code> range to False. </p> <p><code>procedure ClearRange(const AStartBit, AEndBit: Integer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_12","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_19","title":"Parameters","text":"<p><code>AStartBit</code>: <code>Integer</code></p> <p><code>AEndBit</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#ClearWord","title":"ClearWord(Integer, UInt32)","text":"<p>Sets bits starting from <code>ABitIndex</code> specified by <code>AWordValue</code> to False (zeros in ASordValue are ignored). </p> <p><code>procedure ClearWord(const ABitIndex: Integer; const AWordValue: UInt32); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_13","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_20","title":"Parameters","text":"<p><code>ABitIndex</code>: <code>Integer</code></p> <p><code>AWordValue</code>: <code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#remarks","title":"Remarks","text":"<p>This operation uses an <code>AND_NOT</code> operator - bits in <code>AWordData</code> are negated and then combined with AND operator with existing bits in bit array. </p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#ClearWords_0","title":"ClearWords(Integer, PUInt32, UInt32)","text":"<p>Sets bits starting from <code>ABitIndex</code> specified by <code>AWordData</code> and <code>AWordCount</code> to False (zeros in AWordData are ignored). </p> <p><code>procedure ClearWords(const ABitIndex: Integer; const AWordData: PUInt32; const AWordCount: UInt32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_14","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_21","title":"Parameters","text":"<p><code>ABitIndex</code>: <code>Integer</code></p> <p><code>AWordData</code>: <code>PUInt32</code></p> <p><code>AWordCount</code>: <code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#remarks_1","title":"Remarks","text":"<p>This operation uses an <code>AND_NOT</code> operator - bits in <code>AWordData</code> are negated and then combined with AND operator with existing bits in bit array. </p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#ClearWords_1","title":"ClearWords(Integer, TArray&lt;UInt32&gt;)","text":"<p>Sets bits starting from <code>ABitIndex</code> specified by <code>AWordData</code> to False (zeros in AWordData are ignored). </p> <p><code>procedure ClearWords(const ABitIndex: Integer; const AWordData: TArray&lt;UInt32&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_15","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_22","title":"Parameters","text":"<p><code>ABitIndex</code>: <code>Integer</code></p> <p><code>AWordData</code>: <code>TArray&lt;UInt32&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#remarks_2","title":"Remarks","text":"<p>This operation uses an <code>AND_NOT</code> operator - bits in <code>AWordData</code> are negated and then combined with AND operator with existing bits in bit array. </p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Compare","title":"Compare(TBLBitArray)","text":"<p>Compares this bit array with <code>AOther</code> and returns either <code>-1</code>, <code>0</code>, or <code>1</code>. </p> <p><code>function Compare(const AOther: TBLBitArray): Integer; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_23","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_9","title":"Returns","text":"<p><code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Equals","title":"Equals(TBLBitArray)","text":"<p>Returns whether this bit array and <code>AOther</code> are bitwise equal. </p> <p><code>function Equals(const AOther: TBLBitArray): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_24","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_10","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#FillRange","title":"FillRange(Integer, Integer)","text":"<p>Fills bits in <code>[AStartBit, AEndBit)</code> range to True. </p> <p><code>procedure FillRange(const AStartBit, AEndBit: Integer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_16","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_25","title":"Parameters","text":"<p><code>AStartBit</code>: <code>Integer</code></p> <p><code>AEndBit</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#FillWords_0","title":"FillWords(Integer, PUInt32, UInt32)","text":"<p>Fills bits starting from <code>ABitIndex</code> specified by <code>AWordData</code> and <code>AWordCount</code> to True (zeros in AWordData are ignored). </p> <p><code>procedure FillWords(const ABitIndex: Integer; const AWordData: PUInt32; const AWordCount: UInt32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_17","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_26","title":"Parameters","text":"<p><code>ABitIndex</code>: <code>Integer</code></p> <p><code>AWordData</code>: <code>PUInt32</code></p> <p><code>AWordCount</code>: <code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#remarks_3","title":"Remarks","text":"<p>This operation uses an <code>OR</code> operator - bits in <code>AWordData</code> are combined with OR operator with existing bits in bit array. </p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#FillWords_1","title":"FillWords(Integer, TArray&lt;UInt32&gt;)","text":"<p>Fills bits starting from <code>ABitIndex</code> specified by <code>AWordData</code> to True (zeros in AWordData are ignored). </p> <p><code>procedure FillWords(const ABitIndex: Integer; const AWordData: TArray&lt;UInt32&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_18","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_27","title":"Parameters","text":"<p><code>ABitIndex</code>: <code>Integer</code></p> <p><code>AWordData</code>: <code>TArray&lt;UInt32&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#remarks_4","title":"Remarks","text":"<p>This operation uses an <code>OR</code> operator - bits in <code>AWordData</code> are combined with OR operator with existing bits in bit array. </p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#HasBit","title":"HasBit(Integer)","text":"<p>Returns a bit-value at the given <code>ABitIndex</code>. </p> <p><code>function HasBit(const ABitIndex: Integer): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_28","title":"Parameters","text":"<p><code>ABitIndex</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_11","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#HasBitsInRange","title":"HasBitsInRange(Integer, Integer)","text":"<p>Returns whether the bit-set has at least on bit in the given <code>[AStartBit, AEndbit)</code> range. </p> <p><code>function HasBitsInRange(const AStartBit, AEndBit: Integer): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_29","title":"Parameters","text":"<p><code>AStartBit</code>: <code>Integer</code></p> <p><code>AEndBit</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_12","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Intersects","title":"Intersects(TBLBitArray)","text":"<p>Returns whether this bit array intersects with <code>AOther</code>. </p> <p><code>function Intersects(const AOther: TBLBitArray): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_30","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_13","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#ReplaceBit","title":"ReplaceBit(Integer, Boolean)","text":"<p>Replaces a bit in the bit array at the given <code>ABitIndex</code> to match <code>ABitValue</code>. </p> <p><code>procedure ReplaceBit(const ABitIndex: Integer; const ABitValue: Boolean); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_19","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_31","title":"Parameters","text":"<p><code>ABitIndex</code>: <code>Integer</code></p> <p><code>ABitValue</code>: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#ReplaceOp","title":"ReplaceOp(Integer)","text":"<p>Makes the bit array mutable with the intention to replace all bits of it. </p> <p><code>function ReplaceOp(const ANumBits: Integer): PUInt32; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_20","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_32","title":"Parameters","text":"<p><code>ANumBits</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_14","title":"Returns","text":"<p><code>PUInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#remarks_5","title":"Remarks","text":"<p>All bits in the bit array will be set to zero. </p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#ReplaceWord","title":"ReplaceWord(Integer, UInt32)","text":"<p>Replaces bits starting from <code>ABitIndex</code> to match the bits specified by <code>AWordValue</code>. </p> <p><code>procedure ReplaceWord(const ABitIndex: Integer; const AWordValue: UInt32); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_21","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_33","title":"Parameters","text":"<p><code>ABitIndex</code>: <code>Integer</code></p> <p><code>AWordValue</code>: <code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#remarks_6","title":"Remarks","text":"<p>Replaced bits from bit array are not combined by using any operator, <code>AWordValue</code> is copied as is, thus replaces fully the existing bits. </p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#ReplaceWords_0","title":"ReplaceWords(Integer, PUInt32, UInt32)","text":"<p>Replaces bits starting from <code>ABitIndex</code> to match the bits specified by <code>AWordData</code> and <code>AWordCount</code>. </p> <p><code>procedure ReplaceWords(const ABitIndex: Integer; const AWordData: PUInt32; const AWordCount: UInt32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_22","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_34","title":"Parameters","text":"<p><code>ABitIndex</code>: <code>Integer</code></p> <p><code>AWordData</code>: <code>PUInt32</code></p> <p><code>AWordCount</code>: <code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#remarks_7","title":"Remarks","text":"<p>Replaced bits from bit array are not combined by using any operator, <code>AWordData</code> is copied as is, thus replaces fully the existing bits. </p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#ReplaceWords_1","title":"ReplaceWords(Integer, TArray&lt;UInt32&gt;)","text":"<p>Replaces bits starting from <code>ABitIndex</code> to match the bits specified by <code>AWordData</code>. </p> <p><code>procedure ReplaceWords(const ABitIndex: Integer; const AWordData: TArray&lt;UInt32&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_23","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_35","title":"Parameters","text":"<p><code>ABitIndex</code>: <code>Integer</code></p> <p><code>AWordData</code>: <code>TArray&lt;UInt32&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#remarks_8","title":"Remarks","text":"<p>Replaced bits from bit array are not combined by using any operator, <code>AWordData</code> is copied as is, thus replaces fully the existing bits. </p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Reserve","title":"Reserve(Integer)","text":"<p>Reserves <code>ANumBits</code> in the bit array (capacity would match <code>ANumBits</code>) without changing its size. </p> <p><code>procedure Reserve(const ANumBits: Integer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_24","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_36","title":"Parameters","text":"<p><code>ANumBits</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Reset","title":"Reset","text":"<p>Clears the content of the bit array and releases its data.</p> <p>After reset the bit array content matches a default constructed instance. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_25","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Resize","title":"Resize(Integer)","text":"<p>Resizes the bit array so its size matches <code>ANumBits</code>. </p> <p><code>procedure Resize(const ANumBits: Integer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_26","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_37","title":"Parameters","text":"<p><code>ANumBits</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#SetBit","title":"SetBit(Integer)","text":"<p>Sets a bit to True at the given <code>ABitIndex</code>. </p> <p><code>procedure SetBit(const ABitIndex: Integer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_27","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_38","title":"Parameters","text":"<p><code>ABitIndex</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Shrink","title":"Shrink","text":"<p>Shrinks the capacity of the bit array to match the actual content with the intention to save memory. </p> <p><code>procedure Shrink; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#exceptions_28","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Subsumes","title":"Subsumes(TBLBitArray)","text":"<p>Returns whether this bit array subsumes <code>AOther</code>. </p> <p><code>function Subsumes(const AOther: TBLBitArray): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_39","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#returns_15","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#Swap","title":"Swap(TBLBitArray)","text":"<p>Swaps the content of this bit array with the <code>AOther</code> bit array. </p> <p><code>procedure Swap(var AOther: TBLBitArray); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBitArray/#parameters_40","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/","title":"TBLBox","text":"<p>Box specified as [X0, Y0, X1, Y1] using <code>Double</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLBox/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLBox = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLBox/#fields","title":"Fields","text":"Name Description X0 X1 Y0 Y1"},{"location":"Reference/Blend2D/classes/TBLBox/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLBox/#operators","title":"Operators","text":"Name Description Add(TBLPoint, TBLBox) Add(TBLBox, TBLPoint) Add(Double, TBLBox) Add(TBLBox, Double) Divide(TBLPoint, TBLBox) Divide(TBLBox, TBLPoint) Divide(Double, TBLBox) Divide(TBLBox, Double) Equal Multiply(TBLPoint, TBLBox) Multiply(TBLBox, TBLPoint) Multiply(Double, TBLBox) Multiply(TBLBox, Double) NotEqual Subtract(TBLPoint, TBLBox) Subtract(TBLBox, TBLPoint) Subtract(Double, TBLBox) Subtract(TBLBox, Double)"},{"location":"Reference/Blend2D/classes/TBLBox/#methods","title":"Methods","text":"Name Description Contains(TBLPoint) Contains(Double, Double) Equals Reset(TBLBox) Reset(Double, Double, Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLBox/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLBox/#X0","title":"X0","text":"<p><code>var X0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#X1","title":"X1","text":"<p><code>var X1: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Y0","title":"Y0","text":"<p><code>var Y0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Y1","title":"Y1","text":"<p><code>var Y1: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLBox/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX0, AY0, AX1, AY1: Double)</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLBox/#Add_0","title":"Add(TBLPoint, TBLBox)","text":"<p><code>class operator Add(const ALeft: TBLPoint; const ARight: TBLBox): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Add_1","title":"Add(TBLBox, TBLPoint)","text":"<p><code>class operator Add(const ALeft: TBLBox; const ARight: TBLPoint): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBox</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_1","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Add_2","title":"Add(Double, TBLBox)","text":"<p><code>class operator Add(const ALeft: Double; const ARight: TBLBox): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>Double</code></p> <p><code>ARight</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_2","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Add_3","title":"Add(TBLBox, Double)","text":"<p><code>class operator Add(const ALeft: TBLBox; const ARight: Double): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBox</code></p> <p><code>ARight</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_3","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Divide_0","title":"Divide(TBLPoint, TBLBox)","text":"<p><code>class operator Divide(const ALeft: TBLPoint; const ARight: TBLBox): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_4","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Divide_1","title":"Divide(TBLBox, TBLPoint)","text":"<p><code>class operator Divide(const ALeft: TBLBox; const ARight: TBLPoint): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBox</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_5","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Divide_2","title":"Divide(Double, TBLBox)","text":"<p><code>class operator Divide(const ALeft: Double; const ARight: TBLBox): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_7","title":"Parameters","text":"<p><code>ALeft</code>: <code>Double</code></p> <p><code>ARight</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_6","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Divide_3","title":"Divide(TBLBox, Double)","text":"<p><code>class operator Divide(const ALeft: TBLBox; const ARight: Double): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_8","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBox</code></p> <p><code>ARight</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_7","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Equal","title":"Equal(TBLBox, TBLBox)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLBox): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_9","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBox</code></p> <p><code>ARight</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_8","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Multiply_0","title":"Multiply(TBLPoint, TBLBox)","text":"<p><code>class operator Multiply(const ALeft: TBLPoint; const ARight: TBLBox): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_10","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_9","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Multiply_1","title":"Multiply(TBLBox, TBLPoint)","text":"<p><code>class operator Multiply(const ALeft: TBLBox; const ARight: TBLPoint): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_11","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBox</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_10","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Multiply_2","title":"Multiply(Double, TBLBox)","text":"<p><code>class operator Multiply(const ALeft: Double; const ARight: TBLBox): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_12","title":"Parameters","text":"<p><code>ALeft</code>: <code>Double</code></p> <p><code>ARight</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_11","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Multiply_3","title":"Multiply(TBLBox, Double)","text":"<p><code>class operator Multiply(const ALeft: TBLBox; const ARight: Double): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_13","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBox</code></p> <p><code>ARight</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_12","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#NotEqual","title":"NotEqual(TBLBox, TBLBox)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLBox): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_14","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBox</code></p> <p><code>ARight</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_13","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Subtract_0","title":"Subtract(TBLPoint, TBLBox)","text":"<p><code>class operator Subtract(const ALeft: TBLPoint; const ARight: TBLBox): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_15","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_14","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Subtract_1","title":"Subtract(TBLBox, TBLPoint)","text":"<p><code>class operator Subtract(const ALeft: TBLBox; const ARight: TBLPoint): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_16","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBox</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_15","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Subtract_2","title":"Subtract(Double, TBLBox)","text":"<p><code>class operator Subtract(const ALeft: Double; const ARight: TBLBox): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_17","title":"Parameters","text":"<p><code>ALeft</code>: <code>Double</code></p> <p><code>ARight</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_16","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Subtract_3","title":"Subtract(TBLBox, Double)","text":"<p><code>class operator Subtract(const ALeft: TBLBox; const ARight: Double): TBLBox; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_18","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBox</code></p> <p><code>ARight</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_17","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLBox/#Contains_0","title":"Contains(TBLPoint)","text":"<p><code>function Contains(const APoint: TBLPoint): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_19","title":"Parameters","text":"<p><code>APoint</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_18","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Contains_1","title":"Contains(Double, Double)","text":"<p><code>function Contains(const AX, AY: Double): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_20","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_19","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Equals","title":"Equals(TBLBox)","text":"<p><code>function Equals(const AOther: TBLBox): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_21","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#returns_20","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Reset_0","title":"Reset(TBLBox)","text":"<p><code>procedure Reset(const AOther: TBLBox); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_22","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Reset_1","title":"Reset(Double, Double, Double, Double)","text":"<p><code>procedure Reset(const AX0, AY0, AX1, AY1: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#parameters_23","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLBox/#Reset_2","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/","title":"TBLBoxI","text":"<p>Box specified as [X0, Y0, X1, Y1] using <code>Integer</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLBoxI = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#fields","title":"Fields","text":"Name Description X0 X1 Y0 Y1"},{"location":"Reference/Blend2D/classes/TBLBoxI/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLBoxI/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLBoxI/#methods","title":"Methods","text":"Name Description Contains(TBLPointI) Contains(Integer, Integer) Equals Reset(TBLBoxI) Reset(Integer, Integer, Integer, Integer) Reset"},{"location":"Reference/Blend2D/classes/TBLBoxI/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLBoxI/#X0","title":"X0","text":"<p><code>var X0: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#X1","title":"X1","text":"<p><code>var X1: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#Y0","title":"Y0","text":"<p><code>var Y0: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#Y1","title":"Y1","text":"<p><code>var Y1: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLBoxI/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX0, AY0, AX1, AY1: Integer)</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Integer</code></p> <p><code>AY0</code>: <code>Integer</code></p> <p><code>AX1</code>: <code>Integer</code></p> <p><code>AY1</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLBoxI/#Equal","title":"Equal(TBLBoxI, TBLBoxI)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLBoxI): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBoxI</code></p> <p><code>ARight</code>: <code>TBLBoxI</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#NotEqual","title":"NotEqual(TBLBoxI, TBLBoxI)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLBoxI): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLBoxI</code></p> <p><code>ARight</code>: <code>TBLBoxI</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLBoxI/#Contains_0","title":"Contains(TBLPointI)","text":"<p><code>function Contains(const APoint: TBLPointI): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#parameters_3","title":"Parameters","text":"<p><code>APoint</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#Contains_1","title":"Contains(Integer, Integer)","text":"<p><code>function Contains(const AX, AY: Integer): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#parameters_4","title":"Parameters","text":"<p><code>AX</code>: <code>Integer</code></p> <p><code>AY</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#Equals","title":"Equals(TBLBoxI)","text":"<p><code>function Equals(const AOther: TBLBoxI): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#parameters_5","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLBoxI</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#Reset_0","title":"Reset(TBLBoxI)","text":"<p><code>procedure Reset(const AOther: TBLBoxI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#parameters_6","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLBoxI</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#Reset_1","title":"Reset(Integer, Integer, Integer, Integer)","text":"<p><code>procedure Reset(const AX0, AY0, AX1, AY1: Integer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#parameters_7","title":"Parameters","text":"<p><code>AX0</code>: <code>Integer</code></p> <p><code>AY0</code>: <code>Integer</code></p> <p><code>AX1</code>: <code>Integer</code></p> <p><code>AY1</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLBoxI/#Reset_2","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/","title":"TBLCircle","text":"<p>Circle specified as [CX, CY, R] using <code>Double</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLCircle = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLCircle/#fields","title":"Fields","text":"Name Description CX CY R"},{"location":"Reference/Blend2D/classes/TBLCircle/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLCircle/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLCircle/#methods","title":"Methods","text":"Name Description Equals Reset(TBLCircle) Reset(Double, Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLCircle/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLCircle/#CX","title":"CX","text":"<p><code>var CX: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#CY","title":"CY","text":"<p><code>var CY: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#R","title":"R","text":"<p><code>var R: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLCircle/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const ACX, ACY, AR: Double)</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#parameters","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLCircle/#Equal","title":"Equal(TBLCircle, TBLCircle)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLCircle): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLCircle</code></p> <p><code>ARight</code>: <code>TBLCircle</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#NotEqual","title":"NotEqual(TBLCircle, TBLCircle)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLCircle): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLCircle</code></p> <p><code>ARight</code>: <code>TBLCircle</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLCircle/#Equals","title":"Equals(TBLCircle)","text":"<p><code>function Equals(const AOther: TBLCircle): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#parameters_3","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLCircle</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#Reset_0","title":"Reset(TBLCircle)","text":"<p><code>procedure Reset(const AOther: TBLCircle); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#parameters_4","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLCircle</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#Reset_1","title":"Reset(Double, Double, Double)","text":"<p><code>procedure Reset(const ACX, ACY, AR: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#parameters_5","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLCircle/#Reset_2","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/","title":"TBLConicGradientValues","text":"<p>Conic gradient values packed into a structure. </p>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLConicGradientValues = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#fields","title":"Fields","text":"Name Description Angle Repetition X0 Y0"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#methods","title":"Methods","text":"Name Description Create Reset(Double, Double, Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#Angle","title":"Angle","text":"<p><code>var Angle: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#Repetition","title":"Repetition","text":"<p><code>var Repetition: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#X0","title":"X0","text":"<p><code>var X0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#Y0","title":"Y0","text":"<p><code>var Y0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX0, AY0, AAngle: Double; const ARepeat: Double = 1); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AAngle</code>: <code>Double</code></p> <p><code>ARepeat</code>: <code>Double = 1</code></p>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#Create","title":"Create","text":"<p><code>class function Create: TBLConicGradientValues; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#returns","title":"Returns","text":"<p><code>TBLConicGradientValues</code></p>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#Reset_0","title":"Reset(Double, Double, Double, Double)","text":"<p><code>procedure Reset(const AX0, AY0, AAngle: Double; const ARepeat: Double = 1); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#parameters_1","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AAngle</code>: <code>Double</code></p> <p><code>ARepeat</code>: <code>Double = 1</code></p>"},{"location":"Reference/Blend2D/classes/TBLConicGradientValues/#Reset_1","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/","title":"TBLContext","text":"<p>Rendering context. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContext = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLContext/#properties","title":"Properties","text":"Name Description AccumulatedErrorFlags Accumulated errors as flags. ApproximationOptions Approximation options. CompOp Composition operator. ContextType Returns the type of this context, see \\ref BLContextType. FillAlpha Fill alpha value. FillRule Returns fill rule. FillStyle Fill style. FillStyleType The current fill style type. FinalTransform Final transformation matrix. FlattenMode Flatten mode (how curves are flattened). FlattenTolerance Tolerance used for curve flattening. GlobalAlpha The global alpha value. GradientQuality The gradient quality hint. Hints Rendering context hints. IsValid Tests whether the context is a valid rendering context that has attached target to it. MetaTransform Meta transformation matrix. PatternQuality The pattern quality hint. RenderingQuality The rendering quality hint. SavedStateCount The number of saved states in the context (0 means no saved states). StrokeAlpha Stroke alpha value. StrokeDashArray Stroke dash-array. StrokeDashOffset Returns stroke dash-offset. StrokeEndCap Stroke end-cap. StrokeJoin Stroke join. StrokeMiterLimit Stroke miter-limit. StrokeOptions Stroke options. StrokeStartCap Stroke start-cap. StrokeStyle Stroke style. StrokeStyleType Returns the current stroke style type. StrokeTransformOrder Stroke transform order. StrokeWidth Stroke width. Style The styles associated with the given style <code>ASlot</code>. StyleAlpha Fill or stroke alpha value associated with the given style <code>ASlot</code>. StyleType The current style type associated with the given style <code>ASlot</code>. TargetHeight The target height in abstract units (pixels in case of <code>TBLImage</code>). TargetImage Returns the target image or nil if there is no target image. TargetSize The target size in abstract units (pixels in case of <code>TBLImage</code>). TargetWidth The target width in abstract units (pixels in case of <code>TBLImage</code>). ThreadCount The number of threads that the rendering context uses. TransformedFillStyle Transformed fill style. TransformedStrokeStyle Transformed stroke style. TransformedStyle The styles associated with the given style <code>ASlot</code>. UserTransform User transformation matrix."},{"location":"Reference/Blend2D/classes/TBLContext/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor. Create(TBLImage, TBLContextCreateInfo) Creates a new rendering context for rendering to the image <code>ATarget</code>. Create(TBLImage) Creates a new rendering context for rendering to the image <code>ATarget</code>. Finalize Destroys the rendering context. Initialize Creates a default constructed rendering context."},{"location":"Reference/Blend2D/classes/TBLContext/#operators","title":"Operators","text":"Name Description Equal(TBLContext, TBLContext) Returns True if two contexts are equal. Equal(TBLContext, Pointer) Used to compare against <code>nil</code> (null or invalid context). NotEqual(TBLContext, TBLContext) Returns True if two font contexts are not equal. NotEqual(TBLContext, Pointer) Used to compare against <code>nil</code> (null or invalid context)."},{"location":"Reference/Blend2D/classes/TBLContext/#methods","title":"Methods","text":"Name Description ApplyTransform Transforms the user transformation matrix by <code>ATransform</code>. BlitImage(TBLRect, TBLImage, TBLRect) Blits an area of source image <code>ASrc</code> specified by <code>ASrcArea</code> scaled to fit into <code>ARect</code> rectangle (floating point coordinates). BlitImage(TBLRect, TBLImage) Blits a source image <code>ASrc</code> scaled to fit into <code>ARect</code> rectangle (floating point coordinates). BlitImage(TBLRectI, TBLImage, TBLRectI) Blits an area of source image <code>ASrc</code> specified by <code>ASrcArea</code> scaled to fit into <code>ARect</code> rectangle (integer coordinates). BlitImage(TBLRectI, TBLImage) Blits a source image <code>ASrc</code> scaled to fit into <code>ARect</code> rectangle (integer coordinates). BlitImage(TBLPoint, TBLImage, TBLRect) Blits an area in source image <code>ASrc</code> specified by <code>ASrcArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates). BlitImage(TBLPoint, TBLImage) Blits source image <code>ASrc</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates). BlitImage(TBLPointI, TBLImage, TBLRectI) Blits an area in source image <code>ASrc</code> specified by <code>ASrcArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates). BlitImage(TBLPointI, TBLImage) Blits source image <code>ASrc</code> at coordinates specified by <code>AOrigin</code> (integer coordinates). ClearAll Clear everything to a transparent black, which is the same operation as temporarily setting the composition operator to TBLCompOp.Clear and then filling everything by <code>FillAll</code>. ClearRect(Double, Double, Double, Double) Clears a rectangle <code>[AX, AY, AW, AH]</code> (floating-point coordinates) to a transparent black, which is the same operation as temporarily setting the composition operator to 'TBLCompOp.Clear<code>and then calling</code>FillRect(AX, AY, AW, AH)`. ClearRect(TBLRect) Clears a rectangle <code>ARect</code> (floating-point coordinates) to a transparent black, which is the same operation as temporarily setting the composition operator to <code>TBLCompOp.Clear</code> and then calling <code>FillRect(ARect)</code>. ClearRect(TBLRectI) Clears a rectangle <code>ARect</code> (integer coordinates) to a transparent black, which is the same operation as temporarily setting the composition operator to <code>TBLCompOp.Clear</code> and then calling <code>FillRect(ARect)</code>. ClipToRect(Double, Double, Double, Double) ClipToRect(TBLRect) ClipToRect(TBLRectI) DisableFillStyle Sets fill style to Null, which disables it. DisableStrokeStyle Sets stroke style to Null, which disables it. DisableStyle Sets the given style <code>ASlot</code> to Null, which disables it. Equals Returns whether this and <code>AOther</code> point to the same rendering context. FillAll(TBLVar) Fills everything non-clipped with an explicit fill <code>AStyle</code>. FillAll(TBLGradient) Fills everything non-clipped with an explicit fill <code>AStyle</code>. FillAll(TBLPattern) Fills everything non-clipped with an explicit fill <code>AStyle</code>. FillAll(TAlphaColor) Fills everything non-clipped with an explicit fill <code>AStyle</code>. FillAll(TBLRgba64) Fills everything non-clipped with an explicit fill <code>AStyle</code>. FillAll(TBLRgba32) Fills everything non-clipped with an explicit fill <code>AStyle</code>. FillAll(TBLRgba) Fills everything non-clipped with an explicit fill <code>AStyle</code>. FillAll Fills everything non-clipped with the current fill style. FillBox(Double, Double, Double, Double, TBLVar) Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> FillBox(Double, Double, Double, Double, TBLGradient) Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> FillBox(Double, Double, Double, Double, TBLPattern) Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> FillBox(Double, Double, Double, Double, TAlphaColor) Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> FillBox(Double, Double, Double, Double, TBLRgba64) Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> FillBox(Double, Double, Double, Double, TBLRgba32) Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> FillBox(Double, Double, Double, Double, TBLRgba) Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> FillBox(Double, Double, Double, Double) Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with the current fill style. FillBox(TBLBoxI, TBLVar) Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBoxI, TBLGradient) Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBoxI, TBLPattern) Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBoxI, TAlphaColor) Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBoxI, TBLRgba64) Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBoxI, TBLRgba32) Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBoxI, TBLRgba) Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBoxI) Fills a <code>ABox</code> (integer coordinates) with the current fill style. FillBox(TBLBox, TBLVar) Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBox, TBLGradient) Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBox, TBLPattern) Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBox, TAlphaColor) Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBox, TBLRgba64) Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBox, TBLRgba32) Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBox, TBLRgba) Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillBox(TBLBox) Fills a <code>ABox</code> (floating point coordinates) with the current fill style. FillBoxArray(PBLBoxI, NativeInt, TBLVar) Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBoxI, NativeInt, TBLGradient) Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBoxI, NativeInt, TBLPattern) Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBoxI, NativeInt, TAlphaColor) Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBoxI, NativeInt, TBLRgba64) Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBoxI, NativeInt, TBLRgba32) Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBoxI, NativeInt, TBLRgba) Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBoxI, NativeInt) Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with the default fill style. FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLVar) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLGradient) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLPattern) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TAlphaColor) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLRgba64) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLRgba32) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLRgba) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;) Fills an <code>AArray</code> of boxes (integer coordinates) with the default fill style. FillBoxArray(TArray&lt;TBLBoxI&gt;, TBLVar) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBoxI&gt;, TBLGradient) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBoxI&gt;, TBLPattern) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBoxI&gt;, TAlphaColor) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBoxI&gt;, TBLRgba64) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBoxI&gt;, TBLRgba32) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBoxI&gt;, TBLRgba) Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBoxI&gt;) Fills an <code>AArray</code> of boxes (integer coordinates) with the default fill style. FillBoxArray(PBLBox, NativeInt, TBLVar) Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBox, NativeInt, TBLGradient) Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBox, NativeInt, TBLPattern) Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBox, NativeInt, TAlphaColor) Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBox, NativeInt, TBLRgba64) Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBox, NativeInt, TBLRgba32) Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBox, NativeInt, TBLRgba) Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(PBLBox, NativeInt) Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with the default fill style. FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLVar) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLGradient) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLPattern) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TAlphaColor) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLRgba64) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLRgba32) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLRgba) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TBLArrayView&lt;TBLBox&gt;) Fills an <code>AArray</code> of boxes (floating point coordinates) with the default fill style. FillBoxArray(TArray&lt;TBLBox&gt;, TBLVar) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBox&gt;, TBLGradient) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBox&gt;, TBLPattern) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBox&gt;, TAlphaColor) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBox&gt;, TBLRgba64) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBox&gt;, TBLRgba32) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBox&gt;, TBLRgba) Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. FillBoxArray(TArray&lt;TBLBox&gt;) Fills an <code>AArray</code> of boxes (floating point coordinates) with the default fill style. FillChord(Double, Double, Double, Double, Double, Double, TBLVar) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, Double, TBLGradient) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, Double, TBLPattern) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, Double, TAlphaColor) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, Double, TBLRgba64) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, Double, TBLRgba32) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, Double, TBLRgba) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, Double) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current fill style. FillChord(Double, Double, Double, Double, Double, TBLVar) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, TBLGradient) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, TBLPattern) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, TAlphaColor) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, TBLRgba64) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, TBLRgba32) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double, TBLRgba) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(Double, Double, Double, Double, Double) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current fill style. FillChord(TBLArc, TBLVar) Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(TBLArc, TBLGradient) Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(TBLArc, TBLPattern) Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(TBLArc, TAlphaColor) Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(TBLArc, TBLRgba64) Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(TBLArc, TBLRgba32) Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(TBLArc, TBLRgba) Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillChord(TBLArc) Fills an <code>AChord</code> (floating point coordinates) with the current fill style. FillCircle(Double, Double, Double, TBLVar) Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillCircle(Double, Double, Double, TBLGradient) Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillCircle(Double, Double, Double, TBLPattern) Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillCircle(Double, Double, Double, TAlphaColor) Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillCircle(Double, Double, Double, TBLRgba64) Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillCircle(Double, Double, Double, TBLRgba32) Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillCircle(Double, Double, Double, TBLRgba) Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillCircle(Double, Double, Double) Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with the current fill style. FillCircle(TBLCircle, TBLVar) Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillCircle(TBLCircle, TBLGradient) Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillCircle(TBLCircle, TBLPattern) Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillCircle(TBLCircle, TAlphaColor) Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillCircle(TBLCircle, TBLRgba64) Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillCircle(TBLCircle, TBLRgba32) Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillCircle(TBLCircle, TBLRgba) Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. FillCircle(TBLCircle) Fills an <code>ACircle</code> (floating point coordinates) with the current fill style. FillEllipse(Double, Double, Double, Double, TBLVar) Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(Double, Double, Double, Double, TBLGradient) Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(Double, Double, Double, Double, TBLPattern) Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(Double, Double, Double, Double, TAlphaColor) Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(Double, Double, Double, Double, TBLRgba64) Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(Double, Double, Double, Double, TBLRgba32) Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(Double, Double, Double, Double, TBLRgba) Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(Double, Double, Double, Double) Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with the current fill style. FillEllipse(TBLEllipse, TBLVar) Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(TBLEllipse, TBLGradient) Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(TBLEllipse, TBLPattern) Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(TBLEllipse, TAlphaColor) Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(TBLEllipse, TBLRgba64) Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(TBLEllipse, TBLRgba32) Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(TBLEllipse, TBLRgba) Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillEllipse(TBLEllipse) Fills an <code>AEllipse</code> (floating point coordinates) with the current fill style. FillGeometry(TBLGeometryType, Pointer, TBLVar) Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. FillGeometry(TBLGeometryType, Pointer, TBLGradient) Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. FillGeometry(TBLGeometryType, Pointer, TBLPattern) Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. FillGeometry(TBLGeometryType, Pointer, TAlphaColor) Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. FillGeometry(TBLGeometryType, Pointer, TBLRgba64) Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. FillGeometry(TBLGeometryType, Pointer, TBLRgba32) Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. FillGeometry(TBLGeometryType, Pointer, TBLRgba) Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. FillGeometry(TBLGeometryType, Pointer) Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with the default fill style. FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLVar) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLGradient) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLPattern) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TAlphaColor) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLRgba64) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLRgba32) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLRgba) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the current fill style. FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLVar) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLGradient) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLPattern) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TAlphaColor) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLRgba64) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLRgba32) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLRgba) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun) Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the current fill style. FillMask(TBLPoint, TBLImage, TBLImage, TBLVar) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TBLImage, TBLGradient) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TBLImage, TBLPattern) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TBLImage, TAlphaColor) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TBLImage, TBLRgba64) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TBLImage, TBLRgba32) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TBLImage, TBLRgba) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TBLImage) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with the current fill style. FillMask(TBLPoint, TBLImage, TBLVar) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TBLGradient) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TBLPattern) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TAlphaColor) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TBLRgba64) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TBLRgba32) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage, TBLRgba) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPoint, TBLImage) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with the current fill style. FillMask(TBLPointI, TBLImage, TBLImage, TBLVar) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TBLImage, TBLGradient) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TBLImage, TBLPattern) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TBLImage, TAlphaColor) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TBLImage, TBLRgba64) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TBLImage, TBLRgba32) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TBLImage, TBLRgba) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TBLImage) Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with the current fill style. FillMask(TBLPointI, TBLImage, TBLVar) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TBLGradient) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TBLPattern) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TAlphaColor) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TBLRgba64) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TBLRgba32) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage, TBLRgba) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillMask(TBLPointI, TBLImage) Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with the current fill style. FillPath(TBLPoint, TBLPath, TBLVar) Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPoint, TBLPath, TBLGradient) Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPoint, TBLPath, TBLPattern) Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPoint, TBLPath, TAlphaColor) Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPoint, TBLPath, TBLRgba64) Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPoint, TBLPath, TBLRgba32) Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPoint, TBLPath, TBLRgba) Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPoint, TBLPath) Fills the given <code>APath</code> translated by <code>AOrigin</code> with the default fill style. FillPath(TBLPath, TBLVar) Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPath, TBLGradient) Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPath, TBLPattern) Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPath, TAlphaColor) Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPath, TBLRgba64) Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPath, TBLRgba32) Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPath, TBLRgba) Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. FillPath(TBLPath) Fills the given <code>APath</code> with the default fill style. FillPie(Double, Double, Double, Double, Double, Double, TBLVar) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, Double, TBLGradient) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, Double, TBLPattern) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, Double, TAlphaColor) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, Double, TBLRgba64) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, Double, TBLRgba32) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, Double, TBLRgba) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, Double) Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current fill style. FillPie(Double, Double, Double, Double, Double, TBLVar) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, TBLGradient) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, TBLPattern) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, TAlphaColor) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, TBLRgba64) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, TBLRgba32) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double, TBLRgba) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(Double, Double, Double, Double, Double) Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current fill style. FillPie(TBLArc, TBLVar) Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(TBLArc, TBLGradient) Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(TBLArc, TBLPattern) Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(TBLArc, TAlphaColor) Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(TBLArc, TBLRgba64) Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(TBLArc, TBLRgba32) Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(TBLArc, TBLRgba) Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPie(TBLArc) Fills an <code>APie</code> (floating point coordinates) with the current fill style. FillPoly(PBLPointI, NativeInt, TBLVar) Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPointI, NativeInt, TBLGradient) Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPointI, NativeInt, TBLPattern) Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPointI, NativeInt, TAlphaColor) Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPointI, NativeInt, TBLRgba64) Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPointI, NativeInt, TBLRgba32) Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPointI, NativeInt, TBLRgba) Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPointI, NativeInt) Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with the current fill style. FillPoly(TBLArrayView&lt;TBLPointI&gt;, TBLVar) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPointI&gt;, TBLGradient) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPointI&gt;, TBLPattern) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPointI&gt;, TAlphaColor) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPointI&gt;, TBLRgba64) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPointI&gt;, TBLRgba32) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPointI&gt;, TBLRgba) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPointI&gt;) Fills a polygon <code>APoly</code> (integer coordinates) with the current fill style. FillPoly(TArray&lt;TBLPointI&gt;, TBLVar) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPointI&gt;, TBLGradient) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPointI&gt;, TBLPattern) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPointI&gt;, TAlphaColor) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPointI&gt;, TBLRgba64) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPointI&gt;, TBLRgba32) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPointI&gt;, TBLRgba) Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPointI&gt;) Fills a polygon <code>APoly</code> (integer coordinates) with the current fill style. FillPoly(PBLPoint, NativeInt, TBLVar) Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPoint, NativeInt, TBLGradient) Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPoint, NativeInt, TBLPattern) Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPoint, NativeInt, TAlphaColor) Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPoint, NativeInt, TBLRgba64) Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPoint, NativeInt, TBLRgba32) Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPoint, NativeInt, TBLRgba) Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(PBLPoint, NativeInt) Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with the current fill style. FillPoly(TBLArrayView&lt;TBLPoint&gt;, TBLVar) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPoint&gt;, TBLGradient) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPoint&gt;, TBLPattern) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPoint&gt;, TAlphaColor) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPoint&gt;, TBLRgba64) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPoint&gt;, TBLRgba32) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPoint&gt;, TBLRgba) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TBLArrayView&lt;TBLPoint&gt;) Fills a polygon <code>APoly</code> (floating point coordinates) with the current fill style. FillPoly(TArray&lt;TBLPoint&gt;, TBLVar) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPoint&gt;, TBLGradient) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPoint&gt;, TBLPattern) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPoint&gt;, TAlphaColor) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPoint&gt;, TBLRgba64) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPoint&gt;, TBLRgba32) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPoint&gt;, TBLRgba) Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillPoly(TArray&lt;TBLPoint&gt;) Fills a polygon <code>APoly</code> (floating point coordinates) with the current fill style. FillRect(Double, Double, Double, Double, TBLVar) Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(Double, Double, Double, Double, TBLGradient) Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(Double, Double, Double, Double, TBLPattern) Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(Double, Double, Double, Double, TAlphaColor) Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(Double, Double, Double, Double, TBLRgba64) Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(Double, Double, Double, Double, TBLRgba32) Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(Double, Double, Double, Double, TBLRgba) Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(Double, Double, Double, Double) Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with the current fill style. FillRect(TBLRect, TBLVar) Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRect, TBLGradient) Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRect, TBLPattern) Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRect, TAlphaColor) Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRect, TBLRgba64) Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRect, TBLRgba32) Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRect, TBLRgba) Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRect) Fills a rectangle <code>ARect</code> (floating point coordinates) with the current fill style. FillRect(TBLRectI, TBLVar) Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRectI, TBLGradient) Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRectI, TBLPattern) Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRectI, TAlphaColor) Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRectI, TBLRgba64) Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRectI, TBLRgba32) Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRectI, TBLRgba) Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillRect(TBLRectI) Fills a rectangle <code>ARect</code> (integer coordinates) with the current fill style. FillRectArray(PBLRectI, NativeInt, TBLVar) Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRectI, NativeInt, TBLGradient) Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRectI, NativeInt, TBLPattern) Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRectI, NativeInt, TAlphaColor) Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRectI, NativeInt, TBLRgba64) Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRectI, NativeInt, TBLRgba32) Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRectI, NativeInt, TBLRgba) Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRectI, NativeInt) Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with the default fill style. FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLVar) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLGradient) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLPattern) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TAlphaColor) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLRgba64) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLRgba32) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLRgba) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRectI&gt;) Fills an <code>AArray</code> of rectangles (integer coordinates) with the default fill style. FillRectArray(TArray&lt;TBLRectI&gt;, TBLVar) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRectI&gt;, TBLGradient) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRectI&gt;, TBLPattern) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRectI&gt;, TAlphaColor) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRectI&gt;, TBLRgba64) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRectI&gt;, TBLRgba32) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRectI&gt;, TBLRgba) Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRectI&gt;) Fills an <code>AArray</code> of rectangles (integer coordinates) with the default fill style. FillRectArray(PBLRect, NativeInt, TBLVar) Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRect, NativeInt, TBLGradient) Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRect, NativeInt, TBLPattern) Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRect, NativeInt, TAlphaColor) Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRect, NativeInt, TBLRgba64) Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRect, NativeInt, TBLRgba32) Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRect, NativeInt, TBLRgba) Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(PBLRect, NativeInt) Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with the default fill style. FillRectArray(TBLArrayView&lt;TBLRect&gt;, TBLVar) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRect&gt;, TBLGradient) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRect&gt;, TBLPattern) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRect&gt;, TAlphaColor) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRect&gt;, TBLRgba64) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRect&gt;, TBLRgba32) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRect&gt;, TBLRgba) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TBLArrayView&lt;TBLRect&gt;) Fills an <code>AArray</code> of rectangles (floating point coordinates) with the default fill style. FillRectArray(TArray&lt;TBLRect&gt;, TBLVar) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRect&gt;, TBLGradient) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRect&gt;, TBLPattern) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRect&gt;, TAlphaColor) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRect&gt;, TBLRgba64) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRect&gt;, TBLRgba32) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRect&gt;, TBLRgba) Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRectArray(TArray&lt;TBLRect&gt;) Fills an <code>AArray</code> of rectangles (floating point coordinates) with the default fill style. FillRoundRect(Double, Double, Double, Double, Double, Double, TBLVar) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, Double, TBLGradient) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, Double, TBLPattern) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, Double, TAlphaColor) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, Double, TBLRgba64) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, Double, TBLRgba32) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, Double, TBLRgba) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, Double) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with the current fill style. FillRoundRect(Double, Double, Double, Double, Double, TBLVar) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, TBLGradient) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, TBLPattern) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, TAlphaColor) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, TBLRgba64) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, TBLRgba32) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double, TBLRgba) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(Double, Double, Double, Double, Double) Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with the current fill style. FillRoundRect(TBLRect, Double, Double, TBLVar) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, Double, TBLGradient) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, Double, TBLPattern) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, Double, TAlphaColor) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, Double, TBLRgba64) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, Double, TBLRgba32) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, Double, TBLRgba) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, Double) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with the current fill style. FillRoundRect(TBLRect, Double, TBLVar) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, TBLGradient) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, TBLPattern) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, TAlphaColor) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, TBLRgba64) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, TBLRgba32) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double, TBLRgba) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRect, Double) Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with the current fill style. FillRoundRect(TBLRoundRect, TBLVar) Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRoundRect, TBLGradient) Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRoundRect, TBLPattern) Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRoundRect, TAlphaColor) Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRoundRect, TBLRgba64) Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRoundRect, TBLRgba32) Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRoundRect, TBLRgba) Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillRoundRect(TBLRoundRect) Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with the current fill style. FillText(TBLPoint, TBLFont, String, TBLVar) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPoint, TBLFont, String, TBLGradient) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPoint, TBLFont, String, TBLPattern) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPoint, TBLFont, String, TAlphaColor) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPoint, TBLFont, String, TBLRgba64) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPoint, TBLFont, String, TBLRgba32) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPoint, TBLFont, String, TBLRgba) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPoint, TBLFont, String) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the default fill style. FillText(TBLPointI, TBLFont, String, TBLVar) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPointI, TBLFont, String, TBLGradient) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPointI, TBLFont, String, TBLPattern) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPointI, TBLFont, String, TAlphaColor) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPointI, TBLFont, String, TBLRgba64) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPointI, TBLFont, String, TBLRgba32) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPointI, TBLFont, String, TBLRgba) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillText(TBLPointI, TBLFont, String) Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the default fill style. FillTriangle(Double, Double, Double, Double, Double, Double, TBLVar) Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(Double, Double, Double, Double, Double, Double, TBLGradient) Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(Double, Double, Double, Double, Double, Double, TBLPattern) Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(Double, Double, Double, Double, Double, Double, TAlphaColor) Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(Double, Double, Double, Double, Double, Double, TBLRgba64) Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(Double, Double, Double, Double, Double, Double, TBLRgba32) Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(Double, Double, Double, Double, Double, Double, TBLRgba) Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(Double, Double, Double, Double, Double, Double) Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with the current fill style. FillTriangle(TBLTriangle, TBLVar) Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(TBLTriangle, TBLGradient) Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(TBLTriangle, TBLPattern) Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(TBLTriangle, TAlphaColor) Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(TBLTriangle, TBLRgba64) Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(TBLTriangle, TBLRgba32) Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(TBLTriangle, TBLRgba) Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillTriangle(TBLTriangle) Fills an <code>ATriangle</code> (floating point coordinates) with the current fill style. FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLVar) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLGradient) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLPattern) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TAlphaColor) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLRgba64) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLRgba32) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLRgba) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, TBLStringView) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the default fill style. FillUtf8Text(TBLPoint, TBLFont, UTF8String, TBLVar) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, UTF8String, TBLGradient) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, UTF8String, TBLPattern) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, UTF8String, TAlphaColor) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, UTF8String, TBLRgba64) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, UTF8String, TBLRgba32) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, UTF8String, TBLRgba) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPoint, TBLFont, UTF8String) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the default fill style. FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLVar) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLGradient) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLPattern) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TAlphaColor) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLRgba64) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLRgba32) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLRgba) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, TBLStringView) Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the default fill style. FillUtf8Text(TBLPointI, TBLFont, UTF8String, TBLVar) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, UTF8String, TBLGradient) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, UTF8String, TBLPattern) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, UTF8String, TAlphaColor) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, UTF8String, TBLRgba64) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, UTF8String, TBLRgba32) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, UTF8String, TBLRgba) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. FillUtf8Text(TBLPointI, TBLFont, UTF8String) Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the default fill style. Finish Waits for completion of all render commands and detaches the rendering context from the rendering target. After <code>Finish</code> completes the rendering context implementation would be released and replaced by a built-in nil instance (no context). Flush Flushes the context. PostRotate(Double, TBLPointI) Rotates the user transformation matrix at <code>AOrigin</code> (integer) by <code>AAngle</code>. PostRotate(Double, TBLPoint) Rotates the user transformation matrix at <code>AOrigin</code> (floating-point) by <code>AAngle</code>. PostRotate(Double, Double, Double) Rotates the user transformation matrix at <code>[AX, AY]</code> by <code>AAngle</code>. PostRotate(Double) Rotates the user transformation matrix by <code>AAngle</code>. PostScale(TBLPointI) Post-scales the user transformation matrix by <code>[AP]</code> (integer). PostScale(TBLPoint) Post-scales the user transformation matrix by <code>[AP]</code> (floating-point). PostScale(Double, Double) Post-scales the user transformation matrix by <code>[AX, AY]</code>. PostScale(Double) Post-scales the user transformation matrix by <code>AXY</code> (both X and Y is scaled by <code>AXY</code>). PostSkew(TBLPoint) Skews the user transformation matrix by <code>[AP]</code> (floating-point). PostSkew(Double, Double) Skews the user transformation matrix by <code>[AX, AY]</code>. PostTransform Transforms the user transformation matrix by <code>ATransform</code>. PostTranslate(TBLPointI) Post-Translates the used transformation matrix by <code>[AP]</code> (integer). PostTranslate(TBLPoint) Post-Translates the used transformation matrix by <code>[AP]</code> (floating-point). PostTranslate(Double, Double) Post-translates the used transformation matrix by <code>[AX, AY]</code>. Reset Resets this rendering context to the default constructed one. ResetTransform Resets user transformation matrix to identity. Restore(TBLContextCookie) Restores the top-most saved context-state. Restore Restores the top-most saved context-state. RestoreClipping Restores clipping to the last saved state or to the context default clipping if there is no saved state. Rotate(Double, TBLPointI) Rotates the user transformation matrix at <code>AOrigin</code> (integer) by <code>AAngle</code>. Rotate(Double, TBLPoint) Rotates the user transformation matrix at <code>AOrigin</code> (floating-point) by <code>AAngle</code>. Rotate(Double, Double, Double) Rotates the user transformation matrix at <code>[AX, AY]</code> by <code>AAngle</code>. Rotate(Double) Rotates the user transformation matrix by <code>AAngle</code>. Save(TBLContextCookie) Saves the current rendering context state and creates a restoration <code>cookie</code>. Save Saves the current rendering context state. Scale(TBLPointI) Scales the user transformation matrix by <code>[AP]</code> (integer). Scale(TBLPoint) Scales the user transformation matrix by <code>[AP]</code> (floating-point). Scale(Double, Double) Scales the user transformation matrix by <code>[AX, AY]</code>. Scale(Double) Scales the user transformation matrix by <code>AXY</code> (both X and Y is scaled by <code>AXY</code>). SetFillStyle(TBLVar, TBLContextStyleTransformMode) Sets fill style. SetFillStyle(TBLPattern, TBLContextStyleTransformMode) Sets fill style. SetFillStyle(TBLGradient, TBLContextStyleTransformMode) Sets fill style. SetFillStyle(TBLPattern) Sets fill style. SetFillStyle(TBLGradient) Sets fill style. SetFillStyle(TBLRgba64) Sets fill style. SetFillStyle(TAlphaColor) Sets fill style. SetFillStyle(TBLRgba32) Sets fill style. SetFillStyle(TBLRgba) Sets fill style. SetHint Sets the given rendering hint <code>AHintType</code> to <code>AValue</code>. SetStrokeCap Sets stroke cap of the specified <code>APosition</code> to <code>AStrokeCap</code>. SetStrokeCaps Sets all stroke caps to <code>AStrokeCap</code>. SetStrokeStyle(TBLVar, TBLContextStyleTransformMode) Sets stroke style. SetStrokeStyle(TBLPattern, TBLContextStyleTransformMode) Sets stroke style. SetStrokeStyle(TBLGradient, TBLContextStyleTransformMode) Sets stroke style. SetStrokeStyle(TBLPattern) Sets stroke style. SetStrokeStyle(TBLGradient) Sets stroke style. SetStrokeStyle(TAlphaColor) Sets stroke style. SetStrokeStyle(TBLRgba64) Sets stroke style. SetStrokeStyle(TBLRgba32) Sets stroke style. SetStrokeStyle(TBLRgba) Sets stroke style. SetStyle(TBLContextStyleSlot, TBLVar, TBLContextStyleTransformMode) Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation and applied <code>ATransformMode</code>. SetStyle(TBLContextStyleSlot, TBLPattern, TBLContextStyleTransformMode) Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation and applied <code>ATransformMode</code>. SetStyle(TBLContextStyleSlot, TBLGradient, TBLContextStyleTransformMode) Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation and applied <code>ATransformMode</code>. SetStyle(TBLContextStyleSlot, TBLVar) Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. SetStyle(TBLContextStyleSlot, TBLPattern) Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. SetStyle(TBLContextStyleSlot, TBLGradient) Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. SetStyle(TBLContextStyleSlot, TAlphaColor) Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. SetStyle(TBLContextStyleSlot, TBLRgba64) Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. SetStyle(TBLContextStyleSlot, TBLRgba32) Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. SetStyle(TBLContextStyleSlot, TBLRgba) Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. SetTransform Sets user transformation matrix to <code>ATransform</code>. Skew(TBLPoint) Skews the user transformation matrix by <code>[AP]</code> (floating-point). Skew(Double, Double) Skews the user transformation matrix by <code>[AX, AY]</code>. Start(TBLImage, TBLContextCreateInfo) Begins rendering to the given <code>AImage</code>. Start(TBLImage) Begins rendering to the given <code>AImage</code>. StrokeArc(Double, Double, Double, Double, Double, Double, TBLVar) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, Double, TBLGradient) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, Double, TBLPattern) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, Double, TAlphaColor) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, Double, TBLRgba64) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, Double, TBLRgba32) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, Double, TBLRgba) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, Double) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current stroke style. StrokeArc(Double, Double, Double, Double, Double, TBLVar) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, TBLGradient) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, TBLPattern) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, TAlphaColor) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, TBLRgba64) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, TBLRgba32) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double, TBLRgba) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(Double, Double, Double, Double, Double) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current stroke style. StrokeArc(TBLArc, TBLVar) Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(TBLArc, TBLGradient) Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(TBLArc, TBLPattern) Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(TBLArc, TAlphaColor) Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(TBLArc, TBLRgba64) Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(TBLArc, TBLRgba32) Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(TBLArc, TBLRgba) Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeArc(TBLArc) Strokes an <code>AArc</code> (floating point coordinates) with the current stroke style. StrokeBox(Double, Double, Double, Double, TBLVar) Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> StrokeBox(Double, Double, Double, Double, TBLGradient) Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> StrokeBox(Double, Double, Double, Double, TBLPattern) Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> StrokeBox(Double, Double, Double, Double, TAlphaColor) Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> StrokeBox(Double, Double, Double, Double, TBLRgba64) Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> StrokeBox(Double, Double, Double, Double, TBLRgba32) Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> StrokeBox(Double, Double, Double, Double, TBLRgba) Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> StrokeBox(Double, Double, Double, Double) Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with the current stroke style. StrokeBox(TBLBoxI, TBLVar) Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBoxI, TBLGradient) Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBoxI, TBLPattern) Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBoxI, TAlphaColor) Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBoxI, TBLRgba64) Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBoxI, TBLRgba32) Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBoxI, TBLRgba) Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBoxI) Strokes a <code>ABox</code> (integer coordinates) with the current stroke style. StrokeBox(TBLBox, TBLVar) Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBox, TBLGradient) Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBox, TBLPattern) Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBox, TAlphaColor) Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBox, TBLRgba64) Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBox, TBLRgba32) Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBox, TBLRgba) Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeBox(TBLBox) Strokes a <code>ABox</code> (floating point coordinates) with the current stroke style. StrokeBoxArray(PBLBoxI, NativeInt, TBLVar) Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBoxI, NativeInt, TBLGradient) Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBoxI, NativeInt, TBLPattern) Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBoxI, NativeInt, TAlphaColor) Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBoxI, NativeInt, TBLRgba64) Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBoxI, NativeInt, TBLRgba32) Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBoxI, NativeInt, TBLRgba) Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBoxI, NativeInt) Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with the default stroke style. StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLVar) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLGradient) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLPattern) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TAlphaColor) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLRgba64) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLRgba32) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLRgba) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;) Strokes an <code>AArray</code> of boxes (integer coordinates) with the default stroke style. StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TBLVar) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TBLGradient) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TBLPattern) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TAlphaColor) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TBLRgba64) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TBLRgba32) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TBLRgba) Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBoxI&gt;) Strokes an <code>AArray</code> of boxes (integer coordinates) with the default stroke style. StrokeBoxArray(PBLBox, NativeInt, TBLVar) Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBox, NativeInt, TBLGradient) Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBox, NativeInt, TBLPattern) Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBox, NativeInt, TAlphaColor) Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBox, NativeInt, TBLRgba64) Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBox, NativeInt, TBLRgba32) Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBox, NativeInt, TBLRgba) Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(PBLBox, NativeInt) Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with the default stroke style. StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLVar) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLGradient) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLPattern) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TAlphaColor) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLRgba64) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLRgba32) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLRgba) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;) Strokes an <code>AArray</code> of boxes (floating point coordinates) with the default stroke style. StrokeBoxArray(TArray&lt;TBLBox&gt;, TBLVar) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBox&gt;, TBLGradient) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBox&gt;, TBLPattern) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBox&gt;, TAlphaColor) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBox&gt;, TBLRgba64) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBox&gt;, TBLRgba32) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBox&gt;, TBLRgba) Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeBoxArray(TArray&lt;TBLBox&gt;) Strokes an <code>AArray</code> of boxes (floating point coordinates) with the default stroke style. StrokeChord(Double, Double, Double, Double, Double, Double, TBLVar) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, Double, TBLGradient) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, Double, TBLPattern) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, Double, TAlphaColor) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, Double, TBLRgba64) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, Double, TBLRgba32) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, Double, TBLRgba) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, Double) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current stroke style. StrokeChord(Double, Double, Double, Double, Double, TBLVar) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, TBLGradient) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, TBLPattern) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, TAlphaColor) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, TBLRgba64) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, TBLRgba32) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double, TBLRgba) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(Double, Double, Double, Double, Double) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current stroke style. StrokeChord(TBLArc, TBLVar) Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(TBLArc, TBLGradient) Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(TBLArc, TBLPattern) Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(TBLArc, TAlphaColor) Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(TBLArc, TBLRgba64) Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(TBLArc, TBLRgba32) Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(TBLArc, TBLRgba) Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeChord(TBLArc) Strokes an <code>AChord</code> (floating point coordinates) with the current stroke style. StrokeCircle(Double, Double, Double, TBLVar) Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeCircle(Double, Double, Double, TBLGradient) Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeCircle(Double, Double, Double, TBLPattern) Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeCircle(Double, Double, Double, TAlphaColor) Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeCircle(Double, Double, Double, TBLRgba64) Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeCircle(Double, Double, Double, TBLRgba32) Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeCircle(Double, Double, Double, TBLRgba) Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeCircle(Double, Double, Double) Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with the current stroke style. StrokeCircle(TBLCircle, TBLVar) Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeCircle(TBLCircle, TBLGradient) Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeCircle(TBLCircle, TBLPattern) Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeCircle(TBLCircle, TAlphaColor) Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeCircle(TBLCircle, TBLRgba64) Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeCircle(TBLCircle, TBLRgba32) Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeCircle(TBLCircle, TBLRgba) Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. StrokeCircle(TBLCircle) Strokes an <code>ACircle</code> (floating point coordinates) with the current stroke style. StrokeEllipse(Double, Double, Double, Double, TBLVar) Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(Double, Double, Double, Double, TBLGradient) Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(Double, Double, Double, Double, TBLPattern) Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(Double, Double, Double, Double, TAlphaColor) Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(Double, Double, Double, Double, TBLRgba64) Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(Double, Double, Double, Double, TBLRgba32) Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(Double, Double, Double, Double, TBLRgba) Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(Double, Double, Double, Double) Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with the current stroke style. StrokeEllipse(TBLEllipse, TBLVar) Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(TBLEllipse, TBLGradient) Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(TBLEllipse, TBLPattern) Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(TBLEllipse, TAlphaColor) Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(TBLEllipse, TBLRgba64) Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(TBLEllipse, TBLRgba32) Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(TBLEllipse, TBLRgba) Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeEllipse(TBLEllipse) Strokes an <code>AEllipse</code> (floating point coordinates) with the current stroke style. StrokeGeometry(TBLGeometryType, Pointer, TBLVar) Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. StrokeGeometry(TBLGeometryType, Pointer, TBLGradient) Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. StrokeGeometry(TBLGeometryType, Pointer, TBLPattern) Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. StrokeGeometry(TBLGeometryType, Pointer, TAlphaColor) Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. StrokeGeometry(TBLGeometryType, Pointer, TBLRgba64) Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. StrokeGeometry(TBLGeometryType, Pointer, TBLRgba32) Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. StrokeGeometry(TBLGeometryType, Pointer, TBLRgba) Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. StrokeGeometry(TBLGeometryType, Pointer) Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with the default stroke style. StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLVar) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLGradient) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLPattern) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TAlphaColor) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLRgba64) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLRgba32) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLRgba) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the current stroke style. StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLVar) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLGradient) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLPattern) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TAlphaColor) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLRgba64) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLRgba32) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLRgba) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun) Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the current stroke style. StrokeLine(Double, Double, Double, Double, TBLVar) Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(Double, Double, Double, Double, TBLGradient) Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(Double, Double, Double, Double, TBLPattern) Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(Double, Double, Double, Double, TAlphaColor) Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(Double, Double, Double, Double, TBLRgba64) Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(Double, Double, Double, Double, TBLRgba32) Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(Double, Double, Double, Double, TBLRgba) Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(Double, Double, Double, Double) Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with the default stroke style. StrokeLine(TBLPoint, TBLPoint, TBLVar) Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLPoint, TBLPoint, TBLGradient) Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLPoint, TBLPoint, TBLPattern) Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLPoint, TBLPoint, TAlphaColor) Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLPoint, TBLPoint, TBLRgba64) Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLPoint, TBLPoint, TBLRgba32) Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLPoint, TBLPoint, TBLRgba) Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLPoint, TBLPoint) Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with the default stroke style. StrokeLine(TBLLine, TBLVar) Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLLine, TBLGradient) Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLLine, TBLPattern) Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLLine, TAlphaColor) Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLLine, TBLRgba64) Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLLine, TBLRgba32) Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLLine, TBLRgba) Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeLine(TBLLine) Strokes a line specified as <code>ALine</code> (floating point coordinates) with the default stroke style. StrokePath(TBLPoint, TBLPath, TBLVar) Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPoint, TBLPath, TBLGradient) Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPoint, TBLPath, TBLPattern) Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPoint, TBLPath, TAlphaColor) Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPoint, TBLPath, TBLRgba64) Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPoint, TBLPath, TBLRgba32) Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPoint, TBLPath, TBLRgba) Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPoint, TBLPath) Strokes the given <code>APath</code> translated by <code>AOrigin</code> with the default stroke style. StrokePath(TBLPath, TBLVar) Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPath, TBLGradient) Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPath, TBLPattern) Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPath, TAlphaColor) Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPath, TBLRgba64) Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPath, TBLRgba32) Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPath, TBLRgba) Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. StrokePath(TBLPath) Strokes the given <code>APath</code> with the default stroke style. StrokePie(Double, Double, Double, Double, Double, Double, TBLVar) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, Double, TBLGradient) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, Double, TBLPattern) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, Double, TAlphaColor) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, Double, TBLRgba64) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, Double, TBLRgba32) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, Double, TBLRgba) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, Double) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current stroke style. StrokePie(Double, Double, Double, Double, Double, TBLVar) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, TBLGradient) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, TBLPattern) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, TAlphaColor) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, TBLRgba64) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, TBLRgba32) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double, TBLRgba) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(Double, Double, Double, Double, Double) Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current stroke style. StrokePie(TBLArc, TBLVar) Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(TBLArc, TBLGradient) Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(TBLArc, TBLPattern) Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(TBLArc, TAlphaColor) Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(TBLArc, TBLRgba64) Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(TBLArc, TBLRgba32) Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(TBLArc, TBLRgba) Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePie(TBLArc) Strokes an <code>APie</code> (floating point coordinates) with the current stroke style. StrokePolygon(PBLPointI, NativeInt, TBLVar) Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPointI, NativeInt, TBLGradient) Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPointI, NativeInt, TBLPattern) Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPointI, NativeInt, TAlphaColor) Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPointI, NativeInt, TBLRgba64) Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPointI, NativeInt, TBLRgba32) Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPointI, NativeInt, TBLRgba) Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPointI, NativeInt) Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with the current stroke style. StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TBLVar) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TBLGradient) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TBLPattern) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TAlphaColor) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TBLRgba64) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TBLRgba32) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TBLRgba) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPointI&gt;) Strokes a polygon <code>APoly</code> (integer coordinates) with the current stroke style. StrokePolygon(TArray&lt;TBLPointI&gt;, TBLVar) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPointI&gt;, TBLGradient) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPointI&gt;, TBLPattern) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPointI&gt;, TAlphaColor) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPointI&gt;, TBLRgba64) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPointI&gt;, TBLRgba32) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPointI&gt;, TBLRgba) Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPointI&gt;) Strokes a polygon <code>APoly</code> (integer coordinates) with the current stroke style. StrokePolygon(PBLPoint, NativeInt, TBLVar) Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPoint, NativeInt, TBLGradient) Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPoint, NativeInt, TBLPattern) Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPoint, NativeInt, TAlphaColor) Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPoint, NativeInt, TBLRgba64) Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPoint, NativeInt, TBLRgba32) Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPoint, NativeInt, TBLRgba) Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(PBLPoint, NativeInt) Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with the current stroke style. StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TBLVar) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TBLGradient) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TBLPattern) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TAlphaColor) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TBLRgba64) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TBLRgba32) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TBLRgba) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TBLArrayView&lt;TBLPoint&gt;) Strokes a polygon <code>APoly</code> (floating point coordinates) with the current stroke style. StrokePolygon(TArray&lt;TBLPoint&gt;, TBLVar) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPoint&gt;, TBLGradient) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPoint&gt;, TBLPattern) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPoint&gt;, TAlphaColor) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPoint&gt;, TBLRgba64) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPoint&gt;, TBLRgba32) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPoint&gt;, TBLRgba) Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolygon(TArray&lt;TBLPoint&gt;) Strokes a polygon <code>APoly</code> (floating point coordinates) with the current stroke style. StrokePolyline(PBLPointI, NativeInt, TBLVar) Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPointI, NativeInt, TBLGradient) Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPointI, NativeInt, TBLPattern) Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPointI, NativeInt, TAlphaColor) Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPointI, NativeInt, TBLRgba64) Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPointI, NativeInt, TBLRgba32) Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPointI, NativeInt, TBLRgba) Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPointI, NativeInt) Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with the current stroke style. StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TBLVar) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TBLGradient) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TBLPattern) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TAlphaColor) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TBLRgba64) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TBLRgba32) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TBLRgba) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPointI&gt;) Strokes a polyline <code>APoly</code> (integer coordinates) with the current stroke style. StrokePolyline(TArray&lt;TBLPointI&gt;, TBLVar) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPointI&gt;, TBLGradient) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPointI&gt;, TBLPattern) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPointI&gt;, TAlphaColor) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPointI&gt;, TBLRgba64) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPointI&gt;, TBLRgba32) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPointI&gt;, TBLRgba) Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPointI&gt;) Strokes a polyline <code>APoly</code> (integer coordinates) with the current stroke style. StrokePolyline(PBLPoint, NativeInt, TBLVar) Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPoint, NativeInt, TBLGradient) Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPoint, NativeInt, TBLPattern) Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPoint, NativeInt, TAlphaColor) Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPoint, NativeInt, TBLRgba64) Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPoint, NativeInt, TBLRgba32) Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPoint, NativeInt, TBLRgba) Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(PBLPoint, NativeInt) Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with the current stroke style. StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TBLVar) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TBLGradient) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TBLPattern) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TAlphaColor) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TBLRgba64) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TBLRgba32) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TBLRgba) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TBLArrayView&lt;TBLPoint&gt;) Strokes a polyline <code>APoly</code> (floating point coordinates) with the current stroke style. StrokePolyline(TArray&lt;TBLPoint&gt;, TBLVar) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPoint&gt;, TBLGradient) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPoint&gt;, TBLPattern) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPoint&gt;, TAlphaColor) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPoint&gt;, TBLRgba64) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPoint&gt;, TBLRgba32) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPoint&gt;, TBLRgba) Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokePolyline(TArray&lt;TBLPoint&gt;) Strokes a polyline <code>APoly</code> (floating point coordinates) with the current stroke style. StrokeRect(Double, Double, Double, Double, TBLVar) Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(Double, Double, Double, Double, TBLGradient) Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(Double, Double, Double, Double, TBLPattern) Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(Double, Double, Double, Double, TAlphaColor) Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(Double, Double, Double, Double, TBLRgba64) Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(Double, Double, Double, Double, TBLRgba32) Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(Double, Double, Double, Double, TBLRgba) Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(Double, Double, Double, Double) Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with the current stroke style. StrokeRect(TBLRect, TBLVar) Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRect, TBLGradient) Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRect, TBLPattern) Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRect, TAlphaColor) Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRect, TBLRgba64) Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRect, TBLRgba32) Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRect, TBLRgba) Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRect) Strokes a rectangle <code>ARect</code> (floating point coordinates) with the current stroke style. StrokeRect(TBLRectI, TBLVar) Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRectI, TBLGradient) Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRectI, TBLPattern) Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRectI, TAlphaColor) Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRectI, TBLRgba64) Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRectI, TBLRgba32) Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRectI, TBLRgba) Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRect(TBLRectI) Strokes a rectangle <code>ARect</code> (integer coordinates) with the current stroke style. StrokeRectArray(PBLRectI, NativeInt, TBLVar) Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRectI, NativeInt, TBLGradient) Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRectI, NativeInt, TBLPattern) Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRectI, NativeInt, TAlphaColor) Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRectI, NativeInt, TBLRgba64) Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRectI, NativeInt, TBLRgba32) Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRectI, NativeInt, TBLRgba) Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRectI, NativeInt) Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with the default stroke style. StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLVar) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLGradient) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLPattern) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TAlphaColor) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLRgba64) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLRgba32) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLRgba) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;) Strokes an <code>AArray</code> of rectangles (integer coordinates) with the default stroke style. StrokeRectArray(TArray&lt;TBLRectI&gt;, TBLVar) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRectI&gt;, TBLGradient) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRectI&gt;, TBLPattern) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRectI&gt;, TAlphaColor) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRectI&gt;, TBLRgba64) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRectI&gt;, TBLRgba32) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRectI&gt;, TBLRgba) Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRectI&gt;) Strokes an <code>AArray</code> of rectangles (integer coordinates) with the default stroke style. StrokeRectArray(PBLRect, NativeInt, TBLVar) Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRect, NativeInt, TBLGradient) Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRect, NativeInt, TBLPattern) Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRect, NativeInt, TAlphaColor) Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRect, NativeInt, TBLRgba64) Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRect, NativeInt, TBLRgba32) Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRect, NativeInt, TBLRgba) Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(PBLRect, NativeInt) Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with the default stroke style. StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TBLVar) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TBLGradient) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TBLPattern) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TAlphaColor) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TBLRgba64) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TBLRgba32) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TBLRgba) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TBLArrayView&lt;TBLRect&gt;) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with the default stroke style. StrokeRectArray(TArray&lt;TBLRect&gt;, TBLVar) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRect&gt;, TBLGradient) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRect&gt;, TBLPattern) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRect&gt;, TAlphaColor) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRect&gt;, TBLRgba64) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRect&gt;, TBLRgba32) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRect&gt;, TBLRgba) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRectArray(TArray&lt;TBLRect&gt;) Strokes an <code>AArray</code> of rectangles (floating point coordinates) with the default stroke style. StrokeRoundRect(Double, Double, Double, Double, Double, Double, TBLVar) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, Double, TBLGradient) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, Double, TBLPattern) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, Double, TAlphaColor) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, Double, TBLRgba64) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, Double, TBLRgba32) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, Double, TBLRgba) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, Double) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with the current stroke style. StrokeRoundRect(Double, Double, Double, Double, Double, TBLVar) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, TBLGradient) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, TBLPattern) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, TAlphaColor) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, TBLRgba64) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, TBLRgba32) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double, TBLRgba) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(Double, Double, Double, Double, Double) Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with the current stroke style. StrokeRoundRect(TBLRect, Double, Double, TBLVar) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, Double, TBLGradient) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, Double, TBLPattern) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, Double, TAlphaColor) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, Double, TBLRgba64) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, Double, TBLRgba32) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, Double, TBLRgba) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, Double) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with the current stroke style. StrokeRoundRect(TBLRect, Double, TBLVar) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, TBLGradient) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, TBLPattern) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, TAlphaColor) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, TBLRgba64) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, TBLRgba32) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double, TBLRgba) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRect, Double) Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with the current stroke style. StrokeRoundRect(TBLRoundRect, TBLVar) Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRoundRect, TBLGradient) Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRoundRect, TBLPattern) Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRoundRect, TAlphaColor) Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRoundRect, TBLRgba64) Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRoundRect, TBLRgba32) Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRoundRect, TBLRgba) Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeRoundRect(TBLRoundRect) Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with the current stroke style. StrokeText(TBLPoint, TBLFont, String, TBLVar) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPoint, TBLFont, String, TBLGradient) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPoint, TBLFont, String, TBLPattern) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPoint, TBLFont, String, TAlphaColor) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPoint, TBLFont, String, TBLRgba64) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPoint, TBLFont, String, TBLRgba32) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPoint, TBLFont, String, TBLRgba) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPoint, TBLFont, String) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the default stroke style. StrokeText(TBLPointI, TBLFont, String, TBLVar) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPointI, TBLFont, String, TBLGradient) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPointI, TBLFont, String, TBLPattern) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPointI, TBLFont, String, TAlphaColor) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPointI, TBLFont, String, TBLRgba64) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPointI, TBLFont, String, TBLRgba32) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPointI, TBLFont, String, TBLRgba) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeText(TBLPointI, TBLFont, String) Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the default stroke style. StrokeTriangle(Double, Double, Double, Double, Double, Double, TBLVar) Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(Double, Double, Double, Double, Double, Double, TBLGradient) Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(Double, Double, Double, Double, Double, Double, TBLPattern) Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(Double, Double, Double, Double, Double, Double, TAlphaColor) Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(Double, Double, Double, Double, Double, Double, TBLRgba64) Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(Double, Double, Double, Double, Double, Double, TBLRgba32) Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(Double, Double, Double, Double, Double, Double, TBLRgba) Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(Double, Double, Double, Double, Double, Double) Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with the current stroke style. StrokeTriangle(TBLTriangle, TBLVar) Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(TBLTriangle, TBLGradient) Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(TBLTriangle, TBLPattern) Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(TBLTriangle, TAlphaColor) Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(TBLTriangle, TBLRgba64) Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(TBLTriangle, TBLRgba32) Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(TBLTriangle, TBLRgba) Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeTriangle(TBLTriangle) Strokes an <code>ATriangle</code> (floating point coordinates) with the current stroke style. StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLVar) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLGradient) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLPattern) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TAlphaColor) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLRgba64) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLRgba32) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLRgba) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the default stroke style. StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TBLVar) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TBLGradient) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TBLPattern) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TAlphaColor) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TBLRgba64) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TBLRgba32) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TBLRgba) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPoint, TBLFont, UTF8String) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the default stroke style. StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLVar) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLGradient) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLPattern) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TAlphaColor) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLRgba64) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLRgba32) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLRgba) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView) Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the default stroke style. StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TBLVar) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TBLGradient) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TBLPattern) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TAlphaColor) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TBLRgba64) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TBLRgba32) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TBLRgba) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. StrokeUtf8Text(TBLPointI, TBLFont, UTF8String) Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the default stroke style. SwapStyles Swaps fill and stroke styles. Translate(TBLPointI) Translates the user transformation matrix by <code>[AP]</code> (integer). Translate(TBLPoint) Translates the user transformation matrix by <code>[AP]</code> (floating-point). Translate(Double, Double) Translates the user transformation matrix by <code>[AX, AY]</code>. UserToMeta Stores the result of combining the current <code>MetaTransform</code> and <code>UserTransform</code> to <code>MetaTransform</code> and resets <code>UserTransform</code> to identity as shown below:"},{"location":"Reference/Blend2D/classes/TBLContext/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLContext/#AccumulatedErrorFlags","title":"AccumulatedErrorFlags","text":"<p>Accumulated errors as flags.</p> <p>Errors may accumulate during the lifetime of the rendering context. </p> <p><code>property AccumulatedErrorFlags: TBLContextErrorFlags read GetAccumulatedErrorFlags</code></p> <p>Type: <code>TBLContextErrorFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#ApproximationOptions","title":"ApproximationOptions","text":"<p>Approximation options. </p> <p><code>property ApproximationOptions: TBLApproximationOptions read GetApproximationOptions write SetApproximationOptions</code></p> <p>Type: <code>TBLApproximationOptions</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#CompOp","title":"CompOp","text":"<p>Composition operator.</p> <p>The composition operator is part of the rendering context state and is subject to <code>Save</code> and <code>Restore</code>. The default composition operator is <code>TBLCompOp.SrcOver</code>, which would be returned immediately after the rendering context is created. </p> <p><code>property CompOp: TBLCompOp read GetCompOp write SetCompOp</code></p> <p>Type: <code>TBLCompOp</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also","title":"See Also","text":"<ul> <li>Save</li> <li>Restore</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#ContextType","title":"ContextType","text":"<p>Returns the type of this context, see \\ref BLContextType. </p> <p><code>property ContextType: TBLContextType read GetContextType</code></p> <p>Type: <code>TBLContextType</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillAlpha","title":"FillAlpha","text":"<p>Fill alpha value. </p> <p><code>property FillAlpha: Double read GetFillAlpha write SetFillAlpha</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRule","title":"FillRule","text":"<p>Returns fill rule. </p> <p><code>property FillRule: TBLFillRule read GetFillRule write SetFillRule</code></p> <p>Type: <code>TBLFillRule</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillStyle","title":"FillStyle","text":"<p>Fill style. </p> <p><code>property FillStyle: TBLVar read GetFillStyle write SetFillStyle</code></p> <p>Type: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks","title":"Remarks","text":"<p>When reading this property, the original style passed to the rendering context is returned, with its original transformation matrix if it's not a solid color. Consider using <code>TransformedFillStyle</code> if you want to get a style with the transformation matrix that the rendering context actually uses to render it. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillStyleType","title":"FillStyleType","text":"<p>The current fill style type. </p> <p><code>property FillStyleType: TBLObjectType read GetFillStyleType</code></p> <p>Type: <code>TBLObjectType</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FinalTransform","title":"FinalTransform","text":"<p>Final transformation matrix.</p> <p>Final transformation matrix is a combination of meta and user transformation matrices. It's the final transformation that the rendering context applies to all input coordinates. </p> <p><code>property FinalTransform: TBLMatrix2D read GetFinalTransform</code></p> <p>Type: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FlattenMode","title":"FlattenMode","text":"<p>Flatten mode (how curves are flattened). </p> <p><code>property FlattenMode: TBLFlattenMode read GetFlattenMode write SetFlattenMode</code></p> <p>Type: <code>TBLFlattenMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FlattenTolerance","title":"FlattenTolerance","text":"<p>Tolerance used for curve flattening. </p> <p><code>property FlattenTolerance: Double read GetFlattenTolerance write SetFlattenTolerance</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#GlobalAlpha","title":"GlobalAlpha","text":"<p>The global alpha value.</p> <p>The global alpha value is part of the rendering context state and is subject to <code>Save</code> and <code>Restore</code>. The default value is <code>1.0</code>, which would be returned immediately after the rendering context is created. </p> <p><code>property GlobalAlpha: Double read GetGlobalAlpha write SetGlobalAlpha</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_1","title":"See Also","text":"<ul> <li>Save</li> <li>Restore</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#GradientQuality","title":"GradientQuality","text":"<p>The gradient quality hint. </p> <p><code>property GradientQuality: TBLGradientQuality read GetGradientQuality write SetGradientQuality</code></p> <p>Type: <code>TBLGradientQuality</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Hints","title":"Hints","text":"<p>Rendering context hints. </p> <p><code>property Hints: TBLContextHints read GetHints write SetHints</code></p> <p>Type: <code>TBLContextHints</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_10","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#IsValid","title":"IsValid","text":"<p>Tests whether the context is a valid rendering context that has attached target to it. </p> <p><code>property IsValid: Boolean read GetIsValid</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#MetaTransform","title":"MetaTransform","text":"<p>Meta transformation matrix.</p> <p>Meta matrix is a core transformation matrix that is normally not changed by transformations applied to the context. Instead it acts as a secondary matrix used to create the final transformation matrix from meta and user matrices.</p> <p>Meta matrix can be used to scale the whole context for HI-DPI rendering or to change the orientation of the image being rendered, however, the number of use-cases is unlimited.</p> <p>To change the meta-matrix you must first change user-matrix and then call <code>UserToMeta</code>, which would update meta-matrix and clear user-matrix. </p> <p><code>property MetaTransform: TBLMatrix2D read GetMetaTransform</code></p> <p>Type: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_2","title":"See Also","text":"<ul> <li>UserTransform</li> <li>UserToMeta</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#PatternQuality","title":"PatternQuality","text":"<p>The pattern quality hint. </p> <p><code>property PatternQuality: TBLPatternQuality read GetPatternQuality write SetPatternQuality</code></p> <p>Type: <code>TBLPatternQuality</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_11","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#RenderingQuality","title":"RenderingQuality","text":"<p>The rendering quality hint. </p> <p><code>property RenderingQuality: TBLRenderingQuality read GetRenderingQuality write SetRenderingQuality</code></p> <p>Type: <code>TBLRenderingQuality</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_12","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SavedStateCount","title":"SavedStateCount","text":"<p>The number of saved states in the context (0 means no saved states). </p> <p><code>property SavedStateCount: Integer read GetSavedStateCount</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_3","title":"See Also","text":"<ul> <li>Save</li> <li>Restore</li> <li>TBLContextCookie</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_1","title":"Remarks","text":"<p>Each successful call to <code>Save</code> increments the saved-state counter and each successful call to <code>Restore</code> decrements it. However, the calls must be successful as the rendering context allows to restrict the number of save states, for example, or to use a <code>TBLContextCookie</code> to guard state save and restoration. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeAlpha","title":"StrokeAlpha","text":"<p>Stroke alpha value. </p> <p><code>property StrokeAlpha: Double read GetStrokeAlpha write SetStrokeAlpha</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_13","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeDashArray","title":"StrokeDashArray","text":"<p>Stroke dash-array. </p> <p><code>property StrokeDashArray: TBLArray&lt;Double&gt; read GetStrokeDashArray write SetStrokeDashArray</code></p> <p>Type: <code>TBLArray&lt;Double&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_14","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeDashOffset","title":"StrokeDashOffset","text":"<p>Returns stroke dash-offset. </p> <p><code>property StrokeDashOffset: Double read GetStrokeDashOffset write SetStrokeDashOffset</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_15","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEndCap","title":"StrokeEndCap","text":"<p>Stroke end-cap. </p> <p><code>property StrokeEndCap: TBLStrokeCap read GetStrokeEndCap write SetStrokeEndCap</code></p> <p>Type: <code>TBLStrokeCap</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_16","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeJoin","title":"StrokeJoin","text":"<p>Stroke join. </p> <p><code>property StrokeJoin: TBLStrokeJoin read GetStrokeJoin write SetStrokeJoin</code></p> <p>Type: <code>TBLStrokeJoin</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_17","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeMiterLimit","title":"StrokeMiterLimit","text":"<p>Stroke miter-limit. </p> <p><code>property StrokeMiterLimit: Double read GetStrokeMiterLimit write SetStrokeMiterLimit</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_18","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeOptions","title":"StrokeOptions","text":"<p>Stroke options. </p> <p><code>property StrokeOptions: TBLStrokeOptions read GetStrokeOptions write SetStrokeOptions</code></p> <p>Type: <code>TBLStrokeOptions</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_19","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeStartCap","title":"StrokeStartCap","text":"<p>Stroke start-cap. </p> <p><code>property StrokeStartCap: TBLStrokeCap read GetStrokeStartCap write SetStrokeStartCap</code></p> <p>Type: <code>TBLStrokeCap</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_20","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeStyle","title":"StrokeStyle","text":"<p>Stroke style. </p> <p><code>property StrokeStyle: TBLVar read GetStrokeStyle write SetStrokeStyle</code></p> <p>Type: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_21","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_2","title":"Remarks","text":"<p>When reading this property, the original style passed to the rendering context is returned, with its original transformation matrix if it's not a solid color. Consider using <code>TransformedStrokeStyle</code> if you want to get a style with the transformation matrix that the rendering context actually uses to render it. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeStyleType","title":"StrokeStyleType","text":"<p>Returns the current stroke style type. </p> <p><code>property StrokeStyleType: TBLObjectType read GetStrokeStyleType</code></p> <p>Type: <code>TBLObjectType</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTransformOrder","title":"StrokeTransformOrder","text":"<p>Stroke transform order. </p> <p><code>property StrokeTransformOrder: TBLStrokeTransformOrder read GetStrokeTransformOrder write SetStrokeTransformOrder</code></p> <p>Type: <code>TBLStrokeTransformOrder</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_22","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeWidth","title":"StrokeWidth","text":"<p>Stroke width. </p> <p><code>property StrokeWidth: Double read GetStrokeWidth write SetStrokeWidth</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_23","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Style","title":"Style","text":"<p>The styles associated with the given style <code>ASlot</code>. </p> <p><code>property Style[const ASlot: TBLContextStyleSlot]: TBLVar read GetStyle write SetStyle</code></p> <p>Type: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_24","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_4","title":"See Also","text":"<ul> <li>TransformedStyle</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_3","title":"Remarks","text":"<p>When reading this property, the original style passed to the rendering context is returned, with its original transformation matrix if it's not a solid color. Consider using <code>TransformedStyle</code> if you want to get a style with the transformation matrix that the rendering context actually uses to render it. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StyleAlpha","title":"StyleAlpha","text":"<p>Fill or stroke alpha value associated with the given style <code>ASlot</code>.</p> <p>Behaves like <code>FillAlpha</code> or <code>StrokeAlpha</code> depending on style. </p> <p><code>property StyleAlpha[const ASlot: TBLContextStyleSlot]: Double read GetStyleAlpha write SetStyleAlpha</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_25","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StyleType","title":"StyleType","text":"<p>The current style type associated with the given style <code>ASlot</code>. </p> <p><code>property StyleType[const ASlot: TBLContextStyleSlot]: TBLObjectType read GetStyleType</code></p> <p>Type: <code>TBLObjectType</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#TargetHeight","title":"TargetHeight","text":"<p>The target height in abstract units (pixels in case of <code>TBLImage</code>). </p> <p><code>property TargetHeight: Double read GetTargetHeight</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#TargetImage","title":"TargetImage","text":"<p>Returns the target image or nil if there is no target image. </p> <p><code>property TargetImage: TBLImage read GetTargetImage</code></p> <p>Type: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_4","title":"Remarks","text":"<p>The rendering context doesn't own the image, but it increases its writer count, which means that the image will not be destroyed even when user destroys it during the rendering (in such case it will be destroyed after the rendering ends when the writer count goes to zero). This means that the rendering context must hold the image and not the <code>TBLImage</code> passed to either the constructor or <code>Start</code> method. So the returned image is not the same as the image passed to <code>Start</code>, but it points to the same underlying data. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#TargetSize","title":"TargetSize","text":"<p>The target size in abstract units (pixels in case of <code>TBLImage</code>). </p> <p><code>property TargetSize: TBLSize read GetTargetSize</code></p> <p>Type: <code>TBLSize</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#TargetWidth","title":"TargetWidth","text":"<p>The target width in abstract units (pixels in case of <code>TBLImage</code>). </p> <p><code>property TargetWidth: Double read GetTargetWidth</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#ThreadCount","title":"ThreadCount","text":"<p>The number of threads that the rendering context uses.</p> <p>If the returned value is zero it means that the rendering is synchronous, otherwise it describes the number of  threads used for asynchronous rendering which include the user thread. For example if the returned value is <code>2</code> it means that the rendering context uses the user thread and one more worker. </p> <p><code>property ThreadCount: Integer read GetThreadCount</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_26","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#TransformedFillStyle","title":"TransformedFillStyle","text":"<p>Transformed fill style.</p> <p>The retrieved style uses a transformation matrix that is a combination of style transformation matrix and the rendering context matrix at a time the style was set. </p> <p><code>property TransformedFillStyle: TBLVar read GetTransformedFillStyle</code></p> <p>Type: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_27","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#TransformedStrokeStyle","title":"TransformedStrokeStyle","text":"<p>Transformed stroke style.</p> <p>The retrieved style uses a transformation matrix that is a combination of style transformation matrix and the rendering context matrix at a time the style was set. </p> <p><code>property TransformedStrokeStyle: TBLVar read GetTransformedStrokeStyle</code></p> <p>Type: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_28","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#TransformedStyle","title":"TransformedStyle","text":"<p>The styles associated with the given style <code>ASlot</code>.</p> <p>The retrieved style uses a transformation matrix that is a combination of style transformation matrix and the rendering context matrix at a time the style was set. </p> <p><code>property TransformedStyle[const ASlot: TBLContextStyleSlot]: TBLVar read GetTransformedStyle</code></p> <p>Type: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_29","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#UserTransform","title":"UserTransform","text":"<p>User transformation matrix.</p> <p>User matrix contains all transformations that happened to the rendering context unless the context was restored or <code>UserToMeta</code> was called. </p> <p><code>property UserTransform: TBLMatrix2D read GetUserTransform write SetUserTransform</code></p> <p>Type: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_30","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_5","title":"See Also","text":"<ul> <li>UserToMeta</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_5","title":"Remarks","text":"<p>Setting this property only assigns the user transformation matrix, which means that the meta transformation matrix is kept as is. This means that the final transformation matrix will be recalculated based on the given <code>transform</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLContext/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor.</p> <p>Creates a weak-copy of the <code>ASrc</code> rendering context by increasing it's internal reference counter. This context and <code>ASrc</code> would point to the same data and would be otherwise identical. Any change to <code>ASrc</code> would also affect this context.</p> <p>This operator is mostly provided for users that may keep a global reference to the same rendering context, for example, otherwise sharing is not that useful as the rendering context has states that are manipulated during rendering.</p> <p>Two weak copies of the same rendering context cannot be used by different threads simultaneously. </p> <p><code>constructor Assign(var ADest: TBLContext; const ASrc: TBLContext); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLContext</code></p> <p><code>ASrc</code>: <code>TBLContext</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_31","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Create_0","title":"<code>Create</code>","text":"<p>Creates a new rendering context for rendering to the image <code>ATarget</code>.</p> <p>This is an advanced constructor that can be used to create a rendering context with additional parameters. These parameters can be used to specify the number of threads to be used during rendering and to select other features. </p> <p><code>constructor Create(const ATarget: TBLImage; const ACreateInfo: TBLContextCreateInfo); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1","title":"Parameters","text":"<p><code>ATarget</code>: <code>TBLImage</code></p> <p><code>ACreateInfo</code>: <code>TBLContextCreateInfo</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Create_1","title":"<code>Create</code>","text":"<p>Creates a new rendering context for rendering to the image <code>ATarget</code>.</p> <p>This is a simplified constructor that can be used to create a rendering context without any additional parameters, which means that the rendering context will use a single-threaded synchronous rendering. </p> <p><code>constructor Create(const ATarget: TBLImage); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_2","title":"Parameters","text":"<p><code>ATarget</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_32","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the rendering context.</p> <p>Waits for all operations, detaches the target from the rendering context and then destroys it. Does nothing if the context is not initialized. </p> <p><code>destructor Finalize(var ADest: TBLContext)</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_3","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLContext</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_33","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_6","title":"Remarks","text":"<p>Destroying the rendering context would always internally call <code>flush(BL_CONTEXT_FLUSH_SYNC)</code>, which would flush the render calls queue in case multi-threaded rendering is used. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default constructed rendering context.</p> <p>Default constructed means that the instance is valid, but uninitialized, which means the rendering context does not have attached any target. Any attempt to use uninitialized context results in a <code>TBLResult.NotInitialized</code> error. </p> <p><code>constructor Initialize(out ADest: TBLContext)</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_4","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLContext</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_34","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLContext/#Equal_0","title":"Equal(TBLContext, TBLContext)","text":"<p>Returns True if two contexts are equal. </p> <p><code>class operator Equal(const ALeft, ARight: TBLContext): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLContext</code></p> <p><code>ARight</code>: <code>TBLContext</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Equal_1","title":"Equal(TBLContext, Pointer)","text":"<p>Used to compare against <code>nil</code> (null or invalid context). </p> <p><code>class operator Equal(const ALeft: TBLContext; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLContext</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#NotEqual_0","title":"NotEqual(TBLContext, TBLContext)","text":"<p>Returns True if two font contexts are not equal. </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLContext): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_7","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLContext</code></p> <p><code>ARight</code>: <code>TBLContext</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#NotEqual_1","title":"NotEqual(TBLContext, Pointer)","text":"<p>Used to compare against <code>nil</code> (null or invalid context). </p> <p><code>class operator NotEqual(const ALeft: TBLContext; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_8","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLContext</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLContext/#ApplyTransform","title":"ApplyTransform(TBLMatrix2D)","text":"<p>Transforms the user transformation matrix by <code>ATransform</code>. </p> <p><code>procedure ApplyTransform(const ATransform: TBLMatrix2D); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_35","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_9","title":"Parameters","text":"<p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#BlitImage_0","title":"BlitImage(TBLRect, TBLImage, TBLRect)","text":"<p>Blits an area of source image <code>ASrc</code> specified by <code>ASrcArea</code> scaled to fit into <code>ARect</code> rectangle (floating point coordinates). </p> <p><code>procedure BlitImage(const ARect: TBLRect; const ASrc: TBLImage; const ASrcArea: TBLRect); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_36","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_10","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ASrc</code>: <code>TBLImage</code></p> <p><code>ASrcArea</code>: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#BlitImage_1","title":"BlitImage(TBLRect, TBLImage)","text":"<p>Blits a source image <code>ASrc</code> scaled to fit into <code>ARect</code> rectangle (floating point coordinates). </p> <p><code>procedure BlitImage(const ARect: TBLRect; const ASrc: TBLImage); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_37","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_11","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ASrc</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#BlitImage_2","title":"BlitImage(TBLRectI, TBLImage, TBLRectI)","text":"<p>Blits an area of source image <code>ASrc</code> specified by <code>ASrcArea</code> scaled to fit into <code>ARect</code> rectangle (integer coordinates). </p> <p><code>procedure BlitImage(const ARect: TBLRectI; const ASrc: TBLImage; const ASrcArea: TBLRectI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_38","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_12","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>ASrc</code>: <code>TBLImage</code></p> <p><code>ASrcArea</code>: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#BlitImage_3","title":"BlitImage(TBLRectI, TBLImage)","text":"<p>Blits a source image <code>ASrc</code> scaled to fit into <code>ARect</code> rectangle (integer coordinates). </p> <p><code>procedure BlitImage(const ARect: TBLRectI; const ASrc: TBLImage); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_39","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_13","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>ASrc</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#BlitImage_4","title":"BlitImage(TBLPoint, TBLImage, TBLRect)","text":"<p>Blits an area in source image <code>ASrc</code> specified by <code>ASrcArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates). </p> <p><code>procedure BlitImage(const AOrigin: TBLPoint; const ASrc: TBLImage; const ASrcArea: TBLRect); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_40","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_14","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>ASrc</code>: <code>TBLImage</code></p> <p><code>ASrcArea</code>: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#BlitImage_5","title":"BlitImage(TBLPoint, TBLImage)","text":"<p>Blits source image <code>ASrc</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates). </p> <p><code>procedure BlitImage(const AOrigin: TBLPoint; const ASrc: TBLImage); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_41","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_15","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>ASrc</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#BlitImage_6","title":"BlitImage(TBLPointI, TBLImage, TBLRectI)","text":"<p>Blits an area in source image <code>ASrc</code> specified by <code>ASrcArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates). </p> <p><code>procedure BlitImage(const AOrigin: TBLPointI; const ASrc: TBLImage; const ASrcArea: TBLRectI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_42","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_16","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>ASrc</code>: <code>TBLImage</code></p> <p><code>ASrcArea</code>: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#BlitImage_7","title":"BlitImage(TBLPointI, TBLImage)","text":"<p>Blits source image <code>ASrc</code> at coordinates specified by <code>AOrigin</code> (integer coordinates). </p> <p><code>procedure BlitImage(const AOrigin: TBLPointI; const ASrc: TBLImage); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_43","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_17","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>ASrc</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#ClearAll","title":"ClearAll","text":"<p>Clear everything to a transparent black, which is the same operation as temporarily setting the composition operator to TBLCompOp.Clear and then filling everything by <code>FillAll</code>. </p> <p><code>procedure ClearAll; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_44","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_6","title":"See Also","text":"<ul> <li>TBLCompOp</li> <li>FillAll</li> <li>TBLFormat</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_7","title":"Remarks","text":"<p>If the target surface doesn't have alpha, but has X component, like <code>TBLFormat.Xrgb32</code>, the <code>X</code> component would be set to <code>1.0</code>, which would translate to <code>$FF</code> in case of \\ref <code>TBLFormat.Xrgb32</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#ClearRect_0","title":"ClearRect(Double, Double, Double, Double)","text":"<p>Clears a rectangle <code>[AX, AY, AW, AH]</code> (floating-point coordinates) to a transparent black, which is the same operation as temporarily setting the composition operator to 'TBLCompOp.Clear<code>and then calling</code>FillRect(AX, AY, AW, AH)`. </p> <p><code>procedure ClearRect(const AX, AY, AW, AH: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_45","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_18","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_7","title":"See Also","text":"<ul> <li>TBLCompOp</li> <li>FillRect</li> <li>TBLFormat</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_8","title":"Remarks","text":"<p>If the target surface doesn't have alpha, but has X component, like <code>TBLFormat.Xrgb32</code>, the <code>X</code> component would be set to <code>1.0</code>, which would translate to <code>$FF</code> in case of \\ref <code>TBLFormat.Xrgb32</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#ClearRect_1","title":"ClearRect(TBLRect)","text":"<p>Clears a rectangle <code>ARect</code> (floating-point coordinates) to a transparent black, which is the same operation as temporarily setting the composition operator to <code>TBLCompOp.Clear</code> and then calling <code>FillRect(ARect)</code>. </p> <p><code>procedure ClearRect(const ARect: TBLRect); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_46","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_19","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_8","title":"See Also","text":"<ul> <li>TBLCompOp</li> <li>FillRect</li> <li>TBLFormat</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_9","title":"Remarks","text":"<p>If the target surface doesn't have alpha, but has X component, like <code>TBLFormat.Xrgb32</code>, the <code>X</code> component would be set to <code>1.0</code>, which would translate to <code>$FF</code> in case of \\ref <code>TBLFormat.Xrgb32</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#ClearRect_2","title":"ClearRect(TBLRectI)","text":"<p>Clears a rectangle <code>ARect</code> (integer coordinates) to a transparent black, which is the same operation as temporarily setting the composition operator to <code>TBLCompOp.Clear</code> and then calling <code>FillRect(ARect)</code>. </p> <p><code>procedure ClearRect(const ARect: TBLRectI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_47","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_20","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_9","title":"See Also","text":"<ul> <li>TBLCompOp</li> <li>FillRect</li> <li>TBLFormat</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_10","title":"Remarks","text":"<p>If the target surface doesn't have alpha, but has X component, like <code>TBLFormat.Xrgb32</code>, the <code>X</code> component would be set to <code>1.0</code>, which would translate to <code>$FF</code> in case of \\ref <code>TBLFormat.Xrgb32</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#ClipToRect_0","title":"ClipToRect(Double, Double, Double, Double)","text":"<p><code>procedure ClipToRect(const AX, AY, AW, AH: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_21","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#ClipToRect_1","title":"ClipToRect(TBLRect)","text":"<p><code>procedure ClipToRect(const ARect: TBLRect); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_22","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#ClipToRect_2","title":"ClipToRect(TBLRectI)","text":"<p><code>procedure ClipToRect(const ARect: TBLRectI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_23","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#DisableFillStyle","title":"DisableFillStyle","text":"<p>Sets fill style to Null, which disables it. </p> <p><code>procedure DisableFillStyle; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_48","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#DisableStrokeStyle","title":"DisableStrokeStyle","text":"<p>Sets stroke style to Null, which disables it. </p> <p><code>procedure DisableStrokeStyle; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_49","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#DisableStyle","title":"DisableStyle(TBLContextStyleSlot)","text":"<p>Sets the given style <code>ASlot</code> to Null, which disables it.</p> <p>Styles set to Null would reject all rendering operations that would otherwise use that style. </p> <p><code>procedure DisableStyle(const ASlot: TBLContextStyleSlot); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_50","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_24","title":"Parameters","text":"<p><code>ASlot</code>: <code>TBLContextStyleSlot</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Equals","title":"Equals(TBLContext)","text":"<p>Returns whether this and <code>AOther</code> point to the same rendering context. </p> <p><code>function Equals(const AOther: TBLContext): Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_25","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLContext</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillAll_0","title":"FillAll(TBLVar)","text":"<p>Fills everything non-clipped with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillAll(const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_51","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_26","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillAll_1","title":"FillAll(TBLGradient)","text":"<p>Fills everything non-clipped with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillAll(const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_52","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_27","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillAll_2","title":"FillAll(TBLPattern)","text":"<p>Fills everything non-clipped with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillAll(const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_53","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_28","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillAll_3","title":"FillAll(TAlphaColor)","text":"<p>Fills everything non-clipped with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillAll(const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_54","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_29","title":"Parameters","text":"<p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillAll_4","title":"FillAll(TBLRgba64)","text":"<p>Fills everything non-clipped with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillAll(const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_55","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_30","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillAll_5","title":"FillAll(TBLRgba32)","text":"<p>Fills everything non-clipped with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillAll(const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_56","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_31","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillAll_6","title":"FillAll(TBLRgba)","text":"<p>Fills everything non-clipped with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillAll(const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_57","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_32","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillAll_7","title":"FillAll","text":"<p>Fills everything non-clipped with the current fill style. </p> <p><code>procedure FillAll; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_58","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_0","title":"FillBox(Double, Double, Double, Double, TBLVar)","text":"<p>Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> </p> <p><code>procedure FillBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_59","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_33","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_1","title":"FillBox(Double, Double, Double, Double, TBLGradient)","text":"<p>Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> </p> <p><code>procedure FillBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_60","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_34","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_2","title":"FillBox(Double, Double, Double, Double, TBLPattern)","text":"<p>Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> </p> <p><code>procedure FillBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_61","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_35","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_3","title":"FillBox(Double, Double, Double, Double, TAlphaColor)","text":"<p>Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> </p> <p><code>procedure FillBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_62","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_36","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_4","title":"FillBox(Double, Double, Double, Double, TBLRgba64)","text":"<p>Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> </p> <p><code>procedure FillBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_63","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_37","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_5","title":"FillBox(Double, Double, Double, Double, TBLRgba32)","text":"<p>Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> </p> <p><code>procedure FillBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_64","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_38","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_6","title":"FillBox(Double, Double, Double, Double, TBLRgba)","text":"<p>Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit fill <code>AStyle</code> </p> <p><code>procedure FillBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_65","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_39","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_7","title":"FillBox(Double, Double, Double, Double)","text":"<p>Fills a box [AX0, AY0, AX1, AY1] (floating point coordinates) with the current fill style. </p> <p><code>procedure FillBox(const AX0, AY0, AX1, AY1: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_66","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_40","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_8","title":"FillBox(TBLBoxI, TBLVar)","text":"<p>Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBoxI; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_67","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_41","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_10","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_11","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_9","title":"FillBox(TBLBoxI, TBLGradient)","text":"<p>Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBoxI; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_68","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_42","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_11","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_12","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_10","title":"FillBox(TBLBoxI, TBLPattern)","text":"<p>Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBoxI; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_69","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_43","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_12","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_13","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_11","title":"FillBox(TBLBoxI, TAlphaColor)","text":"<p>Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBoxI; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_70","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_44","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_13","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_14","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_12","title":"FillBox(TBLBoxI, TBLRgba64)","text":"<p>Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBoxI; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_71","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_45","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_14","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_15","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_13","title":"FillBox(TBLBoxI, TBLRgba32)","text":"<p>Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBoxI; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_72","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_46","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_15","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_16","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_14","title":"FillBox(TBLBoxI, TBLRgba)","text":"<p>Fills a <code>ABox</code> (integer coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBoxI; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_73","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_47","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_16","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_17","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_15","title":"FillBox(TBLBoxI)","text":"<p>Fills a <code>ABox</code> (integer coordinates) with the current fill style. </p> <p><code>procedure FillBox(const ABox: TBLBoxI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_74","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_48","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_17","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_18","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_16","title":"FillBox(TBLBox, TBLVar)","text":"<p>Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBox; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_75","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_49","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_18","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_19","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_17","title":"FillBox(TBLBox, TBLGradient)","text":"<p>Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBox; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_76","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_50","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_19","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_20","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_18","title":"FillBox(TBLBox, TBLPattern)","text":"<p>Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBox; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_77","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_51","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_20","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_21","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_19","title":"FillBox(TBLBox, TAlphaColor)","text":"<p>Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBox; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_78","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_52","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_21","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_22","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_20","title":"FillBox(TBLBox, TBLRgba64)","text":"<p>Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBox; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_79","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_53","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_22","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_23","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_21","title":"FillBox(TBLBox, TBLRgba32)","text":"<p>Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBox; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_80","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_54","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_23","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_24","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_22","title":"FillBox(TBLBox, TBLRgba)","text":"<p>Fills a <code>ABox</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBox(const ABox: TBLBox; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_81","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_55","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_24","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_25","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBox_23","title":"FillBox(TBLBox)","text":"<p>Fills a <code>ABox</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillBox(const ABox: TBLBox); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_82","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_56","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_25","title":"See Also","text":"<ul> <li>FillRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_26","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>FillRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_0","title":"FillBoxArray(PBLBoxI, NativeInt, TBLVar)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_83","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_57","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_1","title":"FillBoxArray(PBLBoxI, NativeInt, TBLGradient)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_84","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_58","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_2","title":"FillBoxArray(PBLBoxI, NativeInt, TBLPattern)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_85","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_59","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_3","title":"FillBoxArray(PBLBoxI, NativeInt, TAlphaColor)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_86","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_60","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_4","title":"FillBoxArray(PBLBoxI, NativeInt, TBLRgba64)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_87","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_61","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_5","title":"FillBoxArray(PBLBoxI, NativeInt, TBLRgba32)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_88","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_62","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_6","title":"FillBoxArray(PBLBoxI, NativeInt, TBLRgba)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_89","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_63","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_7","title":"FillBoxArray(PBLBoxI, NativeInt)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with the default fill style. </p> <p><code>procedure FillBoxArray(const AArray: PBLBoxI; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_90","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_64","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_8","title":"FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLVar)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_91","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_65","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_9","title":"FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLGradient)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_92","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_66","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_10","title":"FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLPattern)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_93","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_67","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_11","title":"FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TAlphaColor)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_94","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_68","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_12","title":"FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLRgba64)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_95","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_69","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_13","title":"FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLRgba32)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_96","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_70","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_14","title":"FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLRgba)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_97","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_71","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_15","title":"FillBoxArray(TBLArrayView&lt;TBLBoxI&gt;)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with the default fill style. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_98","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_72","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_16","title":"FillBoxArray(TArray&lt;TBLBoxI&gt;, TBLVar)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_99","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_73","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_17","title":"FillBoxArray(TArray&lt;TBLBoxI&gt;, TBLGradient)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_100","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_74","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_18","title":"FillBoxArray(TArray&lt;TBLBoxI&gt;, TBLPattern)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_101","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_75","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_19","title":"FillBoxArray(TArray&lt;TBLBoxI&gt;, TAlphaColor)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_102","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_76","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_20","title":"FillBoxArray(TArray&lt;TBLBoxI&gt;, TBLRgba64)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_103","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_77","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_21","title":"FillBoxArray(TArray&lt;TBLBoxI&gt;, TBLRgba32)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_104","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_78","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_22","title":"FillBoxArray(TArray&lt;TBLBoxI&gt;, TBLRgba)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_105","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_79","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_23","title":"FillBoxArray(TArray&lt;TBLBoxI&gt;)","text":"<p>Fills an <code>AArray</code> of boxes (integer coordinates) with the default fill style. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBoxI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_106","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_80","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_24","title":"FillBoxArray(PBLBox, NativeInt, TBLVar)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_107","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_81","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_25","title":"FillBoxArray(PBLBox, NativeInt, TBLGradient)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_108","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_82","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_26","title":"FillBoxArray(PBLBox, NativeInt, TBLPattern)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_109","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_83","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_27","title":"FillBoxArray(PBLBox, NativeInt, TAlphaColor)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_110","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_84","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_28","title":"FillBoxArray(PBLBox, NativeInt, TBLRgba64)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_111","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_85","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_29","title":"FillBoxArray(PBLBox, NativeInt, TBLRgba32)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_112","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_86","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_30","title":"FillBoxArray(PBLBox, NativeInt, TBLRgba)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_113","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_87","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_31","title":"FillBoxArray(PBLBox, NativeInt)","text":"<p>Fills an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with the default fill style. </p> <p><code>procedure FillBoxArray(const AArray: PBLBox; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_114","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_88","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_32","title":"FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLVar)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_115","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_89","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_33","title":"FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLGradient)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_116","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_90","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_34","title":"FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLPattern)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_117","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_91","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_35","title":"FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TAlphaColor)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_118","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_92","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_36","title":"FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLRgba64)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_119","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_93","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_37","title":"FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLRgba32)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_120","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_94","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_38","title":"FillBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLRgba)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_121","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_95","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_39","title":"FillBoxArray(TBLArrayView&lt;TBLBox&gt;)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with the default fill style. </p> <p><code>procedure FillBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_122","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_96","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_40","title":"FillBoxArray(TArray&lt;TBLBox&gt;, TBLVar)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_123","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_97","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_41","title":"FillBoxArray(TArray&lt;TBLBox&gt;, TBLGradient)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_124","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_98","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_42","title":"FillBoxArray(TArray&lt;TBLBox&gt;, TBLPattern)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_125","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_99","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_43","title":"FillBoxArray(TArray&lt;TBLBox&gt;, TAlphaColor)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_126","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_100","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_44","title":"FillBoxArray(TArray&lt;TBLBox&gt;, TBLRgba64)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_127","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_101","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_45","title":"FillBoxArray(TArray&lt;TBLBox&gt;, TBLRgba32)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_128","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_102","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_46","title":"FillBoxArray(TArray&lt;TBLBox&gt;, TBLRgba)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_129","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_103","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillBoxArray_47","title":"FillBoxArray(TArray&lt;TBLBox&gt;)","text":"<p>Fills an <code>AArray</code> of boxes (floating point coordinates) with the default fill style. </p> <p><code>procedure FillBoxArray(const AArray: TArray&lt;TBLBox&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_130","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_104","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_0","title":"FillChord(Double, Double, Double, Double, Double, Double, TBLVar)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_131","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_105","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_1","title":"FillChord(Double, Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_132","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_106","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_2","title":"FillChord(Double, Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_133","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_107","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_3","title":"FillChord(Double, Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_134","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_108","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_4","title":"FillChord(Double, Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_135","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_109","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_5","title":"FillChord(Double, Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_136","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_110","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_6","title":"FillChord(Double, Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_137","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_111","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_7","title":"FillChord(Double, Double, Double, Double, Double, Double)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_138","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_112","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_8","title":"FillChord(Double, Double, Double, Double, Double, TBLVar)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_139","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_113","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_9","title":"FillChord(Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_140","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_114","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_10","title":"FillChord(Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_141","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_115","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_11","title":"FillChord(Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_142","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_116","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_12","title":"FillChord(Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_143","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_117","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_13","title":"FillChord(Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_144","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_118","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_14","title":"FillChord(Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_145","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_119","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_15","title":"FillChord(Double, Double, Double, Double, Double)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillChord(const ACX, ACY, AR, AStart, ASweep: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_146","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_120","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_16","title":"FillChord(TBLArc, TBLVar)","text":"<p>Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const AChord: TBLArc; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_147","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_121","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_17","title":"FillChord(TBLArc, TBLGradient)","text":"<p>Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const AChord: TBLArc; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_148","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_122","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_18","title":"FillChord(TBLArc, TBLPattern)","text":"<p>Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const AChord: TBLArc; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_149","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_123","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_19","title":"FillChord(TBLArc, TAlphaColor)","text":"<p>Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const AChord: TBLArc; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_150","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_124","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_20","title":"FillChord(TBLArc, TBLRgba64)","text":"<p>Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const AChord: TBLArc; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_151","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_125","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_21","title":"FillChord(TBLArc, TBLRgba32)","text":"<p>Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const AChord: TBLArc; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_152","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_126","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_22","title":"FillChord(TBLArc, TBLRgba)","text":"<p>Fills an <code>AChord</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillChord(const AChord: TBLArc; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_153","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_127","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillChord_23","title":"FillChord(TBLArc)","text":"<p>Fills an <code>AChord</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillChord(const AChord: TBLArc); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_154","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_128","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_0","title":"FillCircle(Double, Double, Double, TBLVar)","text":"<p>Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACX, ACY, AR: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_155","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_129","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_1","title":"FillCircle(Double, Double, Double, TBLGradient)","text":"<p>Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACX, ACY, AR: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_156","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_130","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_2","title":"FillCircle(Double, Double, Double, TBLPattern)","text":"<p>Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACX, ACY, AR: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_157","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_131","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_3","title":"FillCircle(Double, Double, Double, TAlphaColor)","text":"<p>Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACX, ACY, AR: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_158","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_132","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_4","title":"FillCircle(Double, Double, Double, TBLRgba64)","text":"<p>Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACX, ACY, AR: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_159","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_133","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_5","title":"FillCircle(Double, Double, Double, TBLRgba32)","text":"<p>Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACX, ACY, AR: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_160","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_134","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_6","title":"FillCircle(Double, Double, Double, TBLRgba)","text":"<p>Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACX, ACY, AR: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_161","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_135","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_7","title":"FillCircle(Double, Double, Double)","text":"<p>Fills a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillCircle(const ACX, ACY, AR: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_162","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_136","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_8","title":"FillCircle(TBLCircle, TBLVar)","text":"<p>Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACircle: TBLCircle; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_163","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_137","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_9","title":"FillCircle(TBLCircle, TBLGradient)","text":"<p>Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACircle: TBLCircle; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_164","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_138","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_10","title":"FillCircle(TBLCircle, TBLPattern)","text":"<p>Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACircle: TBLCircle; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_165","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_139","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_11","title":"FillCircle(TBLCircle, TAlphaColor)","text":"<p>Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACircle: TBLCircle; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_166","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_140","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_12","title":"FillCircle(TBLCircle, TBLRgba64)","text":"<p>Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACircle: TBLCircle; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_167","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_141","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_13","title":"FillCircle(TBLCircle, TBLRgba32)","text":"<p>Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACircle: TBLCircle; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_168","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_142","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_14","title":"FillCircle(TBLCircle, TBLRgba)","text":"<p>Fills an <code>ACircle</code> (floating point coordinates)  with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillCircle(const ACircle: TBLCircle; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_169","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_143","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillCircle_15","title":"FillCircle(TBLCircle)","text":"<p>Fills an <code>ACircle</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillCircle(const ACircle: TBLCircle); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_170","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_144","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_0","title":"FillEllipse(Double, Double, Double, Double, TBLVar)","text":"<p>Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_171","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_145","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_1","title":"FillEllipse(Double, Double, Double, Double, TBLGradient)","text":"<p>Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_172","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_146","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_2","title":"FillEllipse(Double, Double, Double, Double, TBLPattern)","text":"<p>Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_173","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_147","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_3","title":"FillEllipse(Double, Double, Double, Double, TAlphaColor)","text":"<p>Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_174","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_148","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_4","title":"FillEllipse(Double, Double, Double, Double, TBLRgba64)","text":"<p>Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_175","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_149","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_5","title":"FillEllipse(Double, Double, Double, Double, TBLRgba32)","text":"<p>Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_176","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_150","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_6","title":"FillEllipse(Double, Double, Double, Double, TBLRgba)","text":"<p>Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_177","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_151","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_7","title":"FillEllipse(Double, Double, Double, Double)","text":"<p>Fills an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillEllipse(const ACX, ACY, ARX, ARY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_178","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_152","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_8","title":"FillEllipse(TBLEllipse, TBLVar)","text":"<p>Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const AEllipse: TBLEllipse; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_179","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_153","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_9","title":"FillEllipse(TBLEllipse, TBLGradient)","text":"<p>Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const AEllipse: TBLEllipse; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_180","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_154","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_10","title":"FillEllipse(TBLEllipse, TBLPattern)","text":"<p>Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const AEllipse: TBLEllipse; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_181","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_155","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_11","title":"FillEllipse(TBLEllipse, TAlphaColor)","text":"<p>Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const AEllipse: TBLEllipse; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_182","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_156","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_12","title":"FillEllipse(TBLEllipse, TBLRgba64)","text":"<p>Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const AEllipse: TBLEllipse; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_183","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_157","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_13","title":"FillEllipse(TBLEllipse, TBLRgba32)","text":"<p>Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const AEllipse: TBLEllipse; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_184","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_158","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_14","title":"FillEllipse(TBLEllipse, TBLRgba)","text":"<p>Fills an <code>AEllipse</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillEllipse(const AEllipse: TBLEllipse; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_185","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_159","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillEllipse_15","title":"FillEllipse(TBLEllipse)","text":"<p>Fills an <code>AEllipse</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillEllipse(const AEllipse: TBLEllipse); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_186","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_160","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGeometry_0","title":"FillGeometry(TBLGeometryType, Pointer, TBLVar)","text":"<p>Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_187","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_161","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_27","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGeometry_1","title":"FillGeometry(TBLGeometryType, Pointer, TBLGradient)","text":"<p>Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_188","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_162","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_28","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGeometry_2","title":"FillGeometry(TBLGeometryType, Pointer, TBLPattern)","text":"<p>Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_189","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_163","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_29","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGeometry_3","title":"FillGeometry(TBLGeometryType, Pointer, TAlphaColor)","text":"<p>Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_190","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_164","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_30","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGeometry_4","title":"FillGeometry(TBLGeometryType, Pointer, TBLRgba64)","text":"<p>Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_191","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_165","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_31","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGeometry_5","title":"FillGeometry(TBLGeometryType, Pointer, TBLRgba32)","text":"<p>Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_192","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_166","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_32","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGeometry_6","title":"FillGeometry(TBLGeometryType, Pointer, TBLRgba)","text":"<p>Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_193","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_167","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_33","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGeometry_7","title":"FillGeometry(TBLGeometryType, Pointer)","text":"<p>Fills the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with the default fill style. </p> <p><code>procedure FillGeometry(const AType: TBLGeometryType; const AData: Pointer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_194","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_168","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_34","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_0","title":"FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLVar)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_195","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_169","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_1","title":"FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLGradient)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_196","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_170","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_2","title":"FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLPattern)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_197","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_171","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_3","title":"FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TAlphaColor)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_198","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_172","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_4","title":"FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLRgba64)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_199","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_173","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_5","title":"FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLRgba32)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_200","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_174","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_6","title":"FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLRgba)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_201","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_175","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_7","title":"FillGlyphRun(TBLPoint, TBLFont, TBLGlyphRun)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_202","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_176","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_8","title":"FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLVar)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_203","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_177","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_9","title":"FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLGradient)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_204","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_178","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_10","title":"FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLPattern)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_205","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_179","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_11","title":"FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TAlphaColor)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_206","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_180","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_12","title":"FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLRgba64)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_207","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_181","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_13","title":"FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLRgba32)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_208","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_182","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_14","title":"FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLRgba)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_209","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_183","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillGlyphRun_15","title":"FillGlyphRun(TBLPointI, TBLFont, TBLGlyphRun)","text":"<p>Fills an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the current fill style. </p> <p><code>procedure FillGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_210","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_184","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_0","title":"FillMask(TBLPoint, TBLImage, TBLImage, TBLVar)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask, AMaskArea: TBLImage; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_211","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_185","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_1","title":"FillMask(TBLPoint, TBLImage, TBLImage, TBLGradient)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask, AMaskArea: TBLImage; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_212","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_186","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_2","title":"FillMask(TBLPoint, TBLImage, TBLImage, TBLPattern)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask, AMaskArea: TBLImage; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_213","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_187","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_3","title":"FillMask(TBLPoint, TBLImage, TBLImage, TAlphaColor)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask, AMaskArea: TBLImage; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_214","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_188","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_4","title":"FillMask(TBLPoint, TBLImage, TBLImage, TBLRgba64)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask, AMaskArea: TBLImage; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_215","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_189","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_5","title":"FillMask(TBLPoint, TBLImage, TBLImage, TBLRgba32)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask, AMaskArea: TBLImage; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_216","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_190","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_6","title":"FillMask(TBLPoint, TBLImage, TBLImage, TBLRgba)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask, AMaskArea: TBLImage; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_217","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_191","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_7","title":"FillMask(TBLPoint, TBLImage, TBLImage)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask, AMaskArea: TBLImage); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_218","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_192","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_8","title":"FillMask(TBLPoint, TBLImage, TBLVar)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask: TBLImage; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_219","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_193","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_9","title":"FillMask(TBLPoint, TBLImage, TBLGradient)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask: TBLImage; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_220","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_194","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_10","title":"FillMask(TBLPoint, TBLImage, TBLPattern)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask: TBLImage; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_221","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_195","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_11","title":"FillMask(TBLPoint, TBLImage, TAlphaColor)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask: TBLImage; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_222","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_196","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_12","title":"FillMask(TBLPoint, TBLImage, TBLRgba64)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask: TBLImage; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_223","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_197","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_13","title":"FillMask(TBLPoint, TBLImage, TBLRgba32)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask: TBLImage; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_224","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_198","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_14","title":"FillMask(TBLPoint, TBLImage, TBLRgba)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask: TBLImage; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_225","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_199","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_15","title":"FillMask(TBLPoint, TBLImage)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillMask(const AOrigin: TBLPoint; const AMask: TBLImage); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_226","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_200","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AMask</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_16","title":"FillMask(TBLPointI, TBLImage, TBLImage, TBLVar)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask, AMaskArea: TBLImage; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_227","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_201","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_17","title":"FillMask(TBLPointI, TBLImage, TBLImage, TBLGradient)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask, AMaskArea: TBLImage; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_228","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_202","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_18","title":"FillMask(TBLPointI, TBLImage, TBLImage, TBLPattern)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask, AMaskArea: TBLImage; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_229","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_203","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_19","title":"FillMask(TBLPointI, TBLImage, TBLImage, TAlphaColor)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask, AMaskArea: TBLImage; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_230","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_204","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_20","title":"FillMask(TBLPointI, TBLImage, TBLImage, TBLRgba64)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask, AMaskArea: TBLImage; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_231","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_205","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_21","title":"FillMask(TBLPointI, TBLImage, TBLImage, TBLRgba32)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask, AMaskArea: TBLImage; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_232","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_206","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_22","title":"FillMask(TBLPointI, TBLImage, TBLImage, TBLRgba)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask, AMaskArea: TBLImage; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_233","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_207","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_23","title":"FillMask(TBLPointI, TBLImage, TBLImage)","text":"<p>Fills a source <code>AMask</code> image specified by <code>AMaskArea</code> at coordinates specified by <code>AOrigin</code> (integer coordinates) with the current fill style. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask, AMaskArea: TBLImage); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_234","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_208","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AMaskArea</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_24","title":"FillMask(TBLPointI, TBLImage, TBLVar)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask: TBLImage; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_235","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_209","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_25","title":"FillMask(TBLPointI, TBLImage, TBLGradient)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask: TBLImage; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_236","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_210","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_26","title":"FillMask(TBLPointI, TBLImage, TBLPattern)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask: TBLImage; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_237","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_211","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_27","title":"FillMask(TBLPointI, TBLImage, TAlphaColor)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask: TBLImage; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_238","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_212","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_28","title":"FillMask(TBLPointI, TBLImage, TBLRgba64)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask: TBLImage; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_239","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_213","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_29","title":"FillMask(TBLPointI, TBLImage, TBLRgba32)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask: TBLImage; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_240","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_214","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_30","title":"FillMask(TBLPointI, TBLImage, TBLRgba)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask: TBLImage; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_241","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_215","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillMask_31","title":"FillMask(TBLPointI, TBLImage)","text":"<p>Fills a source <code>AMask</code> image at coordinates specified by <code>AOrigin</code> (integer coordinates) with the current fill style. </p> <p><code>procedure FillMask(const AOrigin: TBLPointI; const AMask: TBLImage); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_242","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_216","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AMask</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_0","title":"FillPath(TBLPoint, TBLPath, TBLVar)","text":"<p>Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_243","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_217","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_1","title":"FillPath(TBLPoint, TBLPath, TBLGradient)","text":"<p>Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_244","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_218","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_2","title":"FillPath(TBLPoint, TBLPath, TBLPattern)","text":"<p>Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_245","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_219","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_3","title":"FillPath(TBLPoint, TBLPath, TAlphaColor)","text":"<p>Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_246","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_220","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_4","title":"FillPath(TBLPoint, TBLPath, TBLRgba64)","text":"<p>Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_247","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_221","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_5","title":"FillPath(TBLPoint, TBLPath, TBLRgba32)","text":"<p>Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_248","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_222","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_6","title":"FillPath(TBLPoint, TBLPath, TBLRgba)","text":"<p>Fills the given <code>APath</code> translated by <code>AOrigin</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_249","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_223","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_7","title":"FillPath(TBLPoint, TBLPath)","text":"<p>Fills the given <code>APath</code> translated by <code>AOrigin</code> with the default fill style. </p> <p><code>procedure FillPath(const AOrigin: TBLPoint; const APath: TBLPath); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_250","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_224","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_8","title":"FillPath(TBLPath, TBLVar)","text":"<p>Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const APath: TBLPath; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_251","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_225","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_9","title":"FillPath(TBLPath, TBLGradient)","text":"<p>Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const APath: TBLPath; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_252","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_226","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_10","title":"FillPath(TBLPath, TBLPattern)","text":"<p>Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const APath: TBLPath; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_253","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_227","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_11","title":"FillPath(TBLPath, TAlphaColor)","text":"<p>Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const APath: TBLPath; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_254","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_228","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_12","title":"FillPath(TBLPath, TBLRgba64)","text":"<p>Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const APath: TBLPath; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_255","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_229","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_13","title":"FillPath(TBLPath, TBLRgba32)","text":"<p>Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const APath: TBLPath; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_256","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_230","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_14","title":"FillPath(TBLPath, TBLRgba)","text":"<p>Fills the given <code>APath</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPath(const APath: TBLPath; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_257","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_231","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPath_15","title":"FillPath(TBLPath)","text":"<p>Fills the given <code>APath</code> with the default fill style. </p> <p><code>procedure FillPath(const APath: TBLPath); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_258","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_232","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_0","title":"FillPie(Double, Double, Double, Double, Double, Double, TBLVar)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_259","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_233","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_1","title":"FillPie(Double, Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_260","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_234","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_2","title":"FillPie(Double, Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_261","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_235","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_3","title":"FillPie(Double, Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_262","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_236","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_4","title":"FillPie(Double, Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_263","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_237","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_5","title":"FillPie(Double, Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_264","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_238","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_6","title":"FillPie(Double, Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_265","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_239","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_7","title":"FillPie(Double, Double, Double, Double, Double, Double)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillPie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_266","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_240","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_8","title":"FillPie(Double, Double, Double, Double, Double, TBLVar)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_267","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_241","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_9","title":"FillPie(Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_268","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_242","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_10","title":"FillPie(Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_269","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_243","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_11","title":"FillPie(Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_270","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_244","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_12","title":"FillPie(Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_271","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_245","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_13","title":"FillPie(Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_272","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_246","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_14","title":"FillPie(Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_273","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_247","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_15","title":"FillPie(Double, Double, Double, Double, Double)","text":"<p>Fills a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillPie(const ACX, ACY, AR, AStart, ASweep: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_274","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_248","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_16","title":"FillPie(TBLArc, TBLVar)","text":"<p>Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const APie: TBLArc; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_275","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_249","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_17","title":"FillPie(TBLArc, TBLGradient)","text":"<p>Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const APie: TBLArc; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_276","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_250","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_18","title":"FillPie(TBLArc, TBLPattern)","text":"<p>Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const APie: TBLArc; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_277","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_251","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_19","title":"FillPie(TBLArc, TAlphaColor)","text":"<p>Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const APie: TBLArc; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_278","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_252","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_20","title":"FillPie(TBLArc, TBLRgba64)","text":"<p>Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const APie: TBLArc; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_279","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_253","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_21","title":"FillPie(TBLArc, TBLRgba32)","text":"<p>Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const APie: TBLArc; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_280","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_254","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_22","title":"FillPie(TBLArc, TBLRgba)","text":"<p>Fills an <code>APie</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPie(const APie: TBLArc; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_281","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_255","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPie_23","title":"FillPie(TBLArc)","text":"<p>Fills an <code>APie</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillPie(const APie: TBLArc); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_282","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_256","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_0","title":"FillPoly(PBLPointI, NativeInt, TBLVar)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_283","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_257","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_1","title":"FillPoly(PBLPointI, NativeInt, TBLGradient)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_284","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_258","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_2","title":"FillPoly(PBLPointI, NativeInt, TBLPattern)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_285","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_259","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_3","title":"FillPoly(PBLPointI, NativeInt, TAlphaColor)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_286","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_260","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_4","title":"FillPoly(PBLPointI, NativeInt, TBLRgba64)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_287","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_261","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_5","title":"FillPoly(PBLPointI, NativeInt, TBLRgba32)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_288","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_262","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_6","title":"FillPoly(PBLPointI, NativeInt, TBLRgba)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_289","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_263","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_7","title":"FillPoly(PBLPointI, NativeInt)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with the current fill style. </p> <p><code>procedure FillPoly(const APoly: PBLPointI; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_290","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_264","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_8","title":"FillPoly(TBLArrayView&lt;TBLPointI&gt;, TBLVar)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_291","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_265","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_9","title":"FillPoly(TBLArrayView&lt;TBLPointI&gt;, TBLGradient)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_292","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_266","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_10","title":"FillPoly(TBLArrayView&lt;TBLPointI&gt;, TBLPattern)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_293","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_267","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_11","title":"FillPoly(TBLArrayView&lt;TBLPointI&gt;, TAlphaColor)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_294","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_268","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_12","title":"FillPoly(TBLArrayView&lt;TBLPointI&gt;, TBLRgba64)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_295","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_269","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_13","title":"FillPoly(TBLArrayView&lt;TBLPointI&gt;, TBLRgba32)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_296","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_270","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_14","title":"FillPoly(TBLArrayView&lt;TBLPointI&gt;, TBLRgba)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_297","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_271","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_15","title":"FillPoly(TBLArrayView&lt;TBLPointI&gt;)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with the current fill style. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPointI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_298","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_272","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_16","title":"FillPoly(TArray&lt;TBLPointI&gt;, TBLVar)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_299","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_273","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_17","title":"FillPoly(TArray&lt;TBLPointI&gt;, TBLGradient)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_300","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_274","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_18","title":"FillPoly(TArray&lt;TBLPointI&gt;, TBLPattern)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_301","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_275","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_19","title":"FillPoly(TArray&lt;TBLPointI&gt;, TAlphaColor)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_302","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_276","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_20","title":"FillPoly(TArray&lt;TBLPointI&gt;, TBLRgba64)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_303","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_277","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_21","title":"FillPoly(TArray&lt;TBLPointI&gt;, TBLRgba32)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_304","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_278","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_22","title":"FillPoly(TArray&lt;TBLPointI&gt;, TBLRgba)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_305","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_279","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_23","title":"FillPoly(TArray&lt;TBLPointI&gt;)","text":"<p>Fills a polygon <code>APoly</code> (integer coordinates) with the current fill style. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPointI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_306","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_280","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_24","title":"FillPoly(PBLPoint, NativeInt, TBLVar)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_307","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_281","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_25","title":"FillPoly(PBLPoint, NativeInt, TBLGradient)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_308","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_282","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_26","title":"FillPoly(PBLPoint, NativeInt, TBLPattern)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_309","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_283","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_27","title":"FillPoly(PBLPoint, NativeInt, TAlphaColor)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_310","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_284","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_28","title":"FillPoly(PBLPoint, NativeInt, TBLRgba64)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_311","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_285","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_29","title":"FillPoly(PBLPoint, NativeInt, TBLRgba32)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_312","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_286","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_30","title":"FillPoly(PBLPoint, NativeInt, TBLRgba)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_313","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_287","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_31","title":"FillPoly(PBLPoint, NativeInt)","text":"<p>Fills a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with the current fill style. </p> <p><code>procedure FillPoly(const APoly: PBLPoint; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_314","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_288","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_32","title":"FillPoly(TBLArrayView&lt;TBLPoint&gt;, TBLVar)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_315","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_289","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_33","title":"FillPoly(TBLArrayView&lt;TBLPoint&gt;, TBLGradient)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_316","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_290","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_34","title":"FillPoly(TBLArrayView&lt;TBLPoint&gt;, TBLPattern)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_317","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_291","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_35","title":"FillPoly(TBLArrayView&lt;TBLPoint&gt;, TAlphaColor)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_318","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_292","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_36","title":"FillPoly(TBLArrayView&lt;TBLPoint&gt;, TBLRgba64)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_319","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_293","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_37","title":"FillPoly(TBLArrayView&lt;TBLPoint&gt;, TBLRgba32)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_320","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_294","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_38","title":"FillPoly(TBLArrayView&lt;TBLPoint&gt;, TBLRgba)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_321","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_295","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_39","title":"FillPoly(TBLArrayView&lt;TBLPoint&gt;)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillPoly(const APoly: TBLArrayView&lt;TBLPoint&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_322","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_296","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_40","title":"FillPoly(TArray&lt;TBLPoint&gt;, TBLVar)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_323","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_297","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_41","title":"FillPoly(TArray&lt;TBLPoint&gt;, TBLGradient)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_324","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_298","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_42","title":"FillPoly(TArray&lt;TBLPoint&gt;, TBLPattern)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_325","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_299","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_43","title":"FillPoly(TArray&lt;TBLPoint&gt;, TAlphaColor)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_326","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_300","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_44","title":"FillPoly(TArray&lt;TBLPoint&gt;, TBLRgba64)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_327","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_301","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_45","title":"FillPoly(TArray&lt;TBLPoint&gt;, TBLRgba32)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_328","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_302","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_46","title":"FillPoly(TArray&lt;TBLPoint&gt;, TBLRgba)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_329","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_303","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillPoly_47","title":"FillPoly(TArray&lt;TBLPoint&gt;)","text":"<p>Fills a polygon <code>APoly</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillPoly(const APoly: TArray&lt;TBLPoint&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_330","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_304","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_0","title":"FillRect(Double, Double, Double, Double, TBLVar)","text":"<p>Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const AX, AY, AW, AH: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_331","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_305","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_1","title":"FillRect(Double, Double, Double, Double, TBLGradient)","text":"<p>Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const AX, AY, AW, AH: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_332","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_306","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_2","title":"FillRect(Double, Double, Double, Double, TBLPattern)","text":"<p>Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const AX, AY, AW, AH: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_333","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_307","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_3","title":"FillRect(Double, Double, Double, Double, TAlphaColor)","text":"<p>Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const AX, AY, AW, AH: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_334","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_308","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_4","title":"FillRect(Double, Double, Double, Double, TBLRgba64)","text":"<p>Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const AX, AY, AW, AH: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_335","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_309","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_5","title":"FillRect(Double, Double, Double, Double, TBLRgba32)","text":"<p>Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const AX, AY, AW, AH: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_336","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_310","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_6","title":"FillRect(Double, Double, Double, Double, TBLRgba)","text":"<p>Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const AX, AY, AW, AH: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_337","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_311","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_7","title":"FillRect(Double, Double, Double, Double)","text":"<p>Fills a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillRect(const AX, AY, AW, AH: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_338","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_312","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_8","title":"FillRect(TBLRect, TBLVar)","text":"<p>Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRect; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_339","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_313","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_9","title":"FillRect(TBLRect, TBLGradient)","text":"<p>Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRect; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_340","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_314","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_10","title":"FillRect(TBLRect, TBLPattern)","text":"<p>Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRect; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_341","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_315","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_11","title":"FillRect(TBLRect, TAlphaColor)","text":"<p>Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRect; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_342","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_316","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_12","title":"FillRect(TBLRect, TBLRgba64)","text":"<p>Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRect; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_343","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_317","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_13","title":"FillRect(TBLRect, TBLRgba32)","text":"<p>Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRect; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_344","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_318","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_14","title":"FillRect(TBLRect, TBLRgba)","text":"<p>Fills a rectangle <code>ARect</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRect; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_345","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_319","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_15","title":"FillRect(TBLRect)","text":"<p>Fills a rectangle <code>ARect</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillRect(const ARect: TBLRect); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_346","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_320","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_16","title":"FillRect(TBLRectI, TBLVar)","text":"<p>Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRectI; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_347","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_321","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_17","title":"FillRect(TBLRectI, TBLGradient)","text":"<p>Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRectI; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_348","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_322","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_18","title":"FillRect(TBLRectI, TBLPattern)","text":"<p>Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRectI; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_349","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_323","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_19","title":"FillRect(TBLRectI, TAlphaColor)","text":"<p>Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRectI; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_350","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_324","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_20","title":"FillRect(TBLRectI, TBLRgba64)","text":"<p>Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRectI; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_351","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_325","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_21","title":"FillRect(TBLRectI, TBLRgba32)","text":"<p>Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRectI; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_352","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_326","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_22","title":"FillRect(TBLRectI, TBLRgba)","text":"<p>Fills a rectangle <code>ARect</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRect(const ARect: TBLRectI; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_353","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_327","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRect_23","title":"FillRect(TBLRectI)","text":"<p>Fills a rectangle <code>ARect</code> (integer coordinates) with the current fill style. </p> <p><code>procedure FillRect(const ARect: TBLRectI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_354","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_328","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_0","title":"FillRectArray(PBLRectI, NativeInt, TBLVar)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_355","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_329","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_1","title":"FillRectArray(PBLRectI, NativeInt, TBLGradient)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_356","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_330","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_2","title":"FillRectArray(PBLRectI, NativeInt, TBLPattern)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_357","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_331","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_3","title":"FillRectArray(PBLRectI, NativeInt, TAlphaColor)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_358","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_332","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_4","title":"FillRectArray(PBLRectI, NativeInt, TBLRgba64)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_359","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_333","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_5","title":"FillRectArray(PBLRectI, NativeInt, TBLRgba32)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_360","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_334","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_6","title":"FillRectArray(PBLRectI, NativeInt, TBLRgba)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_361","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_335","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_7","title":"FillRectArray(PBLRectI, NativeInt)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with the default fill style. </p> <p><code>procedure FillRectArray(const AArray: PBLRectI; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_362","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_336","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_8","title":"FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLVar)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_363","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_337","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_9","title":"FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLGradient)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_364","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_338","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_10","title":"FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLPattern)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_365","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_339","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_11","title":"FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TAlphaColor)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_366","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_340","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_12","title":"FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLRgba64)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_367","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_341","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_13","title":"FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLRgba32)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_368","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_342","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_14","title":"FillRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLRgba)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_369","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_343","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_15","title":"FillRectArray(TBLArrayView&lt;TBLRectI&gt;)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with the default fill style. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_370","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_344","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_16","title":"FillRectArray(TArray&lt;TBLRectI&gt;, TBLVar)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_371","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_345","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_17","title":"FillRectArray(TArray&lt;TBLRectI&gt;, TBLGradient)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_372","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_346","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_18","title":"FillRectArray(TArray&lt;TBLRectI&gt;, TBLPattern)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_373","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_347","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_19","title":"FillRectArray(TArray&lt;TBLRectI&gt;, TAlphaColor)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_374","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_348","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_20","title":"FillRectArray(TArray&lt;TBLRectI&gt;, TBLRgba64)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_375","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_349","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_21","title":"FillRectArray(TArray&lt;TBLRectI&gt;, TBLRgba32)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_376","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_350","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_22","title":"FillRectArray(TArray&lt;TBLRectI&gt;, TBLRgba)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_377","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_351","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_23","title":"FillRectArray(TArray&lt;TBLRectI&gt;)","text":"<p>Fills an <code>AArray</code> of rectangles (integer coordinates) with the default fill style. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRectI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_378","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_352","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_24","title":"FillRectArray(PBLRect, NativeInt, TBLVar)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_379","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_353","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_25","title":"FillRectArray(PBLRect, NativeInt, TBLGradient)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_380","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_354","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_26","title":"FillRectArray(PBLRect, NativeInt, TBLPattern)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_381","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_355","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_27","title":"FillRectArray(PBLRect, NativeInt, TAlphaColor)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_382","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_356","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_28","title":"FillRectArray(PBLRect, NativeInt, TBLRgba64)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_383","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_357","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_29","title":"FillRectArray(PBLRect, NativeInt, TBLRgba32)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_384","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_358","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_30","title":"FillRectArray(PBLRect, NativeInt, TBLRgba)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_385","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_359","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_31","title":"FillRectArray(PBLRect, NativeInt)","text":"<p>Fills an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with the default fill style. </p> <p><code>procedure FillRectArray(const AArray: PBLRect; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_386","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_360","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_32","title":"FillRectArray(TBLArrayView&lt;TBLRect&gt;, TBLVar)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_387","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_361","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_33","title":"FillRectArray(TBLArrayView&lt;TBLRect&gt;, TBLGradient)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_388","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_362","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_34","title":"FillRectArray(TBLArrayView&lt;TBLRect&gt;, TBLPattern)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_389","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_363","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_35","title":"FillRectArray(TBLArrayView&lt;TBLRect&gt;, TAlphaColor)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_390","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_364","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_36","title":"FillRectArray(TBLArrayView&lt;TBLRect&gt;, TBLRgba64)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_391","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_365","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_37","title":"FillRectArray(TBLArrayView&lt;TBLRect&gt;, TBLRgba32)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_392","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_366","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_38","title":"FillRectArray(TBLArrayView&lt;TBLRect&gt;, TBLRgba)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_393","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_367","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_39","title":"FillRectArray(TBLArrayView&lt;TBLRect&gt;)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with the default fill style. </p> <p><code>procedure FillRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_394","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_368","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_40","title":"FillRectArray(TArray&lt;TBLRect&gt;, TBLVar)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_395","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_369","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_41","title":"FillRectArray(TArray&lt;TBLRect&gt;, TBLGradient)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_396","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_370","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_42","title":"FillRectArray(TArray&lt;TBLRect&gt;, TBLPattern)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_397","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_371","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_43","title":"FillRectArray(TArray&lt;TBLRect&gt;, TAlphaColor)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_398","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_372","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_44","title":"FillRectArray(TArray&lt;TBLRect&gt;, TBLRgba64)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_399","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_373","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_45","title":"FillRectArray(TArray&lt;TBLRect&gt;, TBLRgba32)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_400","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_374","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_46","title":"FillRectArray(TArray&lt;TBLRect&gt;, TBLRgba)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_401","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_375","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRectArray_47","title":"FillRectArray(TArray&lt;TBLRect&gt;)","text":"<p>Fills an <code>AArray</code> of rectangles (floating point coordinates) with the default fill style. </p> <p><code>procedure FillRectArray(const AArray: TArray&lt;TBLRect&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_402","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_376","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_0","title":"FillRoundRect(Double, Double, Double, Double, Double, Double, TBLVar)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_403","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_377","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_1","title":"FillRoundRect(Double, Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_404","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_378","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_2","title":"FillRoundRect(Double, Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_405","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_379","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_3","title":"FillRoundRect(Double, Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_406","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_380","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_4","title":"FillRoundRect(Double, Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_407","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_381","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_5","title":"FillRoundRect(Double, Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_408","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_382","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_6","title":"FillRoundRect(Double, Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_409","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_383","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_7","title":"FillRoundRect(Double, Double, Double, Double, Double, Double)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with the current fill style. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, ARX, ARY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_410","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_384","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_8","title":"FillRoundRect(Double, Double, Double, Double, Double, TBLVar)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_411","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_385","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_9","title":"FillRoundRect(Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_412","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_386","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_10","title":"FillRoundRect(Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_413","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_387","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_11","title":"FillRoundRect(Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_414","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_388","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_12","title":"FillRoundRect(Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_415","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_389","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_13","title":"FillRoundRect(Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_416","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_390","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_14","title":"FillRoundRect(Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_417","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_391","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_15","title":"FillRoundRect(Double, Double, Double, Double, Double)","text":"<p>Fills a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with the current fill style. </p> <p><code>procedure FillRoundRect(const AX, AY, AW, AH, AR: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_418","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_392","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_16","title":"FillRoundRect(TBLRect, Double, Double, TBLVar)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_419","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_393","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_17","title":"FillRoundRect(TBLRect, Double, Double, TBLGradient)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_420","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_394","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_18","title":"FillRoundRect(TBLRect, Double, Double, TBLPattern)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_421","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_395","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_19","title":"FillRoundRect(TBLRect, Double, Double, TAlphaColor)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_422","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_396","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_20","title":"FillRoundRect(TBLRect, Double, Double, TBLRgba64)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_423","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_397","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_21","title":"FillRoundRect(TBLRect, Double, Double, TBLRgba32)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_424","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_398","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_22","title":"FillRoundRect(TBLRect, Double, Double, TBLRgba)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_425","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_399","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_23","title":"FillRoundRect(TBLRect, Double, Double)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with the current fill style. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const ARX, ARY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_426","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_400","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_24","title":"FillRoundRect(TBLRect, Double, TBLVar)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_427","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_401","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_25","title":"FillRoundRect(TBLRect, Double, TBLGradient)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_428","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_402","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_26","title":"FillRoundRect(TBLRect, Double, TBLPattern)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_429","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_403","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_27","title":"FillRoundRect(TBLRect, Double, TAlphaColor)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_430","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_404","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_28","title":"FillRoundRect(TBLRect, Double, TBLRgba64)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_431","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_405","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_29","title":"FillRoundRect(TBLRect, Double, TBLRgba32)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_432","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_406","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_30","title":"FillRoundRect(TBLRect, Double, TBLRgba)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_433","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_407","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_31","title":"FillRoundRect(TBLRect, Double)","text":"<p>Fills a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with the current fill style. </p> <p><code>procedure FillRoundRect(const ARect: TBLRect; const AR: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_434","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_408","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_32","title":"FillRoundRect(TBLRoundRect, TBLVar)","text":"<p>Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARR: TBLRoundRect; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_435","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_409","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_33","title":"FillRoundRect(TBLRoundRect, TBLGradient)","text":"<p>Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARR: TBLRoundRect; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_436","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_410","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_34","title":"FillRoundRect(TBLRoundRect, TBLPattern)","text":"<p>Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARR: TBLRoundRect; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_437","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_411","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_35","title":"FillRoundRect(TBLRoundRect, TAlphaColor)","text":"<p>Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARR: TBLRoundRect; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_438","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_412","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_36","title":"FillRoundRect(TBLRoundRect, TBLRgba64)","text":"<p>Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARR: TBLRoundRect; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_439","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_413","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_37","title":"FillRoundRect(TBLRoundRect, TBLRgba32)","text":"<p>Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARR: TBLRoundRect; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_440","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_414","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_38","title":"FillRoundRect(TBLRoundRect, TBLRgba)","text":"<p>Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillRoundRect(const ARR: TBLRoundRect; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_441","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_415","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillRoundRect_39","title":"FillRoundRect(TBLRoundRect)","text":"<p>Fills a rounded rectangle <code>ARR</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillRoundRect(const ARR: TBLRoundRect); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_442","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_416","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_0","title":"FillText(TBLPoint, TBLFont, String, TBLVar)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_443","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_417","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_1","title":"FillText(TBLPoint, TBLFont, String, TBLGradient)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_444","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_418","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_2","title":"FillText(TBLPoint, TBLFont, String, TBLPattern)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_445","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_419","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_3","title":"FillText(TBLPoint, TBLFont, String, TAlphaColor)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_446","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_420","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_4","title":"FillText(TBLPoint, TBLFont, String, TBLRgba64)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_447","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_421","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_5","title":"FillText(TBLPoint, TBLFont, String, TBLRgba32)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_448","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_422","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_6","title":"FillText(TBLPoint, TBLFont, String, TBLRgba)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_449","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_423","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_7","title":"FillText(TBLPoint, TBLFont, String)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the default fill style. </p> <p><code>procedure FillText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_450","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_424","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_8","title":"FillText(TBLPointI, TBLFont, String, TBLVar)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_451","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_425","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_9","title":"FillText(TBLPointI, TBLFont, String, TBLGradient)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_452","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_426","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_10","title":"FillText(TBLPointI, TBLFont, String, TBLPattern)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_453","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_427","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_11","title":"FillText(TBLPointI, TBLFont, String, TAlphaColor)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_454","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_428","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_12","title":"FillText(TBLPointI, TBLFont, String, TBLRgba64)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_455","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_429","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_13","title":"FillText(TBLPointI, TBLFont, String, TBLRgba32)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_456","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_430","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_14","title":"FillText(TBLPointI, TBLFont, String, TBLRgba)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_457","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_431","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillText_15","title":"FillText(TBLPointI, TBLFont, String)","text":"<p>Fills string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the default fill style. </p> <p><code>procedure FillText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_458","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_432","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_0","title":"FillTriangle(Double, Double, Double, Double, Double, Double, TBLVar)","text":"<p>Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_459","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_433","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_1","title":"FillTriangle(Double, Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_460","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_434","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_2","title":"FillTriangle(Double, Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_461","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_435","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_3","title":"FillTriangle(Double, Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_462","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_436","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_4","title":"FillTriangle(Double, Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_463","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_437","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_5","title":"FillTriangle(Double, Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_464","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_438","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_6","title":"FillTriangle(Double, Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_465","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_439","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_7","title":"FillTriangle(Double, Double, Double, Double, Double, Double)","text":"<p>Fills a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_466","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_440","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_8","title":"FillTriangle(TBLTriangle, TBLVar)","text":"<p>Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const ATriangle: TBLTriangle; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_467","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_441","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_9","title":"FillTriangle(TBLTriangle, TBLGradient)","text":"<p>Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const ATriangle: TBLTriangle; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_468","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_442","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_10","title":"FillTriangle(TBLTriangle, TBLPattern)","text":"<p>Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const ATriangle: TBLTriangle; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_469","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_443","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_11","title":"FillTriangle(TBLTriangle, TAlphaColor)","text":"<p>Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const ATriangle: TBLTriangle; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_470","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_444","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_12","title":"FillTriangle(TBLTriangle, TBLRgba64)","text":"<p>Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const ATriangle: TBLTriangle; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_471","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_445","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_13","title":"FillTriangle(TBLTriangle, TBLRgba32)","text":"<p>Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const ATriangle: TBLTriangle; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_472","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_446","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_14","title":"FillTriangle(TBLTriangle, TBLRgba)","text":"<p>Fills an <code>ATriangle</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillTriangle(const ATriangle: TBLTriangle; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_473","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_447","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillTriangle_15","title":"FillTriangle(TBLTriangle)","text":"<p>Fills an <code>ATriangle</code> (floating point coordinates) with the current fill style. </p> <p><code>procedure FillTriangle(const ATriangle: TBLTriangle); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_474","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_448","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_0","title":"FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLVar)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_475","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_449","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_1","title":"FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLGradient)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_476","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_450","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_2","title":"FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLPattern)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_477","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_451","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_3","title":"FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TAlphaColor)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_478","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_452","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_4","title":"FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLRgba64)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_479","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_453","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_5","title":"FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLRgba32)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_480","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_454","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_6","title":"FillUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLRgba)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_481","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_455","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_7","title":"FillUtf8Text(TBLPoint, TBLFont, TBLStringView)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the default fill style. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_482","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_456","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_8","title":"FillUtf8Text(TBLPoint, TBLFont, UTF8String, TBLVar)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_483","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_457","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_9","title":"FillUtf8Text(TBLPoint, TBLFont, UTF8String, TBLGradient)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_484","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_458","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_10","title":"FillUtf8Text(TBLPoint, TBLFont, UTF8String, TBLPattern)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_485","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_459","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_11","title":"FillUtf8Text(TBLPoint, TBLFont, UTF8String, TAlphaColor)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_486","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_460","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_12","title":"FillUtf8Text(TBLPoint, TBLFont, UTF8String, TBLRgba64)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_487","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_461","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_13","title":"FillUtf8Text(TBLPoint, TBLFont, UTF8String, TBLRgba32)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_488","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_462","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_14","title":"FillUtf8Text(TBLPoint, TBLFont, UTF8String, TBLRgba)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_489","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_463","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_15","title":"FillUtf8Text(TBLPoint, TBLFont, UTF8String)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the default fill style. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_490","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_464","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_16","title":"FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLVar)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_491","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_465","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_17","title":"FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLGradient)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_492","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_466","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_18","title":"FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLPattern)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_493","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_467","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_19","title":"FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TAlphaColor)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_494","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_468","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_20","title":"FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLRgba64)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_495","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_469","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_21","title":"FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLRgba32)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_496","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_470","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_22","title":"FillUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLRgba)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_497","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_471","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_23","title":"FillUtf8Text(TBLPointI, TBLFont, TBLStringView)","text":"<p>Fills UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the default fill style. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_498","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_472","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_24","title":"FillUtf8Text(TBLPointI, TBLFont, UTF8String, TBLVar)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_499","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_473","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_25","title":"FillUtf8Text(TBLPointI, TBLFont, UTF8String, TBLGradient)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_500","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_474","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_26","title":"FillUtf8Text(TBLPointI, TBLFont, UTF8String, TBLPattern)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_501","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_475","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_27","title":"FillUtf8Text(TBLPointI, TBLFont, UTF8String, TAlphaColor)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_502","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_476","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_28","title":"FillUtf8Text(TBLPointI, TBLFont, UTF8String, TBLRgba64)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_503","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_477","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_29","title":"FillUtf8Text(TBLPointI, TBLFont, UTF8String, TBLRgba32)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_504","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_478","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_30","title":"FillUtf8Text(TBLPointI, TBLFont, UTF8String, TBLRgba)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit fill <code>AStyle</code>. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_505","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_479","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#FillUtf8Text_31","title":"FillUtf8Text(TBLPointI, TBLFont, UTF8String)","text":"<p>Fills UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the default fill style. </p> <p><code>procedure FillUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_506","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_480","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Finish","title":"Finish","text":"<p>Waits for completion of all render commands and detaches the rendering context from the rendering target. After <code>Finish</code> completes the rendering context implementation would be released and replaced by a built-in nil instance (no context). </p> <p><code>procedure Finish; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_507","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_26","title":"See Also","text":"<ul> <li>Flush</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_35","title":"Remarks","text":"<p>Calling <code>Finish</code> would implicitly call <code>Flush(TBLContextFlush.Sync)</code>, which would flush the render calls queue in case multi-threaded rendering is used. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Flush","title":"Flush(TBLContextFlushFlags)","text":"<p>Flushes the context. </p> <p><code>procedure Flush(const AFlags: TBLContextFlushFlags); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_508","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_481","title":"Parameters","text":"<p><code>AFlags</code>: <code>TBLContextFlushFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostRotate_0","title":"PostRotate(Double, TBLPointI)","text":"<p>Rotates the user transformation matrix at <code>AOrigin</code> (integer) by <code>AAngle</code>. </p> <p><code>procedure PostRotate(const AAngle: Double; const AOrigin: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_509","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_482","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_27","title":"See Also","text":"<ul> <li>Rotate</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_36","title":"Remarks","text":"<p>Post-rotation uses a reversed order of matrix multiplication when compared to <code>Rotate</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostRotate_1","title":"PostRotate(Double, TBLPoint)","text":"<p>Rotates the user transformation matrix at <code>AOrigin</code> (floating-point) by <code>AAngle</code>. </p> <p><code>procedure PostRotate(const AAngle: Double; const AOrigin: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_510","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_483","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_28","title":"See Also","text":"<ul> <li>Rotate</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_37","title":"Remarks","text":"<p>Post-rotation uses a reversed order of matrix multiplication when compared to <code>Rotate</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostRotate_2","title":"PostRotate(Double, Double, Double)","text":"<p>Rotates the user transformation matrix at <code>[AX, AY]</code> by <code>AAngle</code>. </p> <p><code>procedure PostRotate(const AAngle, AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_511","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_484","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_29","title":"See Also","text":"<ul> <li>Rotate</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_38","title":"Remarks","text":"<p>Post-rotation uses a reversed order of matrix multiplication when compared to <code>Rotate</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostRotate_3","title":"PostRotate(Double)","text":"<p>Rotates the user transformation matrix by <code>AAngle</code>. </p> <p><code>procedure PostRotate(const AAngle: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_512","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_485","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_30","title":"See Also","text":"<ul> <li>Rotate</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_39","title":"Remarks","text":"<p>Post-rotation uses a reversed order of matrix multiplication when compared to <code>Rotate</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostScale_0","title":"PostScale(TBLPointI)","text":"<p>Post-scales the user transformation matrix by <code>[AP]</code> (integer). </p> <p><code>procedure PostScale(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_513","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_486","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_31","title":"See Also","text":"<ul> <li>Scale</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_40","title":"Remarks","text":"<p>Post-scale uses a reversed order of matrix multiplication when compared <code>Scale</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostScale_1","title":"PostScale(TBLPoint)","text":"<p>Post-scales the user transformation matrix by <code>[AP]</code> (floating-point). </p> <p><code>procedure PostScale(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_514","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_487","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_32","title":"See Also","text":"<ul> <li>Scale</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_41","title":"Remarks","text":"<p>Post-scale uses a reversed order of matrix multiplication when compared <code>Scale</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostScale_2","title":"PostScale(Double, Double)","text":"<p>Post-scales the user transformation matrix by <code>[AX, AY]</code>. </p> <p><code>procedure PostScale(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_515","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_488","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_33","title":"See Also","text":"<ul> <li>Scale</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_42","title":"Remarks","text":"<p>Post-scale uses a reversed order of matrix multiplication when compared <code>Scale</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostScale_3","title":"PostScale(Double)","text":"<p>Post-scales the user transformation matrix by <code>AXY</code> (both X and Y is scaled by <code>AXY</code>). </p> <p><code>procedure PostScale(const AXY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_516","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_489","title":"Parameters","text":"<p><code>AXY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_34","title":"See Also","text":"<ul> <li>Scale</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_43","title":"Remarks","text":"<p>Post-scale uses a reversed order of matrix multiplication when compared <code>Scale</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostSkew_0","title":"PostSkew(TBLPoint)","text":"<p>Skews the user transformation matrix by <code>[AP]</code> (floating-point). </p> <p><code>procedure PostSkew(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_517","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_490","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_35","title":"See Also","text":"<ul> <li>Skew</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_44","title":"Remarks","text":"<p>Post-skew uses a reversed order of matrix multiplication when compared to <code>Skew</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostSkew_1","title":"PostSkew(Double, Double)","text":"<p>Skews the user transformation matrix by <code>[AX, AY]</code>. </p> <p><code>procedure PostSkew(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_518","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_491","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_36","title":"See Also","text":"<ul> <li>Skew</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_45","title":"Remarks","text":"<p>Post-skew uses a reversed order of matrix multiplication when compared to <code>Skew</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostTransform","title":"PostTransform(TBLMatrix2D)","text":"<p>Transforms the user transformation matrix by <code>ATransform</code>. </p> <p><code>procedure PostTransform(const ATransform: TBLMatrix2D); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_519","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_492","title":"Parameters","text":"<p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_37","title":"See Also","text":"<ul> <li>ApplyTransform</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_46","title":"Remarks","text":"<p>Post-transform uses a reversed order of matrix multiplication when compared to <code>ApplyTransform</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostTranslate_0","title":"PostTranslate(TBLPointI)","text":"<p>Post-Translates the used transformation matrix by <code>[AP]</code> (integer). </p> <p><code>procedure PostTranslate(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_520","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_493","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_38","title":"See Also","text":"<ul> <li>Translate</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_47","title":"Remarks","text":"<p>Post-translation uses a reversed order of matrix multiplication when compared to <code>Translate</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostTranslate_1","title":"PostTranslate(TBLPoint)","text":"<p>Post-Translates the used transformation matrix by <code>[AP]</code> (floating-point). </p> <p><code>procedure PostTranslate(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_521","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_494","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_39","title":"See Also","text":"<ul> <li>Translate</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_48","title":"Remarks","text":"<p>Post-translation uses a reversed order of matrix multiplication when compared to <code>Translate</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#PostTranslate_2","title":"PostTranslate(Double, Double)","text":"<p>Post-translates the used transformation matrix by <code>[AX, AY]</code>. </p> <p><code>procedure PostTranslate(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_522","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_495","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_40","title":"See Also","text":"<ul> <li>Translate</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_49","title":"Remarks","text":"<p>Post-translation uses a reversed order of matrix multiplication when compared to <code>Translate</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Reset","title":"Reset","text":"<p>Resets this rendering context to the default constructed one.</p> <p>Similar behavior to the destructor, but the rendering context will still be a valid object after the call to <code>Reset</code> and would behave like a default constructed context. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_523","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#ResetTransform","title":"ResetTransform","text":"<p>Resets user transformation matrix to identity. </p> <p><code>procedure ResetTransform; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_524","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_50","title":"Remarks","text":"<p>This only resets the user transformation matrix, which means that the meta transformation matrix is kept as is. This means that the final transformation matrix after <code>ResetTransform</code> would be the same as meta transformation matrix. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Restore_0","title":"Restore(TBLContextCookie)","text":"<p>Restores the top-most saved context-state.</p> <p>Possible error conditions:</p> <ul> <li>TBLResult.Success - State was restored successfully.</li> <li>TBLResult.NoStatesToRestore - There are no saved states to restore.</li> <li>TBLResult.NoMatchingCookie - The cookie did't match any saved state. </li> </ul> <p><code>procedure Restore(const ACookie: TBLContextCookie); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_525","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_496","title":"Parameters","text":"<p><code>ACookie</code>: <code>TBLContextCookie</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_41","title":"See Also","text":"<ul> <li>Save</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#Restore_1","title":"Restore","text":"<p>Restores the top-most saved context-state.</p> <p>Possible error conditions:</p> <ul> <li>TBLResult.Success - State was restored successfully.</li> <li>TBLResult.NoStatesToRestore - There are no saved states to restore.</li> <li>TBLResult.NoMatchingCookie - Previous state was saved with cookie, which was not provided. You would need the correct cookie to restore such state. </li> </ul> <p><code>procedure Restore; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_526","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_42","title":"See Also","text":"<ul> <li>Save</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#RestoreClipping","title":"RestoreClipping","text":"<p>Restores clipping to the last saved state or to the context default clipping if there is no saved state.</p> <p>If there are no saved states then it resets clipping completely to the initial state that was used when the rendering context was created. </p> <p><code>procedure RestoreClipping; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_527","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Rotate_0","title":"Rotate(Double, TBLPointI)","text":"<p>Rotates the user transformation matrix at <code>AOrigin</code> (integer) by <code>AAngle</code>. </p> <p><code>procedure Rotate(const AAngle: Double; const AOrigin: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_528","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_497","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Rotate_1","title":"Rotate(Double, TBLPoint)","text":"<p>Rotates the user transformation matrix at <code>AOrigin</code> (floating-point) by <code>AAngle</code>. </p> <p><code>procedure Rotate(const AAngle: Double; const AOrigin: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_529","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_498","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Rotate_2","title":"Rotate(Double, Double, Double)","text":"<p>Rotates the user transformation matrix at <code>[AX, AY]</code> by <code>AAngle</code>. </p> <p><code>procedure Rotate(const AAngle, AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_530","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_499","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Rotate_3","title":"Rotate(Double)","text":"<p>Rotates the user transformation matrix by <code>AAngle</code>. </p> <p><code>procedure Rotate(const AAngle: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_531","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_500","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Save_0","title":"Save(TBLContextCookie)","text":"<p>Saves the current rendering context state and creates a restoration <code>cookie</code>.</p> <p>If you use a <code>cookie</code> to save a state you have to use the same cookie to restore it otherwise the <code>Restore</code> would fail. Please note that cookies are not a means of security, they are provided for making it easier to guarantee that a code that you may not control won't break your context. </p> <p><code>procedure Save(out ACookie: TBLContextCookie); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_532","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_501","title":"Parameters","text":"<p><code>ACookie</code>: <code>TBLContextCookie</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_43","title":"See Also","text":"<ul> <li>Restore</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#Save_1","title":"Save","text":"<p>Saves the current rendering context state.</p> <p>Blend2D uses optimizations that make <code>Save</code> a cheap operation. Only core values are actually saved, others will only be saved if they are modified. This means that consecutive calls to <code>Save</code> and <code>Restore</code> do almost nothing. </p> <p><code>procedure Save; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_533","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_44","title":"See Also","text":"<ul> <li>Restore</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#Scale_0","title":"Scale(TBLPointI)","text":"<p>Scales the user transformation matrix by <code>[AP]</code> (integer). </p> <p><code>procedure Scale(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_534","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_502","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Scale_1","title":"Scale(TBLPoint)","text":"<p>Scales the user transformation matrix by <code>[AP]</code> (floating-point). </p> <p><code>procedure Scale(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_535","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_503","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Scale_2","title":"Scale(Double, Double)","text":"<p>Scales the user transformation matrix by <code>[AX, AY]</code>. </p> <p><code>procedure Scale(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_536","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_504","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Scale_3","title":"Scale(Double)","text":"<p>Scales the user transformation matrix by <code>AXY</code> (both X and Y is scaled by <code>AXY</code>). </p> <p><code>procedure Scale(const AXY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_537","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_505","title":"Parameters","text":"<p><code>AXY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetFillStyle_0","title":"SetFillStyle(TBLVar, TBLContextStyleTransformMode)","text":"<p>Sets fill style.</p> <p>This is a convenience method that allows to control how the given <code>AStyle</code> is transformed. By default, if <code>ATransformMode</code> is not provided, the rendering context combines the style transformation matrix with user transformation matrix, which is compatible with how it transforms geometry. However, if that is undesired, a <code>ATransformMode</code> can override the default operation. </p> <p><code>procedure SetFillStyle(const AStyle: TBLVar; const ATransformMode: TBLContextStyleTransformMode); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_538","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_506","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLVar</code></p> <p><code>ATransformMode</code>: <code>TBLContextStyleTransformMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetFillStyle_1","title":"SetFillStyle(TBLPattern, TBLContextStyleTransformMode)","text":"<p>Sets fill style.</p> <p>This is a convenience method that allows to control how the given <code>AStyle</code> is transformed. By default, if <code>ATransformMode</code> is not provided, the rendering context combines the style transformation matrix with user transformation matrix, which is compatible with how it transforms geometry. However, if that is undesired, a <code>ATransformMode</code> can override the default operation. </p> <p><code>procedure SetFillStyle(const AStyle: TBLPattern; const ATransformMode: TBLContextStyleTransformMode); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_539","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_507","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLPattern</code></p> <p><code>ATransformMode</code>: <code>TBLContextStyleTransformMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetFillStyle_2","title":"SetFillStyle(TBLGradient, TBLContextStyleTransformMode)","text":"<p>Sets fill style.</p> <p>This is a convenience method that allows to control how the given <code>AStyle</code> is transformed. By default, if <code>ATransformMode</code> is not provided, the rendering context combines the style transformation matrix with user transformation matrix, which is compatible with how it transforms geometry. However, if that is undesired, a <code>ATransformMode</code> can override the default operation. </p> <p><code>procedure SetFillStyle(const AStyle: TBLGradient; const ATransformMode: TBLContextStyleTransformMode); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_540","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_508","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLGradient</code></p> <p><code>ATransformMode</code>: <code>TBLContextStyleTransformMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetFillStyle_4","title":"SetFillStyle(TBLPattern)","text":"<p>Sets fill style. </p> <p><code>procedure SetFillStyle(const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_541","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_509","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetFillStyle_5","title":"SetFillStyle(TBLGradient)","text":"<p>Sets fill style. </p> <p><code>procedure SetFillStyle(const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_542","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_510","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetFillStyle_6","title":"SetFillStyle(TBLRgba64)","text":"<p>Sets fill style. </p> <p><code>procedure SetFillStyle(const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_543","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_511","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetFillStyle_7","title":"SetFillStyle(TAlphaColor)","text":"<p>Sets fill style. </p> <p><code>procedure SetFillStyle(const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_544","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_512","title":"Parameters","text":"<p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetFillStyle_8","title":"SetFillStyle(TBLRgba32)","text":"<p>Sets fill style. </p> <p><code>procedure SetFillStyle(const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_545","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_513","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetFillStyle_9","title":"SetFillStyle(TBLRgba)","text":"<p>Sets fill style. </p> <p><code>procedure SetFillStyle(const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_546","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_514","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetHint","title":"SetHint(TBLContextHint, Integer)","text":"<p>Sets the given rendering hint <code>AHintType</code> to <code>AValue</code>. </p> <p><code>procedure SetHint(const AHintType: TBLContextHint; const AValue: Integer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_547","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_515","title":"Parameters","text":"<p><code>AHintType</code>: <code>TBLContextHint</code></p> <p><code>AValue</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStrokeCap","title":"SetStrokeCap(TBLStrokeCapPosition, TBLStrokeCap)","text":"<p>Sets stroke cap of the specified <code>APosition</code> to <code>AStrokeCap</code>. </p> <p><code>procedure SetStrokeCap(const APosition: TBLStrokeCapPosition; const AStrokeCap: TBLStrokeCap); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_548","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_516","title":"Parameters","text":"<p><code>APosition</code>: <code>TBLStrokeCapPosition</code></p> <p><code>AStrokeCap</code>: <code>TBLStrokeCap</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStrokeCaps","title":"SetStrokeCaps(TBLStrokeCap)","text":"<p>Sets all stroke caps to <code>AStrokeCap</code>. </p> <p><code>procedure SetStrokeCaps(const AStrokeCap: TBLStrokeCap); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_549","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_517","title":"Parameters","text":"<p><code>AStrokeCap</code>: <code>TBLStrokeCap</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStrokeStyle_0","title":"SetStrokeStyle(TBLVar, TBLContextStyleTransformMode)","text":"<p>Sets stroke style.</p> <p>This is a convenience method that allows to control how the given <code>AStyle</code> is transformed. By default, if <code>ATransformMode</code> is not provided, the rendering context combines the style transformation matrix with user transformation matrix, which is compatible with how it transforms geometry. However, if that is undesired, a <code>ATransformMode</code> can override the default operation. </p> <p><code>procedure SetStrokeStyle(const AStyle: TBLVar; const ATransformMode: TBLContextStyleTransformMode); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_550","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_518","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLVar</code></p> <p><code>ATransformMode</code>: <code>TBLContextStyleTransformMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStrokeStyle_1","title":"SetStrokeStyle(TBLPattern, TBLContextStyleTransformMode)","text":"<p>Sets stroke style.</p> <p>This is a convenience method that allows to control how the given <code>AStyle</code> is transformed. By default, if <code>ATransformMode</code> is not provided, the rendering context combines the style transformation matrix with user transformation matrix, which is compatible with how it transforms geometry. However, if that is undesired, a <code>ATransformMode</code> can override the default operation. </p> <p><code>procedure SetStrokeStyle(const AStyle: TBLPattern; const ATransformMode: TBLContextStyleTransformMode); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_551","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_519","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLPattern</code></p> <p><code>ATransformMode</code>: <code>TBLContextStyleTransformMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStrokeStyle_2","title":"SetStrokeStyle(TBLGradient, TBLContextStyleTransformMode)","text":"<p>Sets stroke style.</p> <p>This is a convenience method that allows to control how the given <code>AStyle</code> is transformed. By default, if <code>ATransformMode</code> is not provided, the rendering context combines the style transformation matrix with user transformation matrix, which is compatible with how it transforms geometry. However, if that is undesired, a <code>ATransformMode</code> can override the default operation. </p> <p><code>procedure SetStrokeStyle(const AStyle: TBLGradient; const ATransformMode: TBLContextStyleTransformMode); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_552","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_520","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLGradient</code></p> <p><code>ATransformMode</code>: <code>TBLContextStyleTransformMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStrokeStyle_4","title":"SetStrokeStyle(TBLPattern)","text":"<p>Sets stroke style. </p> <p><code>procedure SetStrokeStyle(const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_553","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_521","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStrokeStyle_5","title":"SetStrokeStyle(TBLGradient)","text":"<p>Sets stroke style. </p> <p><code>procedure SetStrokeStyle(const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_554","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_522","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStrokeStyle_6","title":"SetStrokeStyle(TAlphaColor)","text":"<p>Sets stroke style. </p> <p><code>procedure SetStrokeStyle(const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_555","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_523","title":"Parameters","text":"<p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStrokeStyle_7","title":"SetStrokeStyle(TBLRgba64)","text":"<p>Sets stroke style. </p> <p><code>procedure SetStrokeStyle(const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_556","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_524","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStrokeStyle_8","title":"SetStrokeStyle(TBLRgba32)","text":"<p>Sets stroke style. </p> <p><code>procedure SetStrokeStyle(const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_557","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_525","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStrokeStyle_9","title":"SetStrokeStyle(TBLRgba)","text":"<p>Sets stroke style. </p> <p><code>procedure SetStrokeStyle(const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_558","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_526","title":"Parameters","text":"<p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStyle_0","title":"SetStyle(TBLContextStyleSlot, TBLVar, TBLContextStyleTransformMode)","text":"<p>Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation and applied <code>ATransformMode</code>.</p> <p>This is a convenience method that allows to control how the given <code>AStyle</code> is transformed. By default, if <code>ATransformMode</code> is not provided, the rendering context combines the style transformation matrix with user transformation matrix, which is compatible with how it transforms geometry. However, if that is undesired, a <code>ATransformMode</code> can override the default operation. </p> <p><code>procedure SetStyle(const ASlot: TBLContextStyleSlot; const AStyle: TBLVar; const ATransformMode: TBLContextStyleTransformMode); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_559","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_527","title":"Parameters","text":"<p><code>ASlot</code>: <code>TBLContextStyleSlot</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p> <p><code>ATransformMode</code>: <code>TBLContextStyleTransformMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStyle_1","title":"SetStyle(TBLContextStyleSlot, TBLPattern, TBLContextStyleTransformMode)","text":"<p>Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation and applied <code>ATransformMode</code>.</p> <p>This is a convenience method that allows to control how the given <code>AStyle</code> is transformed. By default, if <code>ATransformMode</code> is not provided, the rendering context combines the style transformation matrix with user transformation matrix, which is compatible with how it transforms geometry. However, if that is undesired, a <code>ATransformMode</code> can override the default operation. </p> <p><code>procedure SetStyle(const ASlot: TBLContextStyleSlot; const AStyle: TBLPattern; const ATransformMode: TBLContextStyleTransformMode); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_560","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_528","title":"Parameters","text":"<p><code>ASlot</code>: <code>TBLContextStyleSlot</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p> <p><code>ATransformMode</code>: <code>TBLContextStyleTransformMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStyle_2","title":"SetStyle(TBLContextStyleSlot, TBLGradient, TBLContextStyleTransformMode)","text":"<p>Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation and applied <code>ATransformMode</code>.</p> <p>This is a convenience method that allows to control how the given <code>AStyle</code> is transformed. By default, if <code>ATransformMode</code> is not provided, the rendering context combines the style transformation matrix with user transformation matrix, which is compatible with how it transforms geometry. However, if that is undesired, a <code>ATransformMode</code> can override the default operation. </p> <p><code>procedure SetStyle(const ASlot: TBLContextStyleSlot; const AStyle: TBLGradient; const ATransformMode: TBLContextStyleTransformMode); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_561","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_529","title":"Parameters","text":"<p><code>ASlot</code>: <code>TBLContextStyleSlot</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p> <p><code>ATransformMode</code>: <code>TBLContextStyleTransformMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStyle_3","title":"SetStyle(TBLContextStyleSlot, TBLVar)","text":"<p>Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. </p> <p><code>procedure SetStyle(const ASlot: TBLContextStyleSlot; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_562","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_530","title":"Parameters","text":"<p><code>ASlot</code>: <code>TBLContextStyleSlot</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStyle_4","title":"SetStyle(TBLContextStyleSlot, TBLPattern)","text":"<p>Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. </p> <p><code>procedure SetStyle(const ASlot: TBLContextStyleSlot; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_563","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_531","title":"Parameters","text":"<p><code>ASlot</code>: <code>TBLContextStyleSlot</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStyle_5","title":"SetStyle(TBLContextStyleSlot, TBLGradient)","text":"<p>Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. </p> <p><code>procedure SetStyle(const ASlot: TBLContextStyleSlot; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_564","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_532","title":"Parameters","text":"<p><code>ASlot</code>: <code>TBLContextStyleSlot</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStyle_6","title":"SetStyle(TBLContextStyleSlot, TAlphaColor)","text":"<p>Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. </p> <p><code>procedure SetStyle(const ASlot: TBLContextStyleSlot; const AColor: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_565","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_533","title":"Parameters","text":"<p><code>ASlot</code>: <code>TBLContextStyleSlot</code></p> <p><code>AColor</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStyle_7","title":"SetStyle(TBLContextStyleSlot, TBLRgba64)","text":"<p>Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. </p> <p><code>procedure SetStyle(const ASlot: TBLContextStyleSlot; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_566","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_534","title":"Parameters","text":"<p><code>ASlot</code>: <code>TBLContextStyleSlot</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStyle_8","title":"SetStyle(TBLContextStyleSlot, TBLRgba32)","text":"<p>Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. </p> <p><code>procedure SetStyle(const ASlot: TBLContextStyleSlot; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_567","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_535","title":"Parameters","text":"<p><code>ASlot</code>: <code>TBLContextStyleSlot</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetStyle_9","title":"SetStyle(TBLContextStyleSlot, TBLRgba)","text":"<p>Sets <code>AStyle</code> to be used with the given style <code>ASlot</code> operation. </p> <p><code>procedure SetStyle(const ASlot: TBLContextStyleSlot; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_568","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_536","title":"Parameters","text":"<p><code>ASlot</code>: <code>TBLContextStyleSlot</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SetTransform","title":"SetTransform(TBLMatrix2D)","text":"<p>Sets user transformation matrix to <code>ATransform</code>. </p> <p><code>procedure SetTransform(const ATransform: TBLMatrix2D); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_569","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_537","title":"Parameters","text":"<p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_51","title":"Remarks","text":"<p>This only assigns the user transformation matrix, which means that the meta transformation matrix is kept as is. This means that the final transformation matrix will be recalculated based on the given <code>transform</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Skew_0","title":"Skew(TBLPoint)","text":"<p>Skews the user transformation matrix by <code>[AP]</code> (floating-point). </p> <p><code>procedure Skew(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_570","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_538","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Skew_1","title":"Skew(Double, Double)","text":"<p>Skews the user transformation matrix by <code>[AX, AY]</code>. </p> <p><code>procedure Skew(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_571","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_539","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Start_0","title":"Start(TBLImage, TBLContextCreateInfo)","text":"<p>Begins rendering to the given <code>AImage</code>.</p> <p>This is an advanced <code>Start</code> method that can be used to create a rendering context with additional parameters. These parameters can be used to specify the number of threads to be used during rendering and to select other features.</p> <p>If this operation succeeds then the rendering context will have exclusive access to the image data. This means that no other renderer can use it during rendering. </p> <p><code>procedure Start(const AImage: TBLImage; const ACreateInfo: TBLContextCreateInfo); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_540","title":"Parameters","text":"<p><code>AImage</code>: <code>TBLImage</code></p> <p><code>ACreateInfo</code>: <code>TBLContextCreateInfo</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Start_1","title":"Start(TBLImage)","text":"<p>Begins rendering to the given <code>AImage</code>.</p> <p>This is a simplified <code>Start</code> method that can be used to create a rendering context without any additional parameters, which means that the rendering context will use a single-threaded synchronous rendering.</p> <p>If this operation succeeds then the rendering context will have exclusive access to the image data. This means that no other renderer can use it during rendering. </p> <p><code>procedure Start(const AImage: TBLImage); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_572","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_541","title":"Parameters","text":"<p><code>AImage</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_0","title":"StrokeArc(Double, Double, Double, Double, Double, Double, TBLVar)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_573","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_542","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_1","title":"StrokeArc(Double, Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_574","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_543","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_2","title":"StrokeArc(Double, Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_575","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_544","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_3","title":"StrokeArc(Double, Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_576","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_545","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_4","title":"StrokeArc(Double, Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_577","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_546","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_5","title":"StrokeArc(Double, Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_578","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_547","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_6","title":"StrokeArc(Double, Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_579","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_548","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_7","title":"StrokeArc(Double, Double, Double, Double, Double, Double)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeArc(const ACX, ACY, ARX, ARY, AStart, ASweep: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_580","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_549","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_8","title":"StrokeArc(Double, Double, Double, Double, Double, TBLVar)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_581","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_550","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_9","title":"StrokeArc(Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_582","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_551","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_10","title":"StrokeArc(Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_583","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_552","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_11","title":"StrokeArc(Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_584","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_553","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_12","title":"StrokeArc(Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_585","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_554","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_13","title":"StrokeArc(Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_586","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_555","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_14","title":"StrokeArc(Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_587","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_556","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_15","title":"StrokeArc(Double, Double, Double, Double, Double)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeArc(const ACX, ACY, AR, AStart, ASweep: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_588","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_557","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_16","title":"StrokeArc(TBLArc, TBLVar)","text":"<p>Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const AArc: TBLArc; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_589","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_558","title":"Parameters","text":"<p><code>AArc</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_17","title":"StrokeArc(TBLArc, TBLGradient)","text":"<p>Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const AArc: TBLArc; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_590","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_559","title":"Parameters","text":"<p><code>AArc</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_18","title":"StrokeArc(TBLArc, TBLPattern)","text":"<p>Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const AArc: TBLArc; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_591","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_560","title":"Parameters","text":"<p><code>AArc</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_19","title":"StrokeArc(TBLArc, TAlphaColor)","text":"<p>Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const AArc: TBLArc; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_592","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_561","title":"Parameters","text":"<p><code>AArc</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_20","title":"StrokeArc(TBLArc, TBLRgba64)","text":"<p>Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const AArc: TBLArc; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_593","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_562","title":"Parameters","text":"<p><code>AArc</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_21","title":"StrokeArc(TBLArc, TBLRgba32)","text":"<p>Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const AArc: TBLArc; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_594","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_563","title":"Parameters","text":"<p><code>AArc</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_22","title":"StrokeArc(TBLArc, TBLRgba)","text":"<p>Strokes an <code>AArc</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeArc(const AArc: TBLArc; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_595","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_564","title":"Parameters","text":"<p><code>AArc</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeArc_23","title":"StrokeArc(TBLArc)","text":"<p>Strokes an <code>AArc</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeArc(const AArc: TBLArc); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_596","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_565","title":"Parameters","text":"<p><code>AArc</code>: <code>TBLArc</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_0","title":"StrokeBox(Double, Double, Double, Double, TBLVar)","text":"<p>Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> </p> <p><code>procedure StrokeBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_597","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_566","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_1","title":"StrokeBox(Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> </p> <p><code>procedure StrokeBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_598","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_567","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_2","title":"StrokeBox(Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> </p> <p><code>procedure StrokeBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_599","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_568","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_3","title":"StrokeBox(Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> </p> <p><code>procedure StrokeBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_600","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_569","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_4","title":"StrokeBox(Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> </p> <p><code>procedure StrokeBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_601","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_570","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_5","title":"StrokeBox(Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> </p> <p><code>procedure StrokeBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_602","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_571","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_6","title":"StrokeBox(Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with an explicit stroke <code>AStyle</code> </p> <p><code>procedure StrokeBox(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_603","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_572","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_7","title":"StrokeBox(Double, Double, Double, Double)","text":"<p>Strokes a box [AX0, AY0, AX1, AY1] (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeBox(const AX0, AY0, AX1, AY1: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_604","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_573","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_8","title":"StrokeBox(TBLBoxI, TBLVar)","text":"<p>Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBoxI; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_605","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_574","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_45","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_52","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_9","title":"StrokeBox(TBLBoxI, TBLGradient)","text":"<p>Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBoxI; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_606","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_575","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_46","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_53","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_10","title":"StrokeBox(TBLBoxI, TBLPattern)","text":"<p>Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBoxI; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_607","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_576","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_47","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_54","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_11","title":"StrokeBox(TBLBoxI, TAlphaColor)","text":"<p>Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBoxI; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_608","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_577","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_48","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_55","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_12","title":"StrokeBox(TBLBoxI, TBLRgba64)","text":"<p>Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBoxI; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_609","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_578","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_49","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_56","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_13","title":"StrokeBox(TBLBoxI, TBLRgba32)","text":"<p>Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBoxI; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_610","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_579","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_50","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_57","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_14","title":"StrokeBox(TBLBoxI, TBLRgba)","text":"<p>Strokes a <code>ABox</code> (integer coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBoxI; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_611","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_580","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_51","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_58","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_15","title":"StrokeBox(TBLBoxI)","text":"<p>Strokes a <code>ABox</code> (integer coordinates) with the current stroke style. </p> <p><code>procedure StrokeBox(const ABox: TBLBoxI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_612","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_581","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_52","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_59","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_16","title":"StrokeBox(TBLBox, TBLVar)","text":"<p>Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBox; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_613","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_582","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_53","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_60","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_17","title":"StrokeBox(TBLBox, TBLGradient)","text":"<p>Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBox; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_614","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_583","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_54","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_61","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_18","title":"StrokeBox(TBLBox, TBLPattern)","text":"<p>Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBox; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_615","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_584","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_55","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_62","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_19","title":"StrokeBox(TBLBox, TAlphaColor)","text":"<p>Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBox; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_616","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_585","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_56","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_63","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_20","title":"StrokeBox(TBLBox, TBLRgba64)","text":"<p>Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBox; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_617","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_586","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_57","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_64","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_21","title":"StrokeBox(TBLBox, TBLRgba32)","text":"<p>Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBox; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_618","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_587","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_58","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_65","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_22","title":"StrokeBox(TBLBox, TBLRgba)","text":"<p>Strokes a <code>ABox</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBox(const ABox: TBLBox; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_619","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_588","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_59","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_66","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBox_23","title":"StrokeBox(TBLBox)","text":"<p>Strokes a <code>ABox</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeBox(const ABox: TBLBox); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_620","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_589","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_60","title":"See Also","text":"<ul> <li>StrokeRect</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_67","title":"Remarks","text":"<p>Box is defined as <code>[X0, Y0, X1, Y1]</code>, if you need <code>[X, Y, W, H]</code>, use <code>StrokeRect</code> instead. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_0","title":"StrokeBoxArray(PBLBoxI, NativeInt, TBLVar)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_621","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_590","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_1","title":"StrokeBoxArray(PBLBoxI, NativeInt, TBLGradient)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_622","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_591","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_2","title":"StrokeBoxArray(PBLBoxI, NativeInt, TBLPattern)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_623","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_592","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_3","title":"StrokeBoxArray(PBLBoxI, NativeInt, TAlphaColor)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_624","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_593","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_4","title":"StrokeBoxArray(PBLBoxI, NativeInt, TBLRgba64)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_625","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_594","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_5","title":"StrokeBoxArray(PBLBoxI, NativeInt, TBLRgba32)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_626","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_595","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_6","title":"StrokeBoxArray(PBLBoxI, NativeInt, TBLRgba)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_627","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_596","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_7","title":"StrokeBoxArray(PBLBoxI, NativeInt)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (integer coordinates) with the default stroke style. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBoxI; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_628","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_597","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_8","title":"StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLVar)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_629","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_598","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_9","title":"StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLGradient)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_630","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_599","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_10","title":"StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLPattern)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_631","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_600","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_11","title":"StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TAlphaColor)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_632","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_601","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_12","title":"StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLRgba64)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_633","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_602","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_13","title":"StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLRgba32)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_634","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_603","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_14","title":"StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLRgba)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_635","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_604","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_15","title":"StrokeBoxArray(TBLArrayView&lt;TBLBoxI&gt;)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with the default stroke style. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_636","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_605","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_16","title":"StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TBLVar)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_637","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_606","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_17","title":"StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TBLGradient)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_638","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_607","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_18","title":"StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TBLPattern)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_639","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_608","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_19","title":"StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TAlphaColor)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_640","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_609","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_20","title":"StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TBLRgba64)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_641","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_610","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_21","title":"StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TBLRgba32)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_642","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_611","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_22","title":"StrokeBoxArray(TArray&lt;TBLBoxI&gt;, TBLRgba)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_643","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_612","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_23","title":"StrokeBoxArray(TArray&lt;TBLBoxI&gt;)","text":"<p>Strokes an <code>AArray</code> of boxes (integer coordinates) with the default stroke style. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBoxI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_644","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_613","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_24","title":"StrokeBoxArray(PBLBox, NativeInt, TBLVar)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_645","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_614","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_25","title":"StrokeBoxArray(PBLBox, NativeInt, TBLGradient)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_646","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_615","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_26","title":"StrokeBoxArray(PBLBox, NativeInt, TBLPattern)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_647","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_616","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_27","title":"StrokeBoxArray(PBLBox, NativeInt, TAlphaColor)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_648","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_617","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_28","title":"StrokeBoxArray(PBLBox, NativeInt, TBLRgba64)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_649","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_618","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_29","title":"StrokeBoxArray(PBLBox, NativeInt, TBLRgba32)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_650","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_619","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_30","title":"StrokeBoxArray(PBLBox, NativeInt, TBLRgba)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBox; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_651","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_620","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_31","title":"StrokeBoxArray(PBLBox, NativeInt)","text":"<p>Strokes an <code>AArray</code> of boxes or size 'ACount' (floating point coordinates) with the default stroke style. </p> <p><code>procedure StrokeBoxArray(const AArray: PBLBox; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_652","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_621","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_32","title":"StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLVar)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_653","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_622","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_33","title":"StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLGradient)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_654","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_623","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_34","title":"StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLPattern)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_655","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_624","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_35","title":"StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TAlphaColor)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_656","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_625","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_36","title":"StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLRgba64)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_657","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_626","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_37","title":"StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLRgba32)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_658","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_627","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_38","title":"StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLRgba)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_659","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_628","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_39","title":"StrokeBoxArray(TBLArrayView&lt;TBLBox&gt;)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with the default stroke style. </p> <p><code>procedure StrokeBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_660","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_629","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_40","title":"StrokeBoxArray(TArray&lt;TBLBox&gt;, TBLVar)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_661","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_630","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_41","title":"StrokeBoxArray(TArray&lt;TBLBox&gt;, TBLGradient)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_662","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_631","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_42","title":"StrokeBoxArray(TArray&lt;TBLBox&gt;, TBLPattern)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_663","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_632","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_43","title":"StrokeBoxArray(TArray&lt;TBLBox&gt;, TAlphaColor)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_664","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_633","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_44","title":"StrokeBoxArray(TArray&lt;TBLBox&gt;, TBLRgba64)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_665","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_634","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_45","title":"StrokeBoxArray(TArray&lt;TBLBox&gt;, TBLRgba32)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_666","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_635","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_46","title":"StrokeBoxArray(TArray&lt;TBLBox&gt;, TBLRgba)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBox&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_667","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_636","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeBoxArray_47","title":"StrokeBoxArray(TArray&lt;TBLBox&gt;)","text":"<p>Strokes an <code>AArray</code> of boxes (floating point coordinates) with the default stroke style. </p> <p><code>procedure StrokeBoxArray(const AArray: TArray&lt;TBLBox&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_668","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_637","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_0","title":"StrokeChord(Double, Double, Double, Double, Double, Double, TBLVar)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_669","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_638","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_1","title":"StrokeChord(Double, Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_670","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_639","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_2","title":"StrokeChord(Double, Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_671","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_640","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_3","title":"StrokeChord(Double, Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_672","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_641","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_4","title":"StrokeChord(Double, Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_673","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_642","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_5","title":"StrokeChord(Double, Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_674","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_643","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_6","title":"StrokeChord(Double, Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_675","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_644","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_7","title":"StrokeChord(Double, Double, Double, Double, Double, Double)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeChord(const ACX, ACY, ARX, ARY, AStart, ASweep: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_676","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_645","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_8","title":"StrokeChord(Double, Double, Double, Double, Double, TBLVar)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_677","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_646","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_9","title":"StrokeChord(Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_678","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_647","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_10","title":"StrokeChord(Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_679","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_648","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_11","title":"StrokeChord(Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_680","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_649","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_12","title":"StrokeChord(Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_681","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_650","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_13","title":"StrokeChord(Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_682","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_651","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_14","title":"StrokeChord(Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_683","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_652","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_15","title":"StrokeChord(Double, Double, Double, Double, Double)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeChord(const ACX, ACY, AR, AStart, ASweep: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_684","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_653","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_16","title":"StrokeChord(TBLArc, TBLVar)","text":"<p>Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const AChord: TBLArc; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_685","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_654","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_17","title":"StrokeChord(TBLArc, TBLGradient)","text":"<p>Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const AChord: TBLArc; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_686","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_655","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_18","title":"StrokeChord(TBLArc, TBLPattern)","text":"<p>Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const AChord: TBLArc; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_687","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_656","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_19","title":"StrokeChord(TBLArc, TAlphaColor)","text":"<p>Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const AChord: TBLArc; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_688","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_657","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_20","title":"StrokeChord(TBLArc, TBLRgba64)","text":"<p>Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const AChord: TBLArc; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_689","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_658","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_21","title":"StrokeChord(TBLArc, TBLRgba32)","text":"<p>Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const AChord: TBLArc; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_690","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_659","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_22","title":"StrokeChord(TBLArc, TBLRgba)","text":"<p>Strokes an <code>AChord</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeChord(const AChord: TBLArc; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_691","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_660","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeChord_23","title":"StrokeChord(TBLArc)","text":"<p>Strokes an <code>AChord</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeChord(const AChord: TBLArc); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_692","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_661","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_0","title":"StrokeCircle(Double, Double, Double, TBLVar)","text":"<p>Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACX, ACY, AR: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_693","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_662","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_1","title":"StrokeCircle(Double, Double, Double, TBLGradient)","text":"<p>Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACX, ACY, AR: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_694","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_663","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_2","title":"StrokeCircle(Double, Double, Double, TBLPattern)","text":"<p>Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACX, ACY, AR: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_695","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_664","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_3","title":"StrokeCircle(Double, Double, Double, TAlphaColor)","text":"<p>Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACX, ACY, AR: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_696","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_665","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_4","title":"StrokeCircle(Double, Double, Double, TBLRgba64)","text":"<p>Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACX, ACY, AR: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_697","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_666","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_5","title":"StrokeCircle(Double, Double, Double, TBLRgba32)","text":"<p>Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACX, ACY, AR: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_698","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_667","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_6","title":"StrokeCircle(Double, Double, Double, TBLRgba)","text":"<p>Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACX, ACY, AR: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_699","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_668","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_7","title":"StrokeCircle(Double, Double, Double)","text":"<p>Strokes a circle at <code>[ACX, ACY]</code> and radius <code>AR</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeCircle(const ACX, ACY, AR: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_700","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_669","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_8","title":"StrokeCircle(TBLCircle, TBLVar)","text":"<p>Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACircle: TBLCircle; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_701","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_670","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_9","title":"StrokeCircle(TBLCircle, TBLGradient)","text":"<p>Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACircle: TBLCircle; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_702","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_671","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_10","title":"StrokeCircle(TBLCircle, TBLPattern)","text":"<p>Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACircle: TBLCircle; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_703","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_672","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_11","title":"StrokeCircle(TBLCircle, TAlphaColor)","text":"<p>Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACircle: TBLCircle; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_704","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_673","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_12","title":"StrokeCircle(TBLCircle, TBLRgba64)","text":"<p>Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACircle: TBLCircle; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_705","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_674","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_13","title":"StrokeCircle(TBLCircle, TBLRgba32)","text":"<p>Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACircle: TBLCircle; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_706","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_675","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_14","title":"StrokeCircle(TBLCircle, TBLRgba)","text":"<p>Strokes an <code>ACircle</code> (floating point coordinates)  with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeCircle(const ACircle: TBLCircle; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_707","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_676","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeCircle_15","title":"StrokeCircle(TBLCircle)","text":"<p>Strokes an <code>ACircle</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeCircle(const ACircle: TBLCircle); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_708","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_677","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_0","title":"StrokeEllipse(Double, Double, Double, Double, TBLVar)","text":"<p>Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_709","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_678","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_1","title":"StrokeEllipse(Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_710","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_679","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_2","title":"StrokeEllipse(Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_711","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_680","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_3","title":"StrokeEllipse(Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_712","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_681","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_4","title":"StrokeEllipse(Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_713","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_682","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_5","title":"StrokeEllipse(Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_714","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_683","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_6","title":"StrokeEllipse(Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const ACX, ACY, ARX, ARY: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_715","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_684","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_7","title":"StrokeEllipse(Double, Double, Double, Double)","text":"<p>Strokes an ellipse at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeEllipse(const ACX, ACY, ARX, ARY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_716","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_685","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_8","title":"StrokeEllipse(TBLEllipse, TBLVar)","text":"<p>Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const AEllipse: TBLEllipse; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_717","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_686","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_9","title":"StrokeEllipse(TBLEllipse, TBLGradient)","text":"<p>Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const AEllipse: TBLEllipse; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_718","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_687","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_10","title":"StrokeEllipse(TBLEllipse, TBLPattern)","text":"<p>Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const AEllipse: TBLEllipse; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_719","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_688","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_11","title":"StrokeEllipse(TBLEllipse, TAlphaColor)","text":"<p>Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const AEllipse: TBLEllipse; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_720","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_689","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_12","title":"StrokeEllipse(TBLEllipse, TBLRgba64)","text":"<p>Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const AEllipse: TBLEllipse; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_721","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_690","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_13","title":"StrokeEllipse(TBLEllipse, TBLRgba32)","text":"<p>Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const AEllipse: TBLEllipse; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_722","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_691","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_14","title":"StrokeEllipse(TBLEllipse, TBLRgba)","text":"<p>Strokes an <code>AEllipse</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeEllipse(const AEllipse: TBLEllipse; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_723","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_692","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeEllipse_15","title":"StrokeEllipse(TBLEllipse)","text":"<p>Strokes an <code>AEllipse</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeEllipse(const AEllipse: TBLEllipse); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_724","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_693","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGeometry_0","title":"StrokeGeometry(TBLGeometryType, Pointer, TBLVar)","text":"<p>Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_725","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_694","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_68","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGeometry_1","title":"StrokeGeometry(TBLGeometryType, Pointer, TBLGradient)","text":"<p>Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_726","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_695","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_69","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGeometry_2","title":"StrokeGeometry(TBLGeometryType, Pointer, TBLPattern)","text":"<p>Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_727","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_696","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_70","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGeometry_3","title":"StrokeGeometry(TBLGeometryType, Pointer, TAlphaColor)","text":"<p>Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_728","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_697","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_71","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGeometry_4","title":"StrokeGeometry(TBLGeometryType, Pointer, TBLRgba64)","text":"<p>Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_729","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_698","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_72","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGeometry_5","title":"StrokeGeometry(TBLGeometryType, Pointer, TBLRgba32)","text":"<p>Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_730","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_699","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_73","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGeometry_6","title":"StrokeGeometry(TBLGeometryType, Pointer, TBLRgba)","text":"<p>Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGeometry(const AType: TBLGeometryType; const AData: Pointer; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_731","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_700","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_74","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGeometry_7","title":"StrokeGeometry(TBLGeometryType, Pointer)","text":"<p>Strokes the passed geometry specified by geometry <code>AType</code> and <code>AData</code> with the default stroke style. </p> <p><code>procedure StrokeGeometry(const AType: TBLGeometryType; const AData: Pointer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_732","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_701","title":"Parameters","text":"<p><code>AType</code>: <code>TBLGeometryType</code></p> <p><code>AData</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#remarks_75","title":"Remarks","text":"<p>This method provides a low-level interface that can be used in cases in which geometry <code>AType</code> and <code>AData</code> parameters are passed to a wrapper function that just passes them to the rendering context. It's a good way of creating wrappers, but generally low-level for a general purpose use, so please use this with caution. </p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_0","title":"StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLVar)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_733","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_702","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_1","title":"StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLGradient)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_734","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_703","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_2","title":"StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLPattern)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_735","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_704","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_3","title":"StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TAlphaColor)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_736","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_705","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_4","title":"StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLRgba64)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_737","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_706","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_5","title":"StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLRgba32)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_738","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_707","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_6","title":"StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun, TBLRgba)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_739","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_708","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_7","title":"StrokeGlyphRun(TBLPoint, TBLFont, TBLGlyphRun)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPoint; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_740","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_709","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_8","title":"StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLVar)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_741","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_710","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_9","title":"StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLGradient)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_742","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_711","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_10","title":"StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLPattern)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_743","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_712","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_11","title":"StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TAlphaColor)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_744","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_713","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_12","title":"StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLRgba64)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_745","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_714","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_13","title":"StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLRgba32)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_746","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_715","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_14","title":"StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun, TBLRgba)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_747","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_716","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeGlyphRun_15","title":"StrokeGlyphRun(TBLPointI, TBLFont, TBLGlyphRun)","text":"<p>Strokes an <code>AGlyphRun</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the current stroke style. </p> <p><code>procedure StrokeGlyphRun(const AOrigin: TBLPointI; const AFont: TBLFont; const AGlyphRun: TBLGlyphRun); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_748","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_717","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_0","title":"StrokeLine(Double, Double, Double, Double, TBLVar)","text":"<p>Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_749","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_718","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_1","title":"StrokeLine(Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_750","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_719","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_2","title":"StrokeLine(Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_751","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_720","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_3","title":"StrokeLine(Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AX0, AY0, AX1, AY1: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_752","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_721","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_4","title":"StrokeLine(Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_753","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_722","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_5","title":"StrokeLine(Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_754","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_723","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_6","title":"StrokeLine(Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AX0, AY0, AX1, AY1: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_755","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_724","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_7","title":"StrokeLine(Double, Double, Double, Double)","text":"<p>Strokes a line starting at <code>[AX0, AY0]</code> and ending at <code>[AX1, AY1]</code> (floating point coordinates) with the default stroke style. </p> <p><code>procedure StrokeLine(const AX0, AY0, AX1, AY1: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_756","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_725","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_8","title":"StrokeLine(TBLPoint, TBLPoint, TBLVar)","text":"<p>Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AP0, AP1: TBLPoint; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_757","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_726","title":"Parameters","text":"<p><code>AP0</code>: <code>TBLPoint</code></p> <p><code>AP1</code>: <code>TBLPoint</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_9","title":"StrokeLine(TBLPoint, TBLPoint, TBLGradient)","text":"<p>Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AP0, AP1: TBLPoint; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_758","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_727","title":"Parameters","text":"<p><code>AP0</code>: <code>TBLPoint</code></p> <p><code>AP1</code>: <code>TBLPoint</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_10","title":"StrokeLine(TBLPoint, TBLPoint, TBLPattern)","text":"<p>Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AP0, AP1: TBLPoint; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_759","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_728","title":"Parameters","text":"<p><code>AP0</code>: <code>TBLPoint</code></p> <p><code>AP1</code>: <code>TBLPoint</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_11","title":"StrokeLine(TBLPoint, TBLPoint, TAlphaColor)","text":"<p>Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AP0, AP1: TBLPoint; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_760","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_729","title":"Parameters","text":"<p><code>AP0</code>: <code>TBLPoint</code></p> <p><code>AP1</code>: <code>TBLPoint</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_12","title":"StrokeLine(TBLPoint, TBLPoint, TBLRgba64)","text":"<p>Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AP0, AP1: TBLPoint; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_761","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_730","title":"Parameters","text":"<p><code>AP0</code>: <code>TBLPoint</code></p> <p><code>AP1</code>: <code>TBLPoint</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_13","title":"StrokeLine(TBLPoint, TBLPoint, TBLRgba32)","text":"<p>Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AP0, AP1: TBLPoint; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_762","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_731","title":"Parameters","text":"<p><code>AP0</code>: <code>TBLPoint</code></p> <p><code>AP1</code>: <code>TBLPoint</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_14","title":"StrokeLine(TBLPoint, TBLPoint, TBLRgba)","text":"<p>Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const AP0, AP1: TBLPoint; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_763","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_732","title":"Parameters","text":"<p><code>AP0</code>: <code>TBLPoint</code></p> <p><code>AP1</code>: <code>TBLPoint</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_15","title":"StrokeLine(TBLPoint, TBLPoint)","text":"<p>Strokes a line starting at <code>AP0</code> and ending at <code>AP1</code> (floating point coordinates) with the default stroke style. </p> <p><code>procedure StrokeLine(const AP0, AP1: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_764","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_733","title":"Parameters","text":"<p><code>AP0</code>: <code>TBLPoint</code></p> <p><code>AP1</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_16","title":"StrokeLine(TBLLine, TBLVar)","text":"<p>Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const ALine: TBLLine; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_765","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_734","title":"Parameters","text":"<p><code>ALine</code>: <code>TBLLine</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_17","title":"StrokeLine(TBLLine, TBLGradient)","text":"<p>Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const ALine: TBLLine; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_766","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_735","title":"Parameters","text":"<p><code>ALine</code>: <code>TBLLine</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_18","title":"StrokeLine(TBLLine, TBLPattern)","text":"<p>Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const ALine: TBLLine; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_767","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_736","title":"Parameters","text":"<p><code>ALine</code>: <code>TBLLine</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_19","title":"StrokeLine(TBLLine, TAlphaColor)","text":"<p>Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const ALine: TBLLine; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_768","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_737","title":"Parameters","text":"<p><code>ALine</code>: <code>TBLLine</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_20","title":"StrokeLine(TBLLine, TBLRgba64)","text":"<p>Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const ALine: TBLLine; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_769","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_738","title":"Parameters","text":"<p><code>ALine</code>: <code>TBLLine</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_21","title":"StrokeLine(TBLLine, TBLRgba32)","text":"<p>Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const ALine: TBLLine; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_770","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_739","title":"Parameters","text":"<p><code>ALine</code>: <code>TBLLine</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_22","title":"StrokeLine(TBLLine, TBLRgba)","text":"<p>Strokes a line specified as <code>ALine</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeLine(const ALine: TBLLine; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_771","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_740","title":"Parameters","text":"<p><code>ALine</code>: <code>TBLLine</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeLine_23","title":"StrokeLine(TBLLine)","text":"<p>Strokes a line specified as <code>ALine</code> (floating point coordinates) with the default stroke style. </p> <p><code>procedure StrokeLine(const ALine: TBLLine); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_772","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_741","title":"Parameters","text":"<p><code>ALine</code>: <code>TBLLine</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_0","title":"StrokePath(TBLPoint, TBLPath, TBLVar)","text":"<p>Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_773","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_742","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_1","title":"StrokePath(TBLPoint, TBLPath, TBLGradient)","text":"<p>Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_774","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_743","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_2","title":"StrokePath(TBLPoint, TBLPath, TBLPattern)","text":"<p>Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_775","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_744","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_3","title":"StrokePath(TBLPoint, TBLPath, TAlphaColor)","text":"<p>Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_776","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_745","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_4","title":"StrokePath(TBLPoint, TBLPath, TBLRgba64)","text":"<p>Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_777","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_746","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_5","title":"StrokePath(TBLPoint, TBLPath, TBLRgba32)","text":"<p>Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_778","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_747","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_6","title":"StrokePath(TBLPoint, TBLPath, TBLRgba)","text":"<p>Strokes the given <code>APath</code> translated by <code>AOrigin</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const AOrigin: TBLPoint; const APath: TBLPath; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_779","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_748","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_7","title":"StrokePath(TBLPoint, TBLPath)","text":"<p>Strokes the given <code>APath</code> translated by <code>AOrigin</code> with the default stroke style. </p> <p><code>procedure StrokePath(const AOrigin: TBLPoint; const APath: TBLPath); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_780","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_749","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>APath</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_8","title":"StrokePath(TBLPath, TBLVar)","text":"<p>Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const APath: TBLPath; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_781","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_750","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_9","title":"StrokePath(TBLPath, TBLGradient)","text":"<p>Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const APath: TBLPath; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_782","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_751","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_10","title":"StrokePath(TBLPath, TBLPattern)","text":"<p>Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const APath: TBLPath; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_783","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_752","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_11","title":"StrokePath(TBLPath, TAlphaColor)","text":"<p>Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const APath: TBLPath; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_784","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_753","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_12","title":"StrokePath(TBLPath, TBLRgba64)","text":"<p>Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const APath: TBLPath; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_785","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_754","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_13","title":"StrokePath(TBLPath, TBLRgba32)","text":"<p>Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const APath: TBLPath; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_786","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_755","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_14","title":"StrokePath(TBLPath, TBLRgba)","text":"<p>Strokes the given <code>APath</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePath(const APath: TBLPath; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_787","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_756","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePath_15","title":"StrokePath(TBLPath)","text":"<p>Strokes the given <code>APath</code> with the default stroke style. </p> <p><code>procedure StrokePath(const APath: TBLPath); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_788","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_757","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_0","title":"StrokePie(Double, Double, Double, Double, Double, Double, TBLVar)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_789","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_758","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_1","title":"StrokePie(Double, Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_790","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_759","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_2","title":"StrokePie(Double, Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_791","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_760","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_3","title":"StrokePie(Double, Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_792","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_761","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_4","title":"StrokePie(Double, Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_793","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_762","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_5","title":"StrokePie(Double, Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_794","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_763","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_6","title":"StrokePie(Double, Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_795","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_764","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_7","title":"StrokePie(Double, Double, Double, Double, Double, Double)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>[ARX, ARY]</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokePie(const ACX, ACY, ARX, ARY, AStart, ASweep: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_796","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_765","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_8","title":"StrokePie(Double, Double, Double, Double, Double, TBLVar)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_797","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_766","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_9","title":"StrokePie(Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_798","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_767","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_10","title":"StrokePie(Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_799","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_768","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_11","title":"StrokePie(Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_800","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_769","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_12","title":"StrokePie(Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_801","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_770","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_13","title":"StrokePie(Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_802","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_771","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_14","title":"StrokePie(Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const ACX, ACY, AR, AStart, ASweep: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_803","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_772","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_15","title":"StrokePie(Double, Double, Double, Double, Double)","text":"<p>Strokes a chord at <code>[ACX, ACY]</code> with radius <code>AR</code> at <code>AStart</code> of <code>ASweep</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokePie(const ACX, ACY, AR, AStart, ASweep: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_804","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_773","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_16","title":"StrokePie(TBLArc, TBLVar)","text":"<p>Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const APie: TBLArc; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_805","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_774","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_17","title":"StrokePie(TBLArc, TBLGradient)","text":"<p>Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const APie: TBLArc; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_806","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_775","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_18","title":"StrokePie(TBLArc, TBLPattern)","text":"<p>Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const APie: TBLArc; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_807","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_776","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_19","title":"StrokePie(TBLArc, TAlphaColor)","text":"<p>Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const APie: TBLArc; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_808","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_777","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_20","title":"StrokePie(TBLArc, TBLRgba64)","text":"<p>Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const APie: TBLArc; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_809","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_778","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_21","title":"StrokePie(TBLArc, TBLRgba32)","text":"<p>Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const APie: TBLArc; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_810","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_779","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_22","title":"StrokePie(TBLArc, TBLRgba)","text":"<p>Strokes an <code>APie</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePie(const APie: TBLArc; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_811","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_780","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePie_23","title":"StrokePie(TBLArc)","text":"<p>Strokes an <code>APie</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokePie(const APie: TBLArc); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_812","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_781","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_0","title":"StrokePolygon(PBLPointI, NativeInt, TBLVar)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_813","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_782","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_1","title":"StrokePolygon(PBLPointI, NativeInt, TBLGradient)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_814","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_783","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_2","title":"StrokePolygon(PBLPointI, NativeInt, TBLPattern)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_815","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_784","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_3","title":"StrokePolygon(PBLPointI, NativeInt, TAlphaColor)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_816","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_785","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_4","title":"StrokePolygon(PBLPointI, NativeInt, TBLRgba64)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_817","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_786","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_5","title":"StrokePolygon(PBLPointI, NativeInt, TBLRgba32)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_818","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_787","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_6","title":"StrokePolygon(PBLPointI, NativeInt, TBLRgba)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_819","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_788","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_7","title":"StrokePolygon(PBLPointI, NativeInt)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (integer coordinates) with the current stroke style. </p> <p><code>procedure StrokePolygon(const APoly: PBLPointI; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_820","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_789","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_8","title":"StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TBLVar)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_821","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_790","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_9","title":"StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TBLGradient)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_822","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_791","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_10","title":"StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TBLPattern)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_823","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_792","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_11","title":"StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TAlphaColor)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_824","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_793","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_12","title":"StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TBLRgba64)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_825","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_794","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_13","title":"StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TBLRgba32)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_826","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_795","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_14","title":"StrokePolygon(TBLArrayView&lt;TBLPointI&gt;, TBLRgba)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_827","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_796","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_15","title":"StrokePolygon(TBLArrayView&lt;TBLPointI&gt;)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with the current stroke style. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPointI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_828","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_797","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_16","title":"StrokePolygon(TArray&lt;TBLPointI&gt;, TBLVar)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_829","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_798","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_17","title":"StrokePolygon(TArray&lt;TBLPointI&gt;, TBLGradient)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_830","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_799","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_18","title":"StrokePolygon(TArray&lt;TBLPointI&gt;, TBLPattern)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_831","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_800","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_19","title":"StrokePolygon(TArray&lt;TBLPointI&gt;, TAlphaColor)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_832","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_801","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_20","title":"StrokePolygon(TArray&lt;TBLPointI&gt;, TBLRgba64)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_833","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_802","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_21","title":"StrokePolygon(TArray&lt;TBLPointI&gt;, TBLRgba32)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_834","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_803","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_22","title":"StrokePolygon(TArray&lt;TBLPointI&gt;, TBLRgba)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_835","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_804","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_23","title":"StrokePolygon(TArray&lt;TBLPointI&gt;)","text":"<p>Strokes a polygon <code>APoly</code> (integer coordinates) with the current stroke style. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPointI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_836","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_805","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_24","title":"StrokePolygon(PBLPoint, NativeInt, TBLVar)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_837","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_806","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_25","title":"StrokePolygon(PBLPoint, NativeInt, TBLGradient)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_838","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_807","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_26","title":"StrokePolygon(PBLPoint, NativeInt, TBLPattern)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_839","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_808","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_27","title":"StrokePolygon(PBLPoint, NativeInt, TAlphaColor)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_840","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_809","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_28","title":"StrokePolygon(PBLPoint, NativeInt, TBLRgba64)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_841","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_810","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_29","title":"StrokePolygon(PBLPoint, NativeInt, TBLRgba32)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_842","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_811","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_30","title":"StrokePolygon(PBLPoint, NativeInt, TBLRgba)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_843","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_812","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_31","title":"StrokePolygon(PBLPoint, NativeInt)","text":"<p>Strokes a polygon <code>APoly</code> having 'ACount' vertices (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokePolygon(const APoly: PBLPoint; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_844","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_813","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_32","title":"StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TBLVar)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_845","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_814","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_33","title":"StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TBLGradient)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_846","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_815","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_34","title":"StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TBLPattern)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_847","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_816","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_35","title":"StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TAlphaColor)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_848","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_817","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_36","title":"StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TBLRgba64)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_849","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_818","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_37","title":"StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TBLRgba32)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_850","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_819","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_38","title":"StrokePolygon(TBLArrayView&lt;TBLPoint&gt;, TBLRgba)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_851","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_820","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_39","title":"StrokePolygon(TBLArrayView&lt;TBLPoint&gt;)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokePolygon(const APoly: TBLArrayView&lt;TBLPoint&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_852","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_821","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_40","title":"StrokePolygon(TArray&lt;TBLPoint&gt;, TBLVar)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_853","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_822","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_41","title":"StrokePolygon(TArray&lt;TBLPoint&gt;, TBLGradient)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_854","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_823","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_42","title":"StrokePolygon(TArray&lt;TBLPoint&gt;, TBLPattern)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_855","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_824","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_43","title":"StrokePolygon(TArray&lt;TBLPoint&gt;, TAlphaColor)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_856","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_825","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_44","title":"StrokePolygon(TArray&lt;TBLPoint&gt;, TBLRgba64)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_857","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_826","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_45","title":"StrokePolygon(TArray&lt;TBLPoint&gt;, TBLRgba32)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_858","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_827","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_46","title":"StrokePolygon(TArray&lt;TBLPoint&gt;, TBLRgba)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_859","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_828","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolygon_47","title":"StrokePolygon(TArray&lt;TBLPoint&gt;)","text":"<p>Strokes a polygon <code>APoly</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokePolygon(const APoly: TArray&lt;TBLPoint&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_860","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_829","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_0","title":"StrokePolyline(PBLPointI, NativeInt, TBLVar)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_861","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_830","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_1","title":"StrokePolyline(PBLPointI, NativeInt, TBLGradient)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_862","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_831","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_2","title":"StrokePolyline(PBLPointI, NativeInt, TBLPattern)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_863","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_832","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_3","title":"StrokePolyline(PBLPointI, NativeInt, TAlphaColor)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_864","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_833","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_4","title":"StrokePolyline(PBLPointI, NativeInt, TBLRgba64)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_865","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_834","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_5","title":"StrokePolyline(PBLPointI, NativeInt, TBLRgba32)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_866","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_835","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_6","title":"StrokePolyline(PBLPointI, NativeInt, TBLRgba)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPointI; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_867","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_836","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_7","title":"StrokePolyline(PBLPointI, NativeInt)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (integer coordinates) with the current stroke style. </p> <p><code>procedure StrokePolyline(const APoly: PBLPointI; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_868","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_837","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_8","title":"StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TBLVar)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_869","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_838","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_9","title":"StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TBLGradient)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_870","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_839","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_10","title":"StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TBLPattern)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_871","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_840","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_11","title":"StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TAlphaColor)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_872","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_841","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_12","title":"StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TBLRgba64)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_873","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_842","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_13","title":"StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TBLRgba32)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_874","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_843","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_14","title":"StrokePolyline(TBLArrayView&lt;TBLPointI&gt;, TBLRgba)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPointI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_875","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_844","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_15","title":"StrokePolyline(TBLArrayView&lt;TBLPointI&gt;)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with the current stroke style. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPointI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_876","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_845","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_16","title":"StrokePolyline(TArray&lt;TBLPointI&gt;, TBLVar)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_877","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_846","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_17","title":"StrokePolyline(TArray&lt;TBLPointI&gt;, TBLGradient)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_878","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_847","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_18","title":"StrokePolyline(TArray&lt;TBLPointI&gt;, TBLPattern)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_879","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_848","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_19","title":"StrokePolyline(TArray&lt;TBLPointI&gt;, TAlphaColor)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_880","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_849","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_20","title":"StrokePolyline(TArray&lt;TBLPointI&gt;, TBLRgba64)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_881","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_850","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_21","title":"StrokePolyline(TArray&lt;TBLPointI&gt;, TBLRgba32)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_882","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_851","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_22","title":"StrokePolyline(TArray&lt;TBLPointI&gt;, TBLRgba)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPointI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_883","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_852","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_23","title":"StrokePolyline(TArray&lt;TBLPointI&gt;)","text":"<p>Strokes a polyline <code>APoly</code> (integer coordinates) with the current stroke style. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPointI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_884","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_853","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_24","title":"StrokePolyline(PBLPoint, NativeInt, TBLVar)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_885","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_854","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_25","title":"StrokePolyline(PBLPoint, NativeInt, TBLGradient)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_886","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_855","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_26","title":"StrokePolyline(PBLPoint, NativeInt, TBLPattern)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_887","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_856","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_27","title":"StrokePolyline(PBLPoint, NativeInt, TAlphaColor)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_888","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_857","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_28","title":"StrokePolyline(PBLPoint, NativeInt, TBLRgba64)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_889","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_858","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_29","title":"StrokePolyline(PBLPoint, NativeInt, TBLRgba32)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_890","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_859","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_30","title":"StrokePolyline(PBLPoint, NativeInt, TBLRgba)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: PBLPoint; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_891","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_860","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_31","title":"StrokePolyline(PBLPoint, NativeInt)","text":"<p>Strokes a polyline <code>APoly</code> having 'ACount' vertices (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokePolyline(const APoly: PBLPoint; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_892","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_861","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_32","title":"StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TBLVar)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_893","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_862","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_33","title":"StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TBLGradient)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_894","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_863","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_34","title":"StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TBLPattern)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_895","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_864","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_35","title":"StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TAlphaColor)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_896","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_865","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_36","title":"StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TBLRgba64)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_897","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_866","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_37","title":"StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TBLRgba32)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_898","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_867","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_38","title":"StrokePolyline(TBLArrayView&lt;TBLPoint&gt;, TBLRgba)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPoint&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_899","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_868","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_39","title":"StrokePolyline(TBLArrayView&lt;TBLPoint&gt;)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokePolyline(const APoly: TBLArrayView&lt;TBLPoint&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_900","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_869","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_40","title":"StrokePolyline(TArray&lt;TBLPoint&gt;, TBLVar)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_901","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_870","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_41","title":"StrokePolyline(TArray&lt;TBLPoint&gt;, TBLGradient)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_902","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_871","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_42","title":"StrokePolyline(TArray&lt;TBLPoint&gt;, TBLPattern)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_903","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_872","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_43","title":"StrokePolyline(TArray&lt;TBLPoint&gt;, TAlphaColor)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_904","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_873","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_44","title":"StrokePolyline(TArray&lt;TBLPoint&gt;, TBLRgba64)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_905","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_874","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_45","title":"StrokePolyline(TArray&lt;TBLPoint&gt;, TBLRgba32)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_906","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_875","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_46","title":"StrokePolyline(TArray&lt;TBLPoint&gt;, TBLRgba)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPoint&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_907","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_876","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokePolyline_47","title":"StrokePolyline(TArray&lt;TBLPoint&gt;)","text":"<p>Strokes a polyline <code>APoly</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokePolyline(const APoly: TArray&lt;TBLPoint&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_908","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_877","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_0","title":"StrokeRect(Double, Double, Double, Double, TBLVar)","text":"<p>Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const AX, AY, AW, AH: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_909","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_878","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_1","title":"StrokeRect(Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const AX, AY, AW, AH: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_910","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_879","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_2","title":"StrokeRect(Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const AX, AY, AW, AH: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_911","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_880","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_3","title":"StrokeRect(Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const AX, AY, AW, AH: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_912","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_881","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_4","title":"StrokeRect(Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const AX, AY, AW, AH: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_913","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_882","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_5","title":"StrokeRect(Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const AX, AY, AW, AH: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_914","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_883","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_6","title":"StrokeRect(Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const AX, AY, AW, AH: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_915","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_884","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_7","title":"StrokeRect(Double, Double, Double, Double)","text":"<p>Strokes a rectangle <code>[AX, AY, AW, AH]</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeRect(const AX, AY, AW, AH: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_916","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_885","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_8","title":"StrokeRect(TBLRect, TBLVar)","text":"<p>Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRect; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_917","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_886","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_9","title":"StrokeRect(TBLRect, TBLGradient)","text":"<p>Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRect; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_918","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_887","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_10","title":"StrokeRect(TBLRect, TBLPattern)","text":"<p>Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRect; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_919","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_888","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_11","title":"StrokeRect(TBLRect, TAlphaColor)","text":"<p>Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRect; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_920","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_889","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_12","title":"StrokeRect(TBLRect, TBLRgba64)","text":"<p>Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRect; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_921","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_890","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_13","title":"StrokeRect(TBLRect, TBLRgba32)","text":"<p>Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRect; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_922","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_891","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_14","title":"StrokeRect(TBLRect, TBLRgba)","text":"<p>Strokes a rectangle <code>ARect</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRect; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_923","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_892","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_15","title":"StrokeRect(TBLRect)","text":"<p>Strokes a rectangle <code>ARect</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeRect(const ARect: TBLRect); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_924","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_893","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_16","title":"StrokeRect(TBLRectI, TBLVar)","text":"<p>Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRectI; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_925","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_894","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_17","title":"StrokeRect(TBLRectI, TBLGradient)","text":"<p>Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRectI; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_926","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_895","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_18","title":"StrokeRect(TBLRectI, TBLPattern)","text":"<p>Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRectI; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_927","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_896","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_19","title":"StrokeRect(TBLRectI, TAlphaColor)","text":"<p>Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRectI; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_928","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_897","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_20","title":"StrokeRect(TBLRectI, TBLRgba64)","text":"<p>Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRectI; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_929","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_898","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_21","title":"StrokeRect(TBLRectI, TBLRgba32)","text":"<p>Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRectI; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_930","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_899","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_22","title":"StrokeRect(TBLRectI, TBLRgba)","text":"<p>Strokes a rectangle <code>ARect</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRect(const ARect: TBLRectI; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_931","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_900","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRect_23","title":"StrokeRect(TBLRectI)","text":"<p>Strokes a rectangle <code>ARect</code> (integer coordinates) with the current stroke style. </p> <p><code>procedure StrokeRect(const ARect: TBLRectI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_932","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_901","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_0","title":"StrokeRectArray(PBLRectI, NativeInt, TBLVar)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_933","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_902","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_1","title":"StrokeRectArray(PBLRectI, NativeInt, TBLGradient)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_934","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_903","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_2","title":"StrokeRectArray(PBLRectI, NativeInt, TBLPattern)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_935","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_904","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_3","title":"StrokeRectArray(PBLRectI, NativeInt, TAlphaColor)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_936","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_905","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_4","title":"StrokeRectArray(PBLRectI, NativeInt, TBLRgba64)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_937","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_906","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_5","title":"StrokeRectArray(PBLRectI, NativeInt, TBLRgba32)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_938","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_907","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_6","title":"StrokeRectArray(PBLRectI, NativeInt, TBLRgba)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRectI; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_939","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_908","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_7","title":"StrokeRectArray(PBLRectI, NativeInt)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (integer coordinates) with the default stroke style. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRectI; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_940","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_909","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_8","title":"StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLVar)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_941","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_910","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_9","title":"StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLGradient)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_942","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_911","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_10","title":"StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLPattern)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_943","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_912","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_11","title":"StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TAlphaColor)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_944","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_913","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_12","title":"StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLRgba64)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_945","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_914","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_13","title":"StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLRgba32)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_946","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_915","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_14","title":"StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLRgba)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_947","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_916","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_15","title":"StrokeRectArray(TBLArrayView&lt;TBLRectI&gt;)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with the default stroke style. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_948","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_917","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_16","title":"StrokeRectArray(TArray&lt;TBLRectI&gt;, TBLVar)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_949","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_918","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_17","title":"StrokeRectArray(TArray&lt;TBLRectI&gt;, TBLGradient)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_950","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_919","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_18","title":"StrokeRectArray(TArray&lt;TBLRectI&gt;, TBLPattern)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_951","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_920","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_19","title":"StrokeRectArray(TArray&lt;TBLRectI&gt;, TAlphaColor)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_952","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_921","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_20","title":"StrokeRectArray(TArray&lt;TBLRectI&gt;, TBLRgba64)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_953","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_922","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_21","title":"StrokeRectArray(TArray&lt;TBLRectI&gt;, TBLRgba32)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_954","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_923","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_22","title":"StrokeRectArray(TArray&lt;TBLRectI&gt;, TBLRgba)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRectI&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_955","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_924","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_23","title":"StrokeRectArray(TArray&lt;TBLRectI&gt;)","text":"<p>Strokes an <code>AArray</code> of rectangles (integer coordinates) with the default stroke style. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRectI&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_956","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_925","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_24","title":"StrokeRectArray(PBLRect, NativeInt, TBLVar)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_957","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_926","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_25","title":"StrokeRectArray(PBLRect, NativeInt, TBLGradient)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_958","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_927","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_26","title":"StrokeRectArray(PBLRect, NativeInt, TBLPattern)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_959","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_928","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_27","title":"StrokeRectArray(PBLRect, NativeInt, TAlphaColor)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_960","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_929","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_28","title":"StrokeRectArray(PBLRect, NativeInt, TBLRgba64)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_961","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_930","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_29","title":"StrokeRectArray(PBLRect, NativeInt, TBLRgba32)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_962","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_931","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_30","title":"StrokeRectArray(PBLRect, NativeInt, TBLRgba)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRect; const ACount: NativeInt; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_963","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_932","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_31","title":"StrokeRectArray(PBLRect, NativeInt)","text":"<p>Strokes an <code>AArray</code> of rectangles or size 'ACount' (floating point coordinates) with the default stroke style. </p> <p><code>procedure StrokeRectArray(const AArray: PBLRect; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_964","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_933","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_32","title":"StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TBLVar)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_965","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_934","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_33","title":"StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TBLGradient)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_966","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_935","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_34","title":"StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TBLPattern)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_967","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_936","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_35","title":"StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TAlphaColor)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_968","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_937","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_36","title":"StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TBLRgba64)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_969","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_938","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_37","title":"StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TBLRgba32)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_970","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_939","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_38","title":"StrokeRectArray(TBLArrayView&lt;TBLRect&gt;, TBLRgba)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_971","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_940","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_39","title":"StrokeRectArray(TBLArrayView&lt;TBLRect&gt;)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with the default stroke style. </p> <p><code>procedure StrokeRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_972","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_941","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_40","title":"StrokeRectArray(TArray&lt;TBLRect&gt;, TBLVar)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_973","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_942","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_41","title":"StrokeRectArray(TArray&lt;TBLRect&gt;, TBLGradient)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_974","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_943","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_42","title":"StrokeRectArray(TArray&lt;TBLRect&gt;, TBLPattern)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_975","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_944","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_43","title":"StrokeRectArray(TArray&lt;TBLRect&gt;, TAlphaColor)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_976","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_945","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_44","title":"StrokeRectArray(TArray&lt;TBLRect&gt;, TBLRgba64)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_977","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_946","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_45","title":"StrokeRectArray(TArray&lt;TBLRect&gt;, TBLRgba32)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_978","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_947","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_46","title":"StrokeRectArray(TArray&lt;TBLRect&gt;, TBLRgba)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRect&gt;; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_979","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_948","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRectArray_47","title":"StrokeRectArray(TArray&lt;TBLRect&gt;)","text":"<p>Strokes an <code>AArray</code> of rectangles (floating point coordinates) with the default stroke style. </p> <p><code>procedure StrokeRectArray(const AArray: TArray&lt;TBLRect&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_980","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_949","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_0","title":"StrokeRoundRect(Double, Double, Double, Double, Double, Double, TBLVar)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_981","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_950","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_1","title":"StrokeRoundRect(Double, Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_982","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_951","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_2","title":"StrokeRoundRect(Double, Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_983","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_952","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_3","title":"StrokeRoundRect(Double, Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_984","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_953","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_4","title":"StrokeRoundRect(Double, Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_985","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_954","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_5","title":"StrokeRoundRect(Double, Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_986","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_955","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_6","title":"StrokeRoundRect(Double, Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, ARX, ARY: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_987","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_956","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_7","title":"StrokeRoundRect(Double, Double, Double, Double, Double, Double)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>[ARX, ARY]</code> with the current stroke style. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, ARX, ARY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_988","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_957","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_8","title":"StrokeRoundRect(Double, Double, Double, Double, Double, TBLVar)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_989","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_958","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_9","title":"StrokeRoundRect(Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_990","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_959","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_10","title":"StrokeRoundRect(Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_991","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_960","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_11","title":"StrokeRoundRect(Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_992","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_961","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_12","title":"StrokeRoundRect(Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_993","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_962","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_13","title":"StrokeRoundRect(Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_994","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_963","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_14","title":"StrokeRoundRect(Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, AR: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_995","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_964","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_15","title":"StrokeRoundRect(Double, Double, Double, Double, Double)","text":"<p>Strokes a rounded rectangle bounded by <code>[AX, AY, AW, AH]</code> with radius <code>AR</code> with the current stroke style. </p> <p><code>procedure StrokeRoundRect(const AX, AY, AW, AH, AR: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_996","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_965","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_16","title":"StrokeRoundRect(TBLRect, Double, Double, TBLVar)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_997","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_966","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_17","title":"StrokeRoundRect(TBLRect, Double, Double, TBLGradient)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_998","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_967","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_18","title":"StrokeRoundRect(TBLRect, Double, Double, TBLPattern)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_999","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_968","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_19","title":"StrokeRoundRect(TBLRect, Double, Double, TAlphaColor)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1000","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_969","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_20","title":"StrokeRoundRect(TBLRect, Double, Double, TBLRgba64)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1001","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_970","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_21","title":"StrokeRoundRect(TBLRect, Double, Double, TBLRgba32)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1002","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_971","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_22","title":"StrokeRoundRect(TBLRect, Double, Double, TBLRgba)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const ARX, ARY: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1003","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_972","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_23","title":"StrokeRoundRect(TBLRect, Double, Double)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>[ARX, ARY]</code> with the current stroke style. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const ARX, ARY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1004","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_973","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_24","title":"StrokeRoundRect(TBLRect, Double, TBLVar)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1005","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_974","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_25","title":"StrokeRoundRect(TBLRect, Double, TBLGradient)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1006","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_975","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_26","title":"StrokeRoundRect(TBLRect, Double, TBLPattern)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1007","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_976","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_27","title":"StrokeRoundRect(TBLRect, Double, TAlphaColor)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1008","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_977","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_28","title":"StrokeRoundRect(TBLRect, Double, TBLRgba64)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1009","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_978","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_29","title":"StrokeRoundRect(TBLRect, Double, TBLRgba32)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1010","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_979","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_30","title":"StrokeRoundRect(TBLRect, Double, TBLRgba)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const AR: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1011","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_980","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_31","title":"StrokeRoundRect(TBLRect, Double)","text":"<p>Strokes a rounded rectangle bounded by <code>ARect</code> with radius <code>AR</code> with the current stroke style. </p> <p><code>procedure StrokeRoundRect(const ARect: TBLRect; const AR: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1012","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_981","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_32","title":"StrokeRoundRect(TBLRoundRect, TBLVar)","text":"<p>Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARR: TBLRoundRect; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1013","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_982","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_33","title":"StrokeRoundRect(TBLRoundRect, TBLGradient)","text":"<p>Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARR: TBLRoundRect; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1014","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_983","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_34","title":"StrokeRoundRect(TBLRoundRect, TBLPattern)","text":"<p>Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARR: TBLRoundRect; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1015","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_984","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_35","title":"StrokeRoundRect(TBLRoundRect, TAlphaColor)","text":"<p>Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARR: TBLRoundRect; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1016","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_985","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_36","title":"StrokeRoundRect(TBLRoundRect, TBLRgba64)","text":"<p>Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARR: TBLRoundRect; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1017","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_986","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_37","title":"StrokeRoundRect(TBLRoundRect, TBLRgba32)","text":"<p>Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARR: TBLRoundRect; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1018","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_987","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_38","title":"StrokeRoundRect(TBLRoundRect, TBLRgba)","text":"<p>Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeRoundRect(const ARR: TBLRoundRect; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1019","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_988","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeRoundRect_39","title":"StrokeRoundRect(TBLRoundRect)","text":"<p>Strokes a rounded rectangle <code>ARR</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeRoundRect(const ARR: TBLRoundRect); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1020","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_989","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_0","title":"StrokeText(TBLPoint, TBLFont, String, TBLVar)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1021","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_990","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_1","title":"StrokeText(TBLPoint, TBLFont, String, TBLGradient)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1022","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_991","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_2","title":"StrokeText(TBLPoint, TBLFont, String, TBLPattern)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1023","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_992","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_3","title":"StrokeText(TBLPoint, TBLFont, String, TAlphaColor)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1024","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_993","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_4","title":"StrokeText(TBLPoint, TBLFont, String, TBLRgba64)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1025","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_994","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_5","title":"StrokeText(TBLPoint, TBLFont, String, TBLRgba32)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1026","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_995","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_6","title":"StrokeText(TBLPoint, TBLFont, String, TBLRgba)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1027","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_996","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_7","title":"StrokeText(TBLPoint, TBLFont, String)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the default stroke style. </p> <p><code>procedure StrokeText(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1028","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_997","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_8","title":"StrokeText(TBLPointI, TBLFont, String, TBLVar)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1029","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_998","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_9","title":"StrokeText(TBLPointI, TBLFont, String, TBLGradient)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1030","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_999","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_10","title":"StrokeText(TBLPointI, TBLFont, String, TBLPattern)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1031","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1000","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_11","title":"StrokeText(TBLPointI, TBLFont, String, TAlphaColor)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1032","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1001","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_12","title":"StrokeText(TBLPointI, TBLFont, String, TBLRgba64)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1033","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1002","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_13","title":"StrokeText(TBLPointI, TBLFont, String, TBLRgba32)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1034","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1003","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_14","title":"StrokeText(TBLPointI, TBLFont, String, TBLRgba)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1035","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1004","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeText_15","title":"StrokeText(TBLPointI, TBLFont, String)","text":"<p>Strokes string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the default stroke style. </p> <p><code>procedure StrokeText(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1036","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1005","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_0","title":"StrokeTriangle(Double, Double, Double, Double, Double, Double, TBLVar)","text":"<p>Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1037","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1006","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_1","title":"StrokeTriangle(Double, Double, Double, Double, Double, Double, TBLGradient)","text":"<p>Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1038","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1007","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_2","title":"StrokeTriangle(Double, Double, Double, Double, Double, Double, TBLPattern)","text":"<p>Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1039","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1008","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_3","title":"StrokeTriangle(Double, Double, Double, Double, Double, Double, TAlphaColor)","text":"<p>Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1040","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1009","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_4","title":"StrokeTriangle(Double, Double, Double, Double, Double, Double, TBLRgba64)","text":"<p>Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1041","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1010","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_5","title":"StrokeTriangle(Double, Double, Double, Double, Double, Double, TBLRgba32)","text":"<p>Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1042","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1011","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_6","title":"StrokeTriangle(Double, Double, Double, Double, Double, Double, TBLRgba)","text":"<p>Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1043","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1012","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_7","title":"StrokeTriangle(Double, Double, Double, Double, Double, Double)","text":"<p>Strokes a triangle defined by <code>[AX0, AY0]</code>, <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeTriangle(const AX0, AY0, AX1, AY1, AX2, AY2: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1044","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1013","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_8","title":"StrokeTriangle(TBLTriangle, TBLVar)","text":"<p>Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const ATriangle: TBLTriangle; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1045","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1014","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_9","title":"StrokeTriangle(TBLTriangle, TBLGradient)","text":"<p>Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const ATriangle: TBLTriangle; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1046","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1015","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_10","title":"StrokeTriangle(TBLTriangle, TBLPattern)","text":"<p>Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const ATriangle: TBLTriangle; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1047","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1016","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_11","title":"StrokeTriangle(TBLTriangle, TAlphaColor)","text":"<p>Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const ATriangle: TBLTriangle; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1048","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1017","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_12","title":"StrokeTriangle(TBLTriangle, TBLRgba64)","text":"<p>Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const ATriangle: TBLTriangle; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1049","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1018","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_13","title":"StrokeTriangle(TBLTriangle, TBLRgba32)","text":"<p>Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const ATriangle: TBLTriangle; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1050","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1019","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_14","title":"StrokeTriangle(TBLTriangle, TBLRgba)","text":"<p>Strokes an <code>ATriangle</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeTriangle(const ATriangle: TBLTriangle; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1051","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1020","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeTriangle_15","title":"StrokeTriangle(TBLTriangle)","text":"<p>Strokes an <code>ATriangle</code> (floating point coordinates) with the current stroke style. </p> <p><code>procedure StrokeTriangle(const ATriangle: TBLTriangle); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1052","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1021","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_0","title":"StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLVar)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1053","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1022","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_1","title":"StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLGradient)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1054","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1023","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_2","title":"StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLPattern)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1055","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1024","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_3","title":"StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TAlphaColor)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1056","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1025","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_4","title":"StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLRgba64)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1057","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1026","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_5","title":"StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLRgba32)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1058","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1027","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_6","title":"StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView, TBLRgba)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1059","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1028","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_7","title":"StrokeUtf8Text(TBLPoint, TBLFont, TBLStringView)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the default stroke style. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AView: TBLStringView); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1060","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1029","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_8","title":"StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TBLVar)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1061","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1030","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_9","title":"StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TBLGradient)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1062","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1031","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_10","title":"StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TBLPattern)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1063","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1032","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_11","title":"StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TAlphaColor)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1064","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1033","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_12","title":"StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TBLRgba64)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1065","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1034","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_13","title":"StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TBLRgba32)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1066","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1035","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_14","title":"StrokeUtf8Text(TBLPoint, TBLFont, UTF8String, TBLRgba)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1067","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1036","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_15","title":"StrokeUtf8Text(TBLPoint, TBLFont, UTF8String)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (floating point coordinates) with the default stroke style. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPoint; const AFont: TBLFont; const AText: UTF8String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1068","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1037","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_16","title":"StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLVar)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1069","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1038","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_17","title":"StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLGradient)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1070","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1039","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_18","title":"StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLPattern)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1071","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1040","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_19","title":"StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TAlphaColor)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1072","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1041","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_20","title":"StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLRgba64)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1073","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1042","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_21","title":"StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLRgba32)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1074","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1043","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_22","title":"StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView, TBLRgba)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1075","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1044","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_23","title":"StrokeUtf8Text(TBLPointI, TBLFont, TBLStringView)","text":"<p>Strokes UTF-8 encoded string passed as string <code>AView</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the default stroke style. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AView: TBLStringView); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1076","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1045","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AView</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_24","title":"StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TBLVar)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLVar); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1077","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1046","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_25","title":"StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TBLGradient)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLGradient); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1078","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1047","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_26","title":"StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TBLPattern)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLPattern); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1079","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1048","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_27","title":"StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TAlphaColor)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1080","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1049","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_28","title":"StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TBLRgba64)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1081","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1050","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_29","title":"StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TBLRgba32)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1082","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1051","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_30","title":"StrokeUtf8Text(TBLPointI, TBLFont, UTF8String, TBLRgba)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with an explicit stroke <code>AStyle</code>. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String; const AStyle: TBLRgba); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1083","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1052","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p> <p><code>AStyle</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#StrokeUtf8Text_31","title":"StrokeUtf8Text(TBLPointI, TBLFont, UTF8String)","text":"<p>Strokes UTF-8 encoded string passed as <code>AText</code> by using the given <code>AFont</code> at <code>AOrigin</code> (integer coordinates) with the default stroke style. </p> <p><code>procedure StrokeUtf8Text(const AOrigin: TBLPointI; const AFont: TBLFont; const AText: UTF8String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1084","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1053","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPointI</code></p> <p><code>AFont</code>: <code>TBLFont</code></p> <p><code>AText</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#SwapStyles","title":"SwapStyles(TBLContextStyleSwapMode)","text":"<p>Swaps fill and stroke styles. </p> <p><code>procedure SwapStyles(const AMode: TBLContextStyleSwapMode); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1085","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1054","title":"Parameters","text":"<p><code>AMode</code>: <code>TBLContextStyleSwapMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Translate_0","title":"Translate(TBLPointI)","text":"<p>Translates the user transformation matrix by <code>[AP]</code> (integer). </p> <p><code>procedure Translate(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1086","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1055","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Translate_1","title":"Translate(TBLPoint)","text":"<p>Translates the user transformation matrix by <code>[AP]</code> (floating-point). </p> <p><code>procedure Translate(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1087","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1056","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#Translate_2","title":"Translate(Double, Double)","text":"<p>Translates the user transformation matrix by <code>[AX, AY]</code>. </p> <p><code>procedure Translate(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1088","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#parameters_1057","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#UserToMeta","title":"UserToMeta","text":"<p>Stores the result of combining the current <code>MetaTransform</code> and <code>UserTransform</code> to <code>MetaTransform</code> and resets <code>UserTransform</code> to identity as shown below:</p> <pre><code>  MetaTransform := MetaTransform * UserTransform;\n  UserTransform := Identity\n</code></pre> <p>Please note that this operation is irreversible. The only way to restore a meta-matrix is to <code>Save</code> the rendering context state, then to use <code>UserToMeta</code>, and then restored by <code>Restore</code> when needed. </p> <p><code>procedure UserToMeta; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContext/#exceptions_1089","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLContext/#see-also_61","title":"See Also","text":"<ul> <li>Save</li> <li>Restore</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/","title":"TBLContextCookie","text":"<p>Holds an arbitrary 128-bit value (cookie) that can be used to match other cookies. Blend2D uses cookies in places where it allows to \"lock\" some state that can only be unlocked by a matching cookie. Please don't confuse cookies with a security of any kind, it's just an arbitrary data that must match to proceed with a certain operation.</p> <p>Cookies can be used with <code>TBLContext.Save</code> and <code>TBLContext.Restore</code> operations. </p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextCookie = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#see-also","title":"See Also","text":"<ul> <li>TBLContext.Save</li> <li>TBLContext.Restore</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#properties","title":"Properties","text":"Name Description IsEmpty"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#methods","title":"Methods","text":"Name Description Equals Reset(UInt64, UInt64) Reset(TBLContextCookie) Reset"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLContextCookie/#IsEmpty","title":"IsEmpty","text":"<p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLContextCookie/#Equal","title":"Equal(TBLContextCookie, TBLContextCookie)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLContextCookie): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#parameters","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLContextCookie</code></p> <p><code>ARight</code>: <code>TBLContextCookie</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#NotEqual","title":"NotEqual(TBLContextCookie, TBLContextCookie)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLContextCookie): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLContextCookie</code></p> <p><code>ARight</code>: <code>TBLContextCookie</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLContextCookie/#Equals","title":"Equals(TBLContextCookie)","text":"<p><code>function Equals(const AOther: TBLContextCookie): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#parameters_2","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLContextCookie</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#Reset_0","title":"Reset(UInt64, UInt64)","text":"<p><code>procedure Reset(const AData0, AData1: UInt64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#parameters_3","title":"Parameters","text":"<p><code>AData0</code>: <code>UInt64</code></p> <p><code>AData1</code>: <code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#Reset_1","title":"Reset(TBLContextCookie)","text":"<p><code>procedure Reset(const AOther: TBLContextCookie); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#parameters_4","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLContextCookie</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCookie/#Reset_2","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/","title":"TBLContextCreateInfo","text":"<p>Information that can be used to customize the rendering context. </p>"},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextCreateInfo = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#fields","title":"Fields","text":"Name Description _Reserved Reserved for future use, must be zero. CommandQueueLimit Maximum number of commands to be queued. CpuFeatures CPU features to use in isolated JIT runtime (if supported), only used when <code>Flags</code> contains <code>TBLContextCreateFlag.OverrideCpuFeatures</code>. Flags Create flags. PixelOrigin Pixel origin. SavedStateLimit Maximum number of saved states. ThreadCount Number of worker threads to use for asynchronous rendering, if non-zero."},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#_Reserved","title":"_Reserved","text":"<p>Reserved for future use, must be zero. </p> <p><code>var _Reserved: Cardinal</code></p> <p>Type: <code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#CommandQueueLimit","title":"CommandQueueLimit","text":"<p>Maximum number of commands to be queued.</p> <p>If this parameter is zero the queue size will be determined automatically. </p> <p><code>var CommandQueueLimit: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#CpuFeatures","title":"CpuFeatures","text":"<p>CPU features to use in isolated JIT runtime (if supported), only used when <code>Flags</code> contains <code>TBLContextCreateFlag.OverrideCpuFeatures</code>. </p> <p><code>var CpuFeatures: Cardinal</code></p> <p>Type: <code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#Flags","title":"Flags","text":"<p>Create flags. </p> <p><code>var Flags: TBLContextCreateFlags</code></p> <p>Type: <code>TBLContextCreateFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#PixelOrigin","title":"PixelOrigin","text":"<p>Pixel origin.</p> <p>Pixel origin is an offset in pixel units that can be used as an origin for fetchers and effects that use a pixel X/Y coordinate in the calculation. One example of using pixel origin is dithering, where it's used to shift the dithering matrix. </p> <p><code>var PixelOrigin: TBLPointI</code></p> <p>Type: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#SavedStateLimit","title":"SavedStateLimit","text":"<p>Maximum number of saved states. </p> <p><code>var SavedStateLimit: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#remarks","title":"Remarks","text":"<p>Zero value tells the rendering engine to use the default saved state limit, which currently defaults to 4096 states. This option allows to even increase or decrease the limit, depending on the use case. </p>"},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#ThreadCount","title":"ThreadCount","text":"<p>Number of worker threads to use for asynchronous rendering, if non-zero.</p> <p>If <code>ThreadCount</code> is zero it means to initialize the context for synchronous rendering. This means that every operation will take effect immediately. If <code>ThreadCount</code> is <code>1</code> it means that the rendering will be asynchronous, but no thread would be acquired from a thread-pool, because the user thread will be used as a worker. And finally, if <code>ThreadCount</code> is greater than <code>1</code> then total of <code>ThreadCount - 1</code> threads will be acquired from thread-pool and used as additional workers. </p> <p><code>var ThreadCount: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLContextCreateInfo/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextHints/","title":"TBLContextHints","text":"<p>Rendering context hints. </p>"},{"location":"Reference/Blend2D/classes/TBLContextHints/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextHints = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLContextHints/#fields","title":"Fields","text":"Name Description Hints"},{"location":"Reference/Blend2D/classes/TBLContextHints/#properties","title":"Properties","text":"Name Description GradientQuality PatternQuality RenderingQuality"},{"location":"Reference/Blend2D/classes/TBLContextHints/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLContextHints/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLContextHints/#Hints","title":"Hints","text":"<p><code>var Hints: array [TBLContextHint] of Byte</code></p> <p>Type: <code>array [TBLContextHint] of Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextHints/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLContextHints/#GradientQuality","title":"GradientQuality","text":"<p><code>property GradientQuality: TBLGradientQuality read GetGradientQuality</code></p> <p>Type: <code>TBLGradientQuality</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextHints/#PatternQuality","title":"PatternQuality","text":"<p><code>property PatternQuality: TBLPatternQuality read GetPatternQuality</code></p> <p>Type: <code>TBLPatternQuality</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextHints/#RenderingQuality","title":"RenderingQuality","text":"<p><code>property RenderingQuality: TBLRenderingQuality read GetRenderingQuality</code></p> <p>Type: <code>TBLRenderingQuality</code></p>"},{"location":"Reference/Blend2D/classes/TBLContextHints/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLContextHints/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/","title":"TBLEllipse","text":"<p>Ellipse specified as [CX, CY, RX, RY] using <code>Double</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLEllipse = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#fields","title":"Fields","text":"Name Description CX CY RX RY"},{"location":"Reference/Blend2D/classes/TBLEllipse/#constructors","title":"Constructors","text":"Name Description Create(Double, Double, Double, Double) Create(Double, Double, Double)"},{"location":"Reference/Blend2D/classes/TBLEllipse/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLEllipse/#methods","title":"Methods","text":"Name Description Equals Reset(TBLEllipse) Reset(Double, Double, Double, Double) Reset(Double, Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLEllipse/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLEllipse/#CX","title":"CX","text":"<p><code>var CX: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#CY","title":"CY","text":"<p><code>var CY: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#RX","title":"RX","text":"<p><code>var RX: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#RY","title":"RY","text":"<p><code>var RY: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLEllipse/#Create_0","title":"<code>Create</code>","text":"<p><code>constructor Create(const ACX, ACY, ARX, ARY: Double); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#parameters","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#Create_1","title":"<code>Create</code>","text":"<p><code>constructor Create(const ACX, ACY, AR: Double); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#parameters_1","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLEllipse/#Equal","title":"Equal(TBLEllipse, TBLEllipse)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLEllipse): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLEllipse</code></p> <p><code>ARight</code>: <code>TBLEllipse</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#NotEqual","title":"NotEqual(TBLEllipse, TBLEllipse)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLEllipse): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLEllipse</code></p> <p><code>ARight</code>: <code>TBLEllipse</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLEllipse/#Equals","title":"Equals(TBLEllipse)","text":"<p><code>function Equals(const AOther: TBLEllipse): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#parameters_4","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLEllipse</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#Reset_0","title":"Reset(TBLEllipse)","text":"<p><code>procedure Reset(const AOther: TBLEllipse); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#parameters_5","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLEllipse</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#Reset_1","title":"Reset(Double, Double, Double, Double)","text":"<p><code>procedure Reset(const ACX, ACY, ARX, ARY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#parameters_6","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#Reset_2","title":"Reset(Double, Double, Double)","text":"<p><code>procedure Reset(const ACX, ACY, AR: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#parameters_7","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLEllipse/#Reset_3","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/","title":"TBLFile","text":"<p>A thin abstraction over a native OS file IO.</p> <p>A thin wrapper around a native OS file support. The file handle is always <code>THandle</code> and it refers to either a file descriptor on POSIX targets and file handle on Windows targets. </p>"},{"location":"Reference/Blend2D/classes/TBLFile/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFile = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFile/#properties","title":"Properties","text":"Name Description IsOpen Whether the file is open. Size The size of the file."},{"location":"Reference/Blend2D/classes/TBLFile/#constructors","title":"Constructors","text":"Name Description Assign Copying a file is not allowed. This will raise a <code>EBlend2DError</code> exception with result <code>TBLResult.NotPermitted</code>. Create Creates a file instance from an existing file <code>AHandle</code>, which either represents a file descriptor or Windows handle. Finalize Destroys this file instance - closes the file descriptor or handle when it's referencing an open file. Initialize Creates an empty file instance, which doesn't represent any open file."},{"location":"Reference/Blend2D/classes/TBLFile/#operators","title":"Operators","text":"Name Description Equal Used to compare against <code>nil</code> (empty file instance). NotEqual Used to compare against <code>nil</code> (empty file instance)."},{"location":"Reference/Blend2D/classes/TBLFile/#methods","title":"Methods","text":"Name Description Close Closes the file (if open) and sets the file handle to <code>THandle.MaxValue</code>. GetInfo Queries information of the file. Open Attempts to open a file specified by <code>AFilename</code> with the given <code>AOpenFlags</code>. Read Reads <code>ACount</code> bytes from the file into the given <code>ABuffer</code> and returns the number of bytes actually read. Seek Sets the file position of the file to the given <code>AOffset</code> by using the specified <code>ASeekType</code> and returns the new position. Truncate Truncates the file to the given maximum size <code>AMaxSize</code>. Write Writes <code>ACount</code> bytes to the file from the given <code>ABuffer</code> and returns the number of bytes actually written."},{"location":"Reference/Blend2D/classes/TBLFile/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFile/#IsOpen","title":"IsOpen","text":"<p>Whether the file is open. </p> <p><code>property IsOpen: Boolean read GetIsOpen</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#Size","title":"Size","text":"<p>The size of the file. </p> <p><code>property Size: Int64 read GetSize</code></p> <p>Type: <code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFile/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFile/#Assign","title":"<code>Assign</code>","text":"<p>Copying a file is not allowed. This will raise a <code>EBlend2DError</code> exception with result <code>TBLResult.NotPermitted</code>. </p> <p><code>constructor Assign(var ADest: TBLFile; const ASrc: TBLFile); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFile</code></p> <p><code>ASrc</code>: <code>TBLFile</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFile/#Create","title":"<code>Create</code>","text":"<p>Creates a file instance from an existing file <code>AHandle</code>, which either represents a file descriptor or Windows handle. </p> <p><code>constructor Create(const AHandle: THandle)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#parameters_1","title":"Parameters","text":"<p><code>AHandle</code>: <code>THandle</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys this file instance - closes the file descriptor or handle when it's referencing an open file. </p> <p><code>destructor Finalize(var ADest: TBLFile)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFile</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFile/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates an empty file instance, which doesn't represent any open file. </p> <p><code>constructor Initialize(out ADest: TBLFile)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#parameters_3","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFile</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#remarks","title":"Remarks","text":"<p>The internal file handle of non-opened files is set to <code>THandle.MaxValue</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLFile/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFile/#Equal","title":"Equal(TBLFile, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty file instance). </p> <p><code>class operator Equal(const ALeft: TBLFile; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFile</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#NotEqual","title":"NotEqual(TBLFile, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty file instance). </p> <p><code>class operator NotEqual(const ALeft: TBLFile; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFile</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFile/#Close","title":"Close","text":"<p>Closes the file (if open) and sets the file handle to <code>THandle.MaxValue</code>. </p> <p><code>procedure Close; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFile/#GetInfo","title":"GetInfo","text":"<p>Queries information of the file. </p> <p><code>function GetInfo: TBLFileInfo</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFile/#returns_2","title":"Returns","text":"<p><code>TBLFileInfo</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#Open","title":"Open(String, TBLFileOpenFlags)","text":"<p>Attempts to open a file specified by <code>AFilename</code> with the given <code>AOpenFlags</code>. </p> <p><code>procedure Open(const AFilename: String; const AOpenFlags: TBLFileOpenFlags); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFile/#parameters_6","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p> <p><code>AOpenFlags</code>: <code>TBLFileOpenFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#Read","title":"Read([untyped], Int64)","text":"<p>Reads <code>ACount</code> bytes from the file into the given <code>ABuffer</code> and returns the number of bytes actually read. </p> <p><code>function Read(var ABuffer; const ACount: Int64): Int64; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFile/#parameters_7","title":"Parameters","text":"<p><code>ABuffer</code>: </p> <p><code>ACount</code>: <code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#returns_3","title":"Returns","text":"<p><code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#Seek","title":"Seek(Int64, TBLFileSeekType)","text":"<p>Sets the file position of the file to the given <code>AOffset</code> by using the specified <code>ASeekType</code> and returns the new position. </p> <p><code>function Seek(const AOffset: Int64; const ASeekType: TBLFileSeekType): Int64; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFile/#parameters_8","title":"Parameters","text":"<p><code>AOffset</code>: <code>Int64</code></p> <p><code>ASeekType</code>: <code>TBLFileSeekType</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#returns_4","title":"Returns","text":"<p><code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#Truncate","title":"Truncate(Int64)","text":"<p>Truncates the file to the given maximum size <code>AMaxSize</code>. </p> <p><code>procedure Truncate(const AMaxSize: Int64); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFile/#parameters_9","title":"Parameters","text":"<p><code>AMaxSize</code>: <code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#Write","title":"Write([untyped], Int64)","text":"<p>Writes <code>ACount</code> bytes to the file from the given <code>ABuffer</code> and returns the number of bytes actually written. </p> <p><code>function Write(const ABuffer; const ACount: Int64): Int64; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFile/#parameters_10","title":"Parameters","text":"<p><code>ABuffer</code>: </p> <p><code>ACount</code>: <code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLFile/#returns_5","title":"Returns","text":"<p><code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/","title":"TBLFileInfo","text":"<p>File information. </p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFileInfo = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#properties","title":"Properties","text":"Name Description Flags GroupId HasGroupR HasGroupW HasGroupX HasOtherR HasOtherW HasOtherX HasOwnerR HasOwnerW HasOwnerX HasSetGid HasSetUid IsArchive IsBlockDevice IsCharDevice IsDirectory IsExecutable IsFifo IsHidden IsRegular IsSocket IsSymLink IsSystem IsValid ModifiedTime Size UserId"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#methods","title":"Methods","text":"Name Description HasFlag"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFileInfo/#Flags","title":"Flags","text":"<p><code>property Flags: TBLFileInfoFlags read FFlags</code></p> <p>Type: <code>TBLFileInfoFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#GroupId","title":"GroupId","text":"<p><code>property GroupId: Cardinal read FGid</code></p> <p>Type: <code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#HasGroupR","title":"HasGroupR","text":"<p><code>property HasGroupR: Boolean read GetHasGroupR</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#HasGroupW","title":"HasGroupW","text":"<p><code>property HasGroupW: Boolean read GetHasGroupW</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#HasGroupX","title":"HasGroupX","text":"<p><code>property HasGroupX: Boolean read GetHasGroupX</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#HasOtherR","title":"HasOtherR","text":"<p><code>property HasOtherR: Boolean read GetHasOtherR</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#HasOtherW","title":"HasOtherW","text":"<p><code>property HasOtherW: Boolean read GetHasOtherW</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#HasOtherX","title":"HasOtherX","text":"<p><code>property HasOtherX: Boolean read GetHasOtherX</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#HasOwnerR","title":"HasOwnerR","text":"<p><code>property HasOwnerR: Boolean read GetHasOwnerR</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#HasOwnerW","title":"HasOwnerW","text":"<p><code>property HasOwnerW: Boolean read GetHasOwnerW</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#HasOwnerX","title":"HasOwnerX","text":"<p><code>property HasOwnerX: Boolean read GetHasOwnerX</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#HasSetGid","title":"HasSetGid","text":"<p><code>property HasSetGid: Boolean read GetHasSetGid</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#HasSetUid","title":"HasSetUid","text":"<p><code>property HasSetUid: Boolean read GetHasSetUid</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#IsArchive","title":"IsArchive","text":"<p><code>property IsArchive: Boolean read GetIsArchive</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#IsBlockDevice","title":"IsBlockDevice","text":"<p><code>property IsBlockDevice: Boolean read GetIsBlockDevice</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#IsCharDevice","title":"IsCharDevice","text":"<p><code>property IsCharDevice: Boolean read GetIsCharDevice</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#IsDirectory","title":"IsDirectory","text":"<p><code>property IsDirectory: Boolean read GetIsDirectory</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#IsExecutable","title":"IsExecutable","text":"<p><code>property IsExecutable: Boolean read GetIsExecutable</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#IsFifo","title":"IsFifo","text":"<p><code>property IsFifo: Boolean read GetIsFifo</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#IsHidden","title":"IsHidden","text":"<p><code>property IsHidden: Boolean read GetIsHidden</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#IsRegular","title":"IsRegular","text":"<p><code>property IsRegular: Boolean read GetIsRegular</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#IsSocket","title":"IsSocket","text":"<p><code>property IsSocket: Boolean read GetIsSocket</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#IsSymLink","title":"IsSymLink","text":"<p><code>property IsSymLink: Boolean read GetIsSymLink</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#IsSystem","title":"IsSystem","text":"<p><code>property IsSystem: Boolean read GetIsSystem</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#IsValid","title":"IsValid","text":"<p><code>property IsValid: Boolean read GetIsValid</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#ModifiedTime","title":"ModifiedTime","text":"<p><code>property ModifiedTime: TDateTime read GetModifiedTime</code></p> <p>Type: <code>TDateTime</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#Size","title":"Size","text":"<p><code>property Size: Int64 read FSize</code></p> <p>Type: <code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#UserId","title":"UserId","text":"<p><code>property UserId: Cardinal read FUid</code></p> <p>Type: <code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFileInfo/#HasFlag","title":"HasFlag(TBLFileInfoFlag)","text":"<p><code>function HasFlag(const AFlag: TBLFileInfoFlag): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#parameters","title":"Parameters","text":"<p><code>AFlag</code>: <code>TBLFileInfoFlag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileInfo/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/","title":"TBLFileSystem","text":"<p>File-system utilities. </p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFileSystem = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#methods","title":"Methods","text":"Name Description FileInfo ReadFile WriteFile(String, TBytes) WriteFile(String, TBLArray&lt;Byte&gt;) WriteFile(String, TBLArrayView&lt;Byte&gt;, NativeInt) WriteFile(String, , NativeInt)"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFileSystem/#FileInfo","title":"FileInfo(String)","text":"<p><code>class function FileInfo(const AFilename: String): TBLFileInfo; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#parameters","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#returns","title":"Returns","text":"<p><code>TBLFileInfo</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#ReadFile","title":"ReadFile(String, TBLArray&lt;Byte&gt;, NativeInt, TBLFileReadFlags)","text":"<p><code>class procedure ReadFile(const AFilename: String; const ADst: TBLArray&lt;Byte&gt;; const AMaxSize: NativeInt = 0; const AReadFlags: TBLFileReadFlags = []); inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#parameters_1","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p> <p><code>ADst</code>: <code>TBLArray&lt;Byte&gt;</code></p> <p><code>AMaxSize</code>: <code>NativeInt = 0</code></p> <p><code>AReadFlags</code>: <code>TBLFileReadFlags = []</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#WriteFile_0","title":"WriteFile(String, TBytes)","text":"<p><code>class function WriteFile(const AFilename: String; const AData: TBytes): NativeInt; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#parameters_2","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p> <p><code>AData</code>: <code>TBytes</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#returns_1","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#WriteFile_1","title":"WriteFile(String, TBLArray&lt;Byte&gt;)","text":"<p><code>class function WriteFile(const AFilename: String; const AData: TBLArray&lt;Byte&gt;): NativeInt; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#parameters_3","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p> <p><code>AData</code>: <code>TBLArray&lt;Byte&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#returns_2","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#WriteFile_2","title":"WriteFile(String, TBLArrayView&lt;Byte&gt;, NativeInt)","text":"<p><code>class function WriteFile(const AFilename: String; const AData: TBLArrayView&lt;Byte&gt;; const ASize: NativeInt): NativeInt; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#parameters_4","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p> <p><code>AData</code>: <code>TBLArrayView&lt;Byte&gt;</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#returns_3","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#WriteFile_3","title":"WriteFile(String, [untyped], NativeInt)","text":"<p><code>class function WriteFile(const AFilename: String; const AData; const ASize: NativeInt): NativeInt; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#parameters_5","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p> <p><code>AData</code>: </p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFileSystem/#returns_4","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/","title":"TBLFont","text":"<p>Font. </p>"},{"location":"Reference/Blend2D/classes/TBLFont/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFont = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFont/#properties","title":"Properties","text":"Name Description DesignMetrics The design metrics of the font. Face The font's associated font face. FaceFlags The flags of the font. FaceType The type of the font's associated font face. FeatureSettings Font feature settings. IsEmpty Tests whether the font is empty, which is the same as <code>not IsValid</code>. IsValid Whether the font is a valid instance. Matrix A 2x2 matrix of the font. Metrics The scaled metrics of the font. Size The size of the font. Stretch The stretch of the font. Style The style of the font. UnitsPerEm The \"units per em\" (UPEM) of the font's associated font face. VariationSettings Font variation settings. Weight The weight of the font."},{"location":"Reference/Blend2D/classes/TBLFont/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> font. Finalize Destroys the font. Initialize Creates a default initialized font."},{"location":"Reference/Blend2D/classes/TBLFont/#operators","title":"Operators","text":"Name Description Equal(TBLFont, TBLFont) Returns True if two fonts are equal (have the same contents). Equal(TBLFont, Pointer) Used to compare against <code>nil</code> (null font). NotEqual(TBLFont, TBLFont) Returns True if two fonts are not equal (do not have the same contents). NotEqual(TBLFont, Pointer) Used to compare against <code>nil</code> (null font)."},{"location":"Reference/Blend2D/classes/TBLFont/#methods","title":"Methods","text":"Name Description ApplyGPos ApplyGSub ApplyKerning Equals Tests whether this and <code>AOther</code> fonts are equal. GetGlyphAdvances(PUInt32, NativeInt, NativeInt) GetGlyphAdvances(PUInt32, NativeInt, NativeInt, PBLGlyphPlacement) GetGlyphBounds(PUInt32, NativeInt, NativeInt) GetGlyphBounds(PUInt32, NativeInt, NativeInt, PBLBoxI) GetGlyphOutlines(TBLGlyphId, TBLMatrix2D, TBLPath, TBLPathSinkFunc, Pointer) Retrieves outlines of a single glyph into the <code>AOut</code> path transformed by <code>AUsserTransform</code>. GetGlyphOutlines(TBLGlyphId, TBLPath, TBLPathSinkFunc, Pointer) Retrieves outlines of a single glyph into the <code>AOut</code> path. GetGlyphRunOutlines(TBLGlyphRun, TBLMatrix2D, TBLPath, TBLPathSinkFunc, Pointer) Retrieves outlines of a glyph run into the <code>AOut</code> path transformed by <code>AUserTransform</code>. GetGlyphRunOutlines(TBLGlyphRun, TBLPath, TBLPathSinkFunc, Pointer) Retrieves outlines of a glyph run into the <code>AOut</code> path. GetTextMetrics MakeFromFace(TBLFontFace, Single, TBLFontFeatureSettings, TBLFontVariationSettings) Creates a new font from the existing font <code>AFace</code> scaled to the given <code>ASize</code>. MakeFromFace(TBLFontFace, Single, TBLFontFeatureSettings) Creates a new font from the existing font <code>AFace</code> scaled to the given <code>ASize</code>. MakeFromFace(TBLFontFace, Single) Creates a new font from the existing font <code>AFace</code> scaled to the given <code>ASize</code>. MapTextToGlyphs(TBLGlyphBuffer, TBLGlyphMappingState) MapTextToGlyphs(TBLGlyphBuffer) PositionGlyphs Reset Resets the font to a default constructed state. ResetFeatureSettings Resets font feature settings. ResetVariationSettings Resets font variation settings. Shape Swap Swaps the underlying representation of this font with the <code>AOther</code> font."},{"location":"Reference/Blend2D/classes/TBLFont/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFont/#DesignMetrics","title":"DesignMetrics","text":"<p>The design metrics of the font.</p> <p>The returned metrics is compatible with the metrics of <code>TBLFontFace</code> associated with this font. </p> <p><code>property DesignMetrics: PBLFontDesignMetrics read GetDesignMetrics</code></p> <p>Type: <code>PBLFontDesignMetrics</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#see-also","title":"See Also","text":"<ul> <li>TBLFontFace</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFont/#Face","title":"Face","text":"<p>The font's associated font face.</p> <p>Returns the same font face, which was passed to <code>MakeFromFace</code>. </p> <p><code>property Face: TBLFontFace read GetFace</code></p> <p>Type: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#see-also_1","title":"See Also","text":"<ul> <li>MakeFromFace</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFont/#FaceFlags","title":"FaceFlags","text":"<p>The flags of the font. </p> <p><code>property FaceFlags: TBLFontFaceFlags read GetFaceFlags</code></p> <p>Type: <code>TBLFontFaceFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#FaceType","title":"FaceType","text":"<p>The type of the font's associated font face. </p> <p><code>property FaceType: TBLFontFaceType read GetFaceType</code></p> <p>Type: <code>TBLFontFaceType</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#FeatureSettings","title":"FeatureSettings","text":"<p>Font feature settings. </p> <p><code>property FeatureSettings: TBLFontFeatureSettings read GetFeatureSettings write SetFeatureSettings</code></p> <p>Type: <code>TBLFontFeatureSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#IsEmpty","title":"IsEmpty","text":"<p>Tests whether the font is empty, which is the same as <code>not IsValid</code>. </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#IsValid","title":"IsValid","text":"<p>Whether the font is a valid instance. </p> <p><code>property IsValid: Boolean read GetIsValid</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Matrix","title":"Matrix","text":"<p>A 2x2 matrix of the font.</p> <p>The returned <code>TBLFontMatrix</code> is used to scale fonts from design units into user units. The matrix usually has a negative <code>M11</code> member as fonts use a different coordinate system than Blend2D. </p> <p><code>property Matrix: TBLFontMatrix read GetMatrix</code></p> <p>Type: <code>TBLFontMatrix</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Metrics","title":"Metrics","text":"<p>The scaled metrics of the font.</p> <p>The returned metrics is a scale of design metrics that match the font size and its options. </p> <p><code>property Metrics: PBLFontMetrics read GetMetrics</code></p> <p>Type: <code>PBLFontMetrics</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Size","title":"Size","text":"<p>The size of the font. </p> <p><code>property Size: Single read GetSize write SetSize</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Stretch","title":"Stretch","text":"<p>The stretch of the font. </p> <p><code>property Stretch: TBLFontStretch read GetStretch</code></p> <p>Type: <code>TBLFontStretch</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Style","title":"Style","text":"<p>The style of the font. </p> <p><code>property Style: TBLFontStyle read GetStyle</code></p> <p>Type: <code>TBLFontStyle</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#UnitsPerEm","title":"UnitsPerEm","text":"<p>The \"units per em\" (UPEM) of the font's associated font face. </p> <p><code>property UnitsPerEm: Integer read GetUnitsPerEm</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#VariationSettings","title":"VariationSettings","text":"<p>Font variation settings. </p> <p><code>property VariationSettings: TBLFontVariationSettings read GetVariationSettings write SetVariationSettings</code></p> <p>Type: <code>TBLFontVariationSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Weight","title":"Weight","text":"<p>The weight of the font. </p> <p><code>property Weight: TBLFontWeight read GetWeight</code></p> <p>Type: <code>TBLFontWeight</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFont/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> font. </p> <p><code>constructor Assign(var ADest: TBLFont; const ASrc: TBLFont); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFont</code></p> <p><code>ASrc</code>: <code>TBLFont</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the font. </p> <p><code>destructor Finalize(var ADest: TBLFont)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFont</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default initialized font.</p> <p>A default initialized font is not a valid font that could be used for rendering. It can be considered an empty or null font, which has no family, no glyphs, no tables, it's essentially empty. </p> <p><code>constructor Initialize(out ADest: TBLFont)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFont</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFont/#Equal_0","title":"Equal(TBLFont, TBLFont)","text":"<p>Returns True if two fonts are equal (have the same contents). </p> <p><code>class operator Equal(const ALeft, ARight: TBLFont): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFont</code></p> <p><code>ARight</code>: <code>TBLFont</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Equal_1","title":"Equal(TBLFont, Pointer)","text":"<p>Used to compare against <code>nil</code> (null font). </p> <p><code>class operator Equal(const ALeft: TBLFont; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFont</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#NotEqual_0","title":"NotEqual(TBLFont, TBLFont)","text":"<p>Returns True if two fonts are not equal (do not have the same contents). </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLFont): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFont</code></p> <p><code>ARight</code>: <code>TBLFont</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#NotEqual_1","title":"NotEqual(TBLFont, Pointer)","text":"<p>Used to compare against <code>nil</code> (null font). </p> <p><code>class operator NotEqual(const ALeft: TBLFont; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFont</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFont/#ApplyGPos","title":"ApplyGPos(TBLGlyphBuffer, TBLBitArray)","text":"<p><code>procedure ApplyGPos(const AGB: TBLGlyphBuffer; const ALookups: TBLBitArray); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_7","title":"Parameters","text":"<p><code>AGB</code>: <code>TBLGlyphBuffer</code></p> <p><code>ALookups</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#ApplyGSub","title":"ApplyGSub(TBLGlyphBuffer, TBLBitArray)","text":"<p><code>procedure ApplyGSub(const AGB: TBLGlyphBuffer; const ALookups: TBLBitArray); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_8","title":"Parameters","text":"<p><code>AGB</code>: <code>TBLGlyphBuffer</code></p> <p><code>ALookups</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#ApplyKerning","title":"ApplyKerning(TBLGlyphBuffer)","text":"<p><code>procedure ApplyKerning(const AGB: TBLGlyphBuffer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_9","title":"Parameters","text":"<p><code>AGB</code>: <code>TBLGlyphBuffer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Equals","title":"Equals(TBLFont)","text":"<p>Tests whether this and <code>AOther</code> fonts are equal. </p> <p><code>function Equals(const AOther: TBLFont): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_10","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFont</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#GetGlyphAdvances_0","title":"GetGlyphAdvances(PUInt32, NativeInt, NativeInt)","text":"<p><code>function GetGlyphAdvances(const AGlyphData: PUInt32; const AGlyphAdvance, ACount: NativeInt): TArray&lt;TBLGlyphPlacement&gt;; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_11","title":"Parameters","text":"<p><code>AGlyphData</code>: <code>PUInt32</code></p> <p><code>AGlyphAdvance</code>: <code>NativeInt</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#returns_5","title":"Returns","text":"<p><code>TArray&lt;TBLGlyphPlacement&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#GetGlyphAdvances_1","title":"GetGlyphAdvances(PUInt32, NativeInt, NativeInt, PBLGlyphPlacement)","text":"<p><code>procedure GetGlyphAdvances(const AGlyphData: PUInt32; const AGlyphAdvance, ACount: NativeInt; out APlacements: PBLGlyphPlacement); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_12","title":"Parameters","text":"<p><code>AGlyphData</code>: <code>PUInt32</code></p> <p><code>AGlyphAdvance</code>: <code>NativeInt</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>APlacements</code>: <code>PBLGlyphPlacement</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#GetGlyphBounds_0","title":"GetGlyphBounds(PUInt32, NativeInt, NativeInt)","text":"<p><code>function GetGlyphBounds(const AGlyphData: PUInt32; const AGlyphAdvance, ACount: NativeInt): TArray&lt;TBLBoxI&gt;; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_13","title":"Parameters","text":"<p><code>AGlyphData</code>: <code>PUInt32</code></p> <p><code>AGlyphAdvance</code>: <code>NativeInt</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#returns_6","title":"Returns","text":"<p><code>TArray&lt;TBLBoxI&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#GetGlyphBounds_1","title":"GetGlyphBounds(PUInt32, NativeInt, NativeInt, PBLBoxI)","text":"<p><code>procedure GetGlyphBounds(const AGlyphData: PUInt32; const AGlyphAdvance, ACount: NativeInt; out ABounds: PBLBoxI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_14","title":"Parameters","text":"<p><code>AGlyphData</code>: <code>PUInt32</code></p> <p><code>AGlyphAdvance</code>: <code>NativeInt</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ABounds</code>: <code>PBLBoxI</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#GetGlyphOutlines_0","title":"GetGlyphOutlines(TBLGlyphId, TBLMatrix2D, TBLPath, TBLPathSinkFunc, Pointer)","text":"<p>Retrieves outlines of a single glyph into the <code>AOut</code> path transformed by <code>AUsserTransform</code>.</p> <p>Optionally, a user can provide a <code>ASink</code> function with <code>AUserData</code>, which will be called periodically by the glyph outline decoder. The <code>ASink</code> can be used to immediately process the outline to prevent accumulating a large path in <code>AOut</code>. </p> <p><code>procedure GetGlyphOutlines(const AGlyphId: TBLGlyphId; const AUserTransform: TBLMatrix2D; const AOut: TBLPath; const ASink: TBLPathSinkFunc = nil; const AUserData: Pointer = nil); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_15","title":"Parameters","text":"<p><code>AGlyphId</code>: <code>TBLGlyphId</code></p> <p><code>AUserTransform</code>: <code>TBLMatrix2D</code></p> <p><code>AOut</code>: <code>TBLPath</code></p> <p><code>ASink</code>: <code>TBLPathSinkFunc = nil</code></p> <p><code>AUserData</code>: <code>Pointer = nil</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#GetGlyphOutlines_1","title":"GetGlyphOutlines(TBLGlyphId, TBLPath, TBLPathSinkFunc, Pointer)","text":"<p>Retrieves outlines of a single glyph into the <code>AOut</code> path.</p> <p>Optionally, a user can provide a <code>ASink</code> function with <code>AUserData</code>, which will be called periodically by the glyph outline decoder. The <code>ASink</code> can be used to immediately process the outline to prevent accumulating a large path in <code>AOut</code>. </p> <p><code>procedure GetGlyphOutlines(const AGlyphId: TBLGlyphId; const AOut: TBLPath; const ASink: TBLPathSinkFunc = nil; const AUserData: Pointer = nil); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_16","title":"Parameters","text":"<p><code>AGlyphId</code>: <code>TBLGlyphId</code></p> <p><code>AOut</code>: <code>TBLPath</code></p> <p><code>ASink</code>: <code>TBLPathSinkFunc = nil</code></p> <p><code>AUserData</code>: <code>Pointer = nil</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#GetGlyphRunOutlines_0","title":"GetGlyphRunOutlines(TBLGlyphRun, TBLMatrix2D, TBLPath, TBLPathSinkFunc, Pointer)","text":"<p>Retrieves outlines of a glyph run into the <code>AOut</code> path transformed by <code>AUserTransform</code>.</p> <p>Optionally, a user can provide a <code>ASink</code> function with <code>AUserData</code>, which will be called periodically by the glyph outline decoder. The <code>ASink</code> can be used to immediately process the outline to prevent accumulating a large path in <code>AOut</code>. </p> <p><code>procedure GetGlyphRunOutlines(const AGlyphRun: TBLGlyphRun; const AUserTransform: TBLMatrix2D; const AOut: TBLPath; const ASink: TBLPathSinkFunc = nil; const AUserData: Pointer = nil); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_17","title":"Parameters","text":"<p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AUserTransform</code>: <code>TBLMatrix2D</code></p> <p><code>AOut</code>: <code>TBLPath</code></p> <p><code>ASink</code>: <code>TBLPathSinkFunc = nil</code></p> <p><code>AUserData</code>: <code>Pointer = nil</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#GetGlyphRunOutlines_1","title":"GetGlyphRunOutlines(TBLGlyphRun, TBLPath, TBLPathSinkFunc, Pointer)","text":"<p>Retrieves outlines of a glyph run into the <code>AOut</code> path.</p> <p>Optionally, a user can provide a <code>ASink</code> function with <code>AUserData</code>, which will be called periodically by the glyph outline decoder. The <code>ASink</code> can be used to immediately process the outline to prevent accumulating a large path in <code>AOut</code>. </p> <p><code>procedure GetGlyphRunOutlines(const AGlyphRun: TBLGlyphRun; const AOut: TBLPath; const ASink: TBLPathSinkFunc = nil; const AUserData: Pointer = nil); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_18","title":"Parameters","text":"<p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p> <p><code>AOut</code>: <code>TBLPath</code></p> <p><code>ASink</code>: <code>TBLPathSinkFunc = nil</code></p> <p><code>AUserData</code>: <code>Pointer = nil</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#GetTextMetrics","title":"GetTextMetrics(TBLGlyphBuffer, TBLTextMetrics)","text":"<p><code>procedure GetTextMetrics(const AGB: TBLGlyphBuffer; out AMetrics: TBLTextMetrics); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_19","title":"Parameters","text":"<p><code>AGB</code>: <code>TBLGlyphBuffer</code></p> <p><code>AMetrics</code>: <code>TBLTextMetrics</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#MakeFromFace_0","title":"MakeFromFace(TBLFontFace, Single, TBLFontFeatureSettings, TBLFontVariationSettings)","text":"<p>Creates a new font from the existing font <code>AFace</code> scaled to the given <code>ASize</code>.</p> <p>This is an overloaded function that takes additional arguments, which are used to override font <code>AFeatureSettings</code> and font <code>AVariationSettings</code>. </p> <p><code>procedure MakeFromFace(const AFace: TBLFontFace; const ASize: Single; const AFeatureSettings: TBLFontFeatureSettings; const AVariationSettings: TBLFontVariationSettings); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_10","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_20","title":"Parameters","text":"<p><code>AFace</code>: <code>TBLFontFace</code></p> <p><code>ASize</code>: <code>Single</code></p> <p><code>AFeatureSettings</code>: <code>TBLFontFeatureSettings</code></p> <p><code>AVariationSettings</code>: <code>TBLFontVariationSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#MakeFromFace_1","title":"MakeFromFace(TBLFontFace, Single, TBLFontFeatureSettings)","text":"<p>Creates a new font from the existing font <code>AFace</code> scaled to the given <code>ASize</code>.</p> <p>This is an overloaded function that takes additional argument <code>AFeatureSettings</code>. </p> <p><code>procedure MakeFromFace(const AFace: TBLFontFace; const ASize: Single; const AFeatureSettings: TBLFontFeatureSettings); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_11","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_21","title":"Parameters","text":"<p><code>AFace</code>: <code>TBLFontFace</code></p> <p><code>ASize</code>: <code>Single</code></p> <p><code>AFeatureSettings</code>: <code>TBLFontFeatureSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#MakeFromFace_2","title":"MakeFromFace(TBLFontFace, Single)","text":"<p>Creates a new font from the existing font <code>AFace</code> scaled to the given <code>ASize</code>. </p> <p><code>procedure MakeFromFace(const AFace: TBLFontFace; const ASize: Single); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_12","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_22","title":"Parameters","text":"<p><code>AFace</code>: <code>TBLFontFace</code></p> <p><code>ASize</code>: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#MapTextToGlyphs_0","title":"MapTextToGlyphs(TBLGlyphBuffer, TBLGlyphMappingState)","text":"<p><code>procedure MapTextToGlyphs(const AGB: TBLGlyphBuffer; out AStateOut: TBLGlyphMappingState); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_23","title":"Parameters","text":"<p><code>AGB</code>: <code>TBLGlyphBuffer</code></p> <p><code>AStateOut</code>: <code>TBLGlyphMappingState</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#MapTextToGlyphs_1","title":"MapTextToGlyphs(TBLGlyphBuffer)","text":"<p><code>procedure MapTextToGlyphs(const AGB: TBLGlyphBuffer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_24","title":"Parameters","text":"<p><code>AGB</code>: <code>TBLGlyphBuffer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#PositionGlyphs","title":"PositionGlyphs(TBLGlyphBuffer)","text":"<p><code>procedure PositionGlyphs(const AGB: TBLGlyphBuffer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_25","title":"Parameters","text":"<p><code>AGB</code>: <code>TBLGlyphBuffer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Reset","title":"Reset","text":"<p>Resets the font to a default constructed state. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#ResetFeatureSettings","title":"ResetFeatureSettings","text":"<p>Resets font feature settings. </p> <p><code>procedure ResetFeatureSettings; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_13","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#ResetVariationSettings","title":"ResetVariationSettings","text":"<p>Resets font variation settings. </p> <p><code>procedure ResetVariationSettings; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#exceptions_14","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Shape","title":"Shape(TBLGlyphBuffer)","text":"<p><code>procedure Shape(const AGB: TBLGlyphBuffer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_26","title":"Parameters","text":"<p><code>AGB</code>: <code>TBLGlyphBuffer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#Swap","title":"Swap(TBLFont)","text":"<p>Swaps the underlying representation of this font with the <code>AOther</code> font. </p> <p><code>procedure Swap(var AOther: TBLFont); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFont/#parameters_27","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFont</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/","title":"TBLFontData","text":"<p>Font data. </p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontData = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontData/#properties","title":"Properties","text":"Name Description FaceCount The number of faces of this font data. FaceType Type of font face that this data describes. Flags Returns font data flags. IsCollection Whether this font data is a font-collection. IsEmpty Whether the font data is empty, which is the same as <code>not IsValid</code>. IsValid Whether the font data is not a built-in null instance."},{"location":"Reference/Blend2D/classes/TBLFontData/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> font data. Finalize Destroys the font data. Initialize Creates a default initialized font data."},{"location":"Reference/Blend2D/classes/TBLFontData/#operators","title":"Operators","text":"Name Description Equal(TBLFontData, TBLFontData) Returns True if two font data instances are equal (have the same contents). Equal(TBLFontData, Pointer) Used to compare against <code>nil</code> (empty font data). NotEqual(TBLFontData, TBLFontData) Returns True if two font data instances are not equal (do not have the same contents). NotEqual(TBLFontData, Pointer) Used to compare against <code>nil</code> (empty font data)."},{"location":"Reference/Blend2D/classes/TBLFontData/#methods","title":"Methods","text":"Name Description Equals Tests whether this and <code>AOther</code> font data are equal. GetTable GetTables GetTableTags(Integer) Returns an array with all table tags provided by font face at the given <code>AFaceIndex</code>. GetTableTags(Integer, TBLArray&lt;TBLTag&gt;) Populates <code>ADst</code> array with all table tags provided by font face at the given <code>AFaceIndex</code>. MakeFromData(Pointer, NativeInt, TBLDestroyExternalDataFunc, Pointer) Creates <code>TBLFontData</code> from the given <code>AData</code> of the given <code>ASize</code>. MakeFromData(TBLArray&lt;Byte&gt;) Creates a <code>TBLFontData</code> from the given <code>AData</code> stored in `TBLArray MakeFromData(TBytes) Creates a <code>TBLFontData</code> from the given <code>AData</code>. MakeFromFile Creates a <code>TBLFontData</code> from a file specified by the given <code>AFilename</code>. Reset Swap"},{"location":"Reference/Blend2D/classes/TBLFontData/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontData/#FaceCount","title":"FaceCount","text":"<p>The number of faces of this font data.</p> <p>If the data is not initialized the result would be always zero. If the data is initialized to a single font it would be 1, and if the data is initialized to a font collection then the return would correspond to the number of font faces within that collection. </p> <p><code>property FaceCount: Integer read GetFaceCount</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#see-also","title":"See Also","text":"<ul> <li>IsCollection</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFontData/#remarks","title":"Remarks","text":"<p>You should not use <code>FaceCount</code> to check whether the font is a collection as it's possible to have a font-collection with just a single font. Using <code>IsCollection</code> is more reliable and would always return the right value. </p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#FaceType","title":"FaceType","text":"<p>Type of font face that this data describes.</p> <p>It doesn't matter if the content is a single font or a collection. In any case the <code>FaceType</code> would always return the type of the font face that will be created by <code>TBLFontFace.MakeFromData</code>. </p> <p><code>property FaceType: TBLFontFaceType read GetFaceType</code></p> <p>Type: <code>TBLFontFaceType</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#see-also_1","title":"See Also","text":"<ul> <li>TBLFontFace.MakeFromData</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFontData/#Flags","title":"Flags","text":"<p>Returns font data flags. </p> <p><code>property Flags: TBLFontDataFlags read GetFlags</code></p> <p>Type: <code>TBLFontDataFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#IsCollection","title":"IsCollection","text":"<p>Whether this font data is a font-collection. </p> <p><code>property IsCollection: Boolean read GetIsCollection</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#IsEmpty","title":"IsEmpty","text":"<p>Whether the font data is empty, which is the same as <code>not IsValid</code>. </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#IsValid","title":"IsValid","text":"<p>Whether the font data is not a built-in null instance. </p> <p><code>property IsValid: Boolean read GetIsValid</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontData/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> font data. </p> <p><code>constructor Assign(var ADest: TBLFontData; const ASrc: TBLFontData); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontData</code></p> <p><code>ASrc</code>: <code>TBLFontData</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the font data. </p> <p><code>destructor Finalize(var ADest: TBLFontData)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontData</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default initialized font data. </p> <p><code>constructor Initialize(out ADest: TBLFontData)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontData</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontData/#Equal_0","title":"Equal(TBLFontData, TBLFontData)","text":"<p>Returns True if two font data instances are equal (have the same contents). </p> <p><code>class operator Equal(const ALeft, ARight: TBLFontData): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontData</code></p> <p><code>ARight</code>: <code>TBLFontData</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#Equal_1","title":"Equal(TBLFontData, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty font data). </p> <p><code>class operator Equal(const ALeft: TBLFontData; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontData</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#NotEqual_0","title":"NotEqual(TBLFontData, TBLFontData)","text":"<p>Returns True if two font data instances are not equal (do not have the same contents). </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLFontData): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontData</code></p> <p><code>ARight</code>: <code>TBLFontData</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#NotEqual_1","title":"NotEqual(TBLFontData, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty font data). </p> <p><code>class operator NotEqual(const ALeft: TBLFontData; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontData</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontData/#Equals","title":"Equals(TBLFontData)","text":"<p>Tests whether this and <code>AOther</code> font data are equal. </p> <p><code>function Equals(const AOther: TBLFontData): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_7","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontData</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#GetTable","title":"GetTable(Integer, TBLTag)","text":"<p><code>function GetTable(const AFaceIndex: Integer; const ATag: TBLTag): TBLFontTable; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_8","title":"Parameters","text":"<p><code>AFaceIndex</code>: <code>Integer</code></p> <p><code>ATag</code>: <code>TBLTag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#returns_5","title":"Returns","text":"<p><code>TBLFontTable</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#GetTables","title":"GetTables(Integer, TArray&lt;TBLTag&gt;)","text":"<p><code>function GetTables(const AFaceIndex: Integer; const ATags: TArray&lt;TBLTag&gt;): TArray&lt;TBLFontTable&gt;; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_9","title":"Parameters","text":"<p><code>AFaceIndex</code>: <code>Integer</code></p> <p><code>ATags</code>: <code>TArray&lt;TBLTag&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#returns_6","title":"Returns","text":"<p><code>TArray&lt;TBLFontTable&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#GetTableTags_0","title":"GetTableTags(Integer)","text":"<p>Returns an array with all table tags provided by font face at the given <code>AFaceIndex</code>. </p> <p><code>function GetTableTags(const AFaceIndex: Integer): TArray&lt;TBLTag&gt;; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_10","title":"Parameters","text":"<p><code>AFaceIndex</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#returns_7","title":"Returns","text":"<p><code>TArray&lt;TBLTag&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#GetTableTags_1","title":"GetTableTags(Integer, TBLArray&lt;TBLTag&gt;)","text":"<p>Populates <code>ADst</code> array with all table tags provided by font face at the given <code>AFaceIndex</code>. </p> <p><code>procedure GetTableTags(const AFaceIndex: Integer; const ADst: TBLArray&lt;TBLTag&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_11","title":"Parameters","text":"<p><code>AFaceIndex</code>: <code>Integer</code></p> <p><code>ADst</code>: <code>TBLArray&lt;TBLTag&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#MakeFromData_0","title":"MakeFromData(Pointer, NativeInt, TBLDestroyExternalDataFunc, Pointer)","text":"<p>Creates <code>TBLFontData</code> from the given <code>AData</code> of the given <code>ASize</code>. </p> <p><code>procedure MakeFromData(const AData: Pointer; const ASize: NativeInt; const ADestroyFunc: TBLDestroyExternalDataFunc = nil; const AUserData: Pointer = nil); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_12","title":"Parameters","text":"<p><code>AData</code>: <code>Pointer</code></p> <p><code>ASize</code>: <code>NativeInt</code></p> <p><code>ADestroyFunc</code>: <code>TBLDestroyExternalDataFunc = nil</code></p> <p><code>AUserData</code>: <code>Pointer = nil</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#remarks_1","title":"Remarks","text":"<p>Optionally an <code>ADestroyFunc</code> can be used as a notifier that will be called when the data is no longer needed. Destroy func will be called with <code>AUserData</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#MakeFromData_1","title":"MakeFromData(TBLArray&lt;Byte&gt;)","text":"<p>Creates a <code>TBLFontData</code> from the given <code>AData</code> stored in <code>TBLArray&lt;byte&gt;</code>.</p> <p>The given <code>AData</code> would be weak copied on success so the given array can be safely destroyed after the function returns. The weak copy of the passed <code>AData</code> is internal and there is no API to access it after the function returns. The reason for making it internal is that multiple implementations of <code>TBLFontData</code> may exist and some can only store data at table level, so Blend2D doesn't expose the detail about how the data is stored. Raised on failure.</p> <p><code>procedure MakeFromData(const AData: TBLArray&lt;Byte&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_13","title":"Parameters","text":"<p><code>AData</code>: <code>TBLArray&lt;Byte&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#MakeFromData_2","title":"MakeFromData(TBytes)","text":"<p>Creates a <code>TBLFontData</code> from the given <code>AData</code>. </p> <p><code>procedure MakeFromData(const AData: TBytes); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_14","title":"Parameters","text":"<p><code>AData</code>: <code>TBytes</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#MakeFromFile","title":"MakeFromFile(String, TBLFileReadFlags)","text":"<p>Creates a <code>TBLFontData</code> from a file specified by the given <code>AFilename</code>. </p> <p><code>procedure MakeFromFile(const AFilename: String; const AReadFlags: TBLFileReadFlags = []); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_15","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p> <p><code>AReadFlags</code>: <code>TBLFileReadFlags = []</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#remarks_2","title":"Remarks","text":"<p>The <code>AReadFlags</code> argument allows to specify flags that will be passed to <code>TBLFileSystem.ReadFile</code> to read the content of the file. It's possible to use memory mapping to get its content, which is the recommended way for reading system fonts. The best combination is to use <code>TBLFileReadFlag.MmapEnabled</code> flag combined with <code>TBLFileReadFlag.MmapAvoidSmall</code>. This combination means to try to use memory mapping only when the size of the font is greater than a minimum value (determined by Blend2D), and would fallback to a regular open/read in case the memory mapping is not possible or failed for some other reason. Please note that not all files can be memory mapped so <code>TBLFileReadFlag.MmapNoFallback</code>flag is not recommended. </p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#Swap","title":"Swap(TBLFontData)","text":"<p><code>procedure Swap(var AOther: TBLFontData); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontData/#parameters_16","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontData</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/","title":"TBLFontDesignMetrics","text":"<p>Design metrics of a font.</p> <p>Design metrics is information that <code>TBLFontFace</code> collected directly from the font data. It means that all fields are measured in font design units.</p> <p>When a new <code>TBLFont</code> instance is created a scaled metrics <code>TBLFontMetrics</code> is automatically calculated from <code>TBLFontDesignMetrics</code> including other members like transformation, etc... </p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontDesignMetrics = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#see-also","title":"See Also","text":"<ul> <li>TBLFontFace</li> <li>TBLFont</li> <li>TBLFontMetrics</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#properties","title":"Properties","text":"Name Description Ascent Ascent (horizontal layout). CapHeight Maximum height of a capital letter above the baseline. Descent Descent (horizontal layout). GlyphBoundingBox Aggregated bounding box of all glyphs in the font. HMaxAdvance Maximum advance (horizontal layout). HMinLsb Minimum leading-side bearing (horizontal layout). HMinTsb Minimum trailing-side bearing (horizontal layout). LineGap Line gap. LowestPpEm Lowest readable size in pixels. StrikethroughPosition Text strikethrough position. StrikethroughThickness Text strikethrough thickness. UnderlinePosition Text underline position. UnderlineThickness Text underline thickness. UnitsPerEm Units per EM square. VAscent Ascent (vertical layout). VDescent Descent (vertical layout). VMaxAdvance Maximum advance (vertical layout). VMinLsb Minimum leading-side bearing (vertical layout). VMinTsb Minimum trailing-side bearing (vertical layout). XHeight Distance between the baseline and the mean line of lower-case letters."},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#Ascent","title":"Ascent","text":"<p>Ascent (horizontal layout). </p> <p><code>property Ascent: Integer read FAscent</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#CapHeight","title":"CapHeight","text":"<p>Maximum height of a capital letter above the baseline. </p> <p><code>property CapHeight: Integer read FCapHeight</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#Descent","title":"Descent","text":"<p>Descent (horizontal layout). </p> <p><code>property Descent: Integer read FDescent</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#GlyphBoundingBox","title":"GlyphBoundingBox","text":"<p>Aggregated bounding box of all glyphs in the font. </p> <p><code>property GlyphBoundingBox: TBLBoxI read FGlyphBoundingBox</code></p> <p>Type: <code>TBLBoxI</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#remarks","title":"Remarks","text":"<p>This value is reported by the font data so it's not granted to be true. </p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#HMaxAdvance","title":"HMaxAdvance","text":"<p>Maximum advance (horizontal layout). </p> <p><code>property HMaxAdvance: Integer read FHMaxAdvance</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#HMinLsb","title":"HMinLsb","text":"<p>Minimum leading-side bearing (horizontal layout). </p> <p><code>property HMinLsb: Integer read FHMinLsb</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#HMinTsb","title":"HMinTsb","text":"<p>Minimum trailing-side bearing (horizontal layout). </p> <p><code>property HMinTsb: Integer read FHMinTsb</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#LineGap","title":"LineGap","text":"<p>Line gap. </p> <p><code>property LineGap: Integer read FLineGap</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#LowestPpEm","title":"LowestPpEm","text":"<p>Lowest readable size in pixels. </p> <p><code>property LowestPpEm: Integer read FLowestPpEm</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#StrikethroughPosition","title":"StrikethroughPosition","text":"<p>Text strikethrough position. </p> <p><code>property StrikethroughPosition: Integer read FStrikethroughPosition</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#StrikethroughThickness","title":"StrikethroughThickness","text":"<p>Text strikethrough thickness. </p> <p><code>property StrikethroughThickness: Integer read FStrikethroughThickness</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#UnderlinePosition","title":"UnderlinePosition","text":"<p>Text underline position. </p> <p><code>property UnderlinePosition: Integer read FUnderlinePosition</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#UnderlineThickness","title":"UnderlineThickness","text":"<p>Text underline thickness. </p> <p><code>property UnderlineThickness: Integer read FUnderlineThickness</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#UnitsPerEm","title":"UnitsPerEm","text":"<p>Units per EM square. </p> <p><code>property UnitsPerEm: Integer read FUnitsPerEm</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#VAscent","title":"VAscent","text":"<p>Ascent (vertical layout). </p> <p><code>property VAscent: Integer read FVAscent</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#VDescent","title":"VDescent","text":"<p>Descent (vertical layout). </p> <p><code>property VDescent: Integer read FVDescent</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#VMaxAdvance","title":"VMaxAdvance","text":"<p>Maximum advance (vertical layout). </p> <p><code>property VMaxAdvance: Integer read FVMaxAdvance</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#VMinLsb","title":"VMinLsb","text":"<p>Minimum leading-side bearing (vertical layout). </p> <p><code>property VMinLsb: Integer read FVMinLsb</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#VMinTsb","title":"VMinTsb","text":"<p>Minimum trailing-side bearing (vertical layout). </p> <p><code>property VMinTsb: Integer read FVMinTsb</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#XHeight","title":"XHeight","text":"<p>Distance between the baseline and the mean line of lower-case letters. </p> <p><code>property XHeight: Integer read FXHeight</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontDesignMetrics/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/","title":"TBLFontFace","text":"<p>Font face. </p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontFace = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#properties","title":"Properties","text":"Name Description Data <code>TBLFontData</code> associated with this font face. DesignMetrics Design metrics of this <code>TBLFontFace</code>. DiagFlags Font face diagnostics flags. FaceFlags Font face flags. FaceIndex A zero-based index of this font face. FaceInfo Font face information. FaceType The font face type. FamilyName Family name of the font. FullName Full name of the font. GlyphCount The number of glyphs this font face provides. HasBaselineYAt0 Whether the font face's baseline equals 0. HasCharToGlyphMapping Whether the font face provides character to glyph mapping. HasHorizontalKerning Whether the font face has a legacy horizontal kerning feature ('kern' table with horizontal kerning data). HasHorizontalMetrics Whether the font face has horizontal glyph metrics (advances, side bearings). HasLsbPointXAt0 Whether the font face's left sidebearing point at <code>X</code> equals 0. HasOpenTypeFeatures Whether the font face has OpenType features (GDEF, GPOS, GSUB). HasOpenTypeVariations Whether the font face has OpenType Font Variations feature. HasPanoseData Whether the font face has panose classification. HasTypographicMetrics Whether the font face uses typographic metrics. HasTypographicNames Whether the font face uses typographic family and subfamily names. HasUnicodeCoverage Whether the font face has unicode coverage information. HasVariationSequences Whether the font face has unicode variation sequences feature. HasVerticalKerning Whether the font face has a legacy vertical kerning feature ('kern' table with vertical kerning data). HasVerticalMetrics Whether the font face has vertical glyph metrics (advances, side bearings). IsEmpty Tests whether the font face is empty, which is the same as <code>not IsValid</code>. IsLastResortFont Whether this is a last resort font. IsSymbolFont Whether this is a symbol font. IsValid Whether the font face is a valid instance. OutlineType The outline type. Panose Returns PANOSE classification of this <code>TBLFontFace</code>. PostScriptName PostScript name of the font. Stretch Font stretch (returns default stretch in case this is a variable font). Style Returns font style. SubfamilyName Subfamily name of the font. UnicodeCoverage Returns unicode coverage of this <code>TBLFontFace</code>. UniqueId A unique identifier describing this <code>TBLFontFace</code>. UnitsPerEm Units per em, which are part of font's design metrics. Weight Font weight (returns default weight in case this is a variable font)."},{"location":"Reference/Blend2D/classes/TBLFontFace/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> font face. Finalize Destroys the font face. Initialize Creates a default initialized font face."},{"location":"Reference/Blend2D/classes/TBLFontFace/#operators","title":"Operators","text":"Name Description Equal(TBLFontFace, TBLFontFace) Returns True if two font faces are equal (have the same contents). Equal(TBLFontFace, Pointer) Used to compare against <code>nil</code> (null font face). NotEqual(TBLFontFace, TBLFontFace) Returns True if two font faces are not equal (do not have the same contents). NotEqual(TBLFontFace, Pointer) Used to compare against <code>nil</code> (null font face)."},{"location":"Reference/Blend2D/classes/TBLFontFace/#methods","title":"Methods","text":"Name Description Equals Tests whether this and <code>AOther</code> font faces are equal. GetFeatureTags(TBLArray&lt;TBLTag&gt;) Retrieves OpenType feature tags provided by this <code>TBLFontFace</code>. GetFeatureTags Retrieves OpenType feature tags provided by this <code>TBLFontFace</code>. GetScriptTags(TBLArray&lt;TBLTag&gt;) Retrieves OpenType script tags provided by this <code>TBLFontFace</code>. GetScriptTags Retrieves OpenType script tags provided by this <code>TBLFontFace</code>. GetVariationTags(TBLArray&lt;TBLTag&gt;) Retrieves OpenType variation tags provided by this <code>TBLFontFace</code>. GetVariationTags Retrieves OpenType variation tags provided by this <code>TBLFontFace</code>. HasFaceFlag Tests whether the font face has a given <code>AFlag</code> set. HasFeatureTag Tests whether the font face provides the given OpenType <code>AFeatureTag</code>. HasScriptTag Tests whether the font face provides the given OpenType <code>AScriptTag</code>. HasVariationTag Tests whether the font face provides the given OpenType <code>AVariationTag</code>. MakeFromData Creates a new <code>TBLFontFace</code> from <code>TBLFontData</code> at the given <code>AFaceIndex</code>. MakeFromFile Creates a new <code>TBLFontFace</code> from a file specified by <code>AFilename</code>. Reset Swap"},{"location":"Reference/Blend2D/classes/TBLFontFace/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFace/#Data","title":"Data","text":"<p><code>TBLFontData</code> associated with this font face. </p> <p><code>property Data: TBLFontData read GetData</code></p> <p>Type: <code>TBLFontData</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#DesignMetrics","title":"DesignMetrics","text":"<p>Design metrics of this <code>TBLFontFace</code>. </p> <p><code>property DesignMetrics: PBLFontDesignMetrics read GetDesignMetrics</code></p> <p>Type: <code>PBLFontDesignMetrics</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#DiagFlags","title":"DiagFlags","text":"<p>Font face diagnostics flags. </p> <p><code>property DiagFlags: TBLFontFaceDiagFlags read GetDiagFlags</code></p> <p>Type: <code>TBLFontFaceDiagFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#FaceFlags","title":"FaceFlags","text":"<p>Font face flags. </p> <p><code>property FaceFlags: TBLFontFaceFlags read GetFaceFlags</code></p> <p>Type: <code>TBLFontFaceFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#FaceIndex","title":"FaceIndex","text":"<p>A zero-based index of this font face. </p> <p><code>property FaceIndex: Integer read GetFaceIndex</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#remarks","title":"Remarks","text":"<p>Face index does only make sense if this face is part of a TrueType or OpenType font collection. In that case the returned value would be the index of this face in that collection. If the face is not part of a collection then the returned value would always be zero. </p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#FaceInfo","title":"FaceInfo","text":"<p>Font face information. </p> <p><code>property FaceInfo: PBLFontFaceInfo read GetFaceInfo</code></p> <p>Type: <code>PBLFontFaceInfo</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#FaceType","title":"FaceType","text":"<p>The font face type. </p> <p><code>property FaceType: TBLFontFaceType read GetFaceType</code></p> <p>Type: <code>TBLFontFaceType</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#FamilyName","title":"FamilyName","text":"<p>Family name of the font. </p> <p><code>property FamilyName: TBLString read GetFamilyName</code></p> <p>Type: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#FullName","title":"FullName","text":"<p>Full name of the font. </p> <p><code>property FullName: TBLString read GetFullName</code></p> <p>Type: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#GlyphCount","title":"GlyphCount","text":"<p>The number of glyphs this font face provides. </p> <p><code>property GlyphCount: Integer read GetGlyphCount</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasBaselineYAt0","title":"HasBaselineYAt0","text":"<p>Whether the font face's baseline equals 0. </p> <p><code>property HasBaselineYAt0: Boolean read GetHasBaselineYAt0</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasCharToGlyphMapping","title":"HasCharToGlyphMapping","text":"<p>Whether the font face provides character to glyph mapping. </p> <p><code>property HasCharToGlyphMapping: Boolean read GetHasCharToGlyphMapping</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasHorizontalKerning","title":"HasHorizontalKerning","text":"<p>Whether the font face has a legacy horizontal kerning feature ('kern' table with horizontal kerning data). </p> <p><code>property HasHorizontalKerning: Boolean read GetHasHorizontalKerning</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasHorizontalMetrics","title":"HasHorizontalMetrics","text":"<p>Whether the font face has horizontal glyph metrics (advances, side bearings). </p> <p><code>property HasHorizontalMetrics: Boolean read GetHasHorizontalMetrics</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasLsbPointXAt0","title":"HasLsbPointXAt0","text":"<p>Whether the font face's left sidebearing point at <code>X</code> equals 0. </p> <p><code>property HasLsbPointXAt0: Boolean read GetHasLsbPointXAt0</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasOpenTypeFeatures","title":"HasOpenTypeFeatures","text":"<p>Whether the font face has OpenType features (GDEF, GPOS, GSUB). </p> <p><code>property HasOpenTypeFeatures: Boolean read GetHasOpenTypeFeatures</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasOpenTypeVariations","title":"HasOpenTypeVariations","text":"<p>Whether the font face has OpenType Font Variations feature. </p> <p><code>property HasOpenTypeVariations: Boolean read GetHasOpenTypeVariations</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasPanoseData","title":"HasPanoseData","text":"<p>Whether the font face has panose classification. </p> <p><code>property HasPanoseData: Boolean read GetHasPanoseData</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasTypographicMetrics","title":"HasTypographicMetrics","text":"<p>Whether the font face uses typographic metrics. </p> <p><code>property HasTypographicMetrics: Boolean read GetHasTypographicMetrics</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasTypographicNames","title":"HasTypographicNames","text":"<p>Whether the font face uses typographic family and subfamily names. </p> <p><code>property HasTypographicNames: Boolean read GetHasTypographicNames</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasUnicodeCoverage","title":"HasUnicodeCoverage","text":"<p>Whether the font face has unicode coverage information. </p> <p><code>property HasUnicodeCoverage: Boolean read GetHasUnicodeCoverage</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasVariationSequences","title":"HasVariationSequences","text":"<p>Whether the font face has unicode variation sequences feature. </p> <p><code>property HasVariationSequences: Boolean read GetHasVariationSequences</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasVerticalKerning","title":"HasVerticalKerning","text":"<p>Whether the font face has a legacy vertical kerning feature ('kern' table with vertical kerning data). </p> <p><code>property HasVerticalKerning: Boolean read GetHasVerticalKerning</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasVerticalMetrics","title":"HasVerticalMetrics","text":"<p>Whether the font face has vertical glyph metrics (advances, side bearings). </p> <p><code>property HasVerticalMetrics: Boolean read GetHasVerticalMetrics</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#IsEmpty","title":"IsEmpty","text":"<p>Tests whether the font face is empty, which is the same as <code>not IsValid</code>. </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#IsLastResortFont","title":"IsLastResortFont","text":"<p>Whether this is a last resort font. </p> <p><code>property IsLastResortFont: Boolean read GetIsLastResortFont</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#IsSymbolFont","title":"IsSymbolFont","text":"<p>Whether this is a symbol font. </p> <p><code>property IsSymbolFont: Boolean read GetIsSymbolFont</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#IsValid","title":"IsValid","text":"<p>Whether the font face is a valid instance. </p> <p><code>property IsValid: Boolean read GetIsValid</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#OutlineType","title":"OutlineType","text":"<p>The outline type. </p> <p><code>property OutlineType: TBLFontOutlineType read GetOutlineType</code></p> <p>Type: <code>TBLFontOutlineType</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#Panose","title":"Panose","text":"<p>Returns PANOSE classification of this <code>TBLFontFace</code>. </p> <p><code>property Panose: PBLFontPanose read GetPanose</code></p> <p>Type: <code>PBLFontPanose</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#PostScriptName","title":"PostScriptName","text":"<p>PostScript name of the font. </p> <p><code>property PostScriptName: TBLString read GetPostScriptName</code></p> <p>Type: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#Stretch","title":"Stretch","text":"<p>Font stretch (returns default stretch in case this is a variable font). </p> <p><code>property Stretch: TBLFontStretch read GetStretch</code></p> <p>Type: <code>TBLFontStretch</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#Style","title":"Style","text":"<p>Returns font style. </p> <p><code>property Style: TBLFontStyle read GetStyle</code></p> <p>Type: <code>TBLFontStyle</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#SubfamilyName","title":"SubfamilyName","text":"<p>Subfamily name of the font. </p> <p><code>property SubfamilyName: TBLString read GetSubfamilyName</code></p> <p>Type: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#UnicodeCoverage","title":"UnicodeCoverage","text":"<p>Returns unicode coverage of this <code>TBLFontFace</code>. </p> <p><code>property UnicodeCoverage: PBLFontUnicodeCoverage read GetUnicodeCoverage</code></p> <p>Type: <code>PBLFontUnicodeCoverage</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#remarks_1","title":"Remarks","text":"<p>The returned unicode-coverage is not calculated by Blend2D so in general the value doesn't have to be correct. Consider <code>GetCharacterCoverage</code> to get a coverage calculated by Blend2D at character granularity. </p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#UniqueId","title":"UniqueId","text":"<p>A unique identifier describing this <code>TBLFontFace</code>. </p> <p><code>property UniqueId: TBLUniqueId read GetUniqueId</code></p> <p>Type: <code>TBLUniqueId</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#UnitsPerEm","title":"UnitsPerEm","text":"<p>Units per em, which are part of font's design metrics. </p> <p><code>property UnitsPerEm: Integer read GetUnitsPerEm</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#Weight","title":"Weight","text":"<p>Font weight (returns default weight in case this is a variable font). </p> <p><code>property Weight: TBLFontWeight read GetWeight</code></p> <p>Type: <code>TBLFontWeight</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFace/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> font face. </p> <p><code>constructor Assign(var ADest: TBLFontFace; const ASrc: TBLFontFace); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontFace</code></p> <p><code>ASrc</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the font face. </p> <p><code>destructor Finalize(var ADest: TBLFontFace)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default initialized font face. </p> <p><code>constructor Initialize(out ADest: TBLFontFace)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFace/#Equal_0","title":"Equal(TBLFontFace, TBLFontFace)","text":"<p>Returns True if two font faces are equal (have the same contents). </p> <p><code>class operator Equal(const ALeft, ARight: TBLFontFace): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontFace</code></p> <p><code>ARight</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#Equal_1","title":"Equal(TBLFontFace, Pointer)","text":"<p>Used to compare against <code>nil</code> (null font face). </p> <p><code>class operator Equal(const ALeft: TBLFontFace; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontFace</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#NotEqual_0","title":"NotEqual(TBLFontFace, TBLFontFace)","text":"<p>Returns True if two font faces are not equal (do not have the same contents). </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLFontFace): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontFace</code></p> <p><code>ARight</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#NotEqual_1","title":"NotEqual(TBLFontFace, Pointer)","text":"<p>Used to compare against <code>nil</code> (null font face). </p> <p><code>class operator NotEqual(const ALeft: TBLFontFace; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontFace</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFace/#Equals","title":"Equals(TBLFontFace)","text":"<p>Tests whether this and <code>AOther</code> font faces are equal. </p> <p><code>function Equals(const AOther: TBLFontFace): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_7","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#GetFeatureTags_0","title":"GetFeatureTags(TBLArray&lt;TBLTag&gt;)","text":"<p>Retrieves OpenType feature tags provided by this <code>TBLFontFace</code>.</p> <p>Each feature tag is represented by 4 characters encoded in <code>TBLTag</code>.</p> <p>Feature tag registry: -  Microsoft. </p> <p><code>procedure GetFeatureTags(const AOut: TBLArray&lt;TBLTag&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_8","title":"Parameters","text":"<p><code>AOut</code>: <code>TBLArray&lt;TBLTag&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#GetFeatureTags_1","title":"GetFeatureTags","text":"<p>Retrieves OpenType feature tags provided by this <code>TBLFontFace</code>.</p> <p>Each feature tag is represented by 4 characters encoded in <code>TBLTag</code>.</p> <p>Feature tag registry: -  Microsoft. </p> <p><code>function GetFeatureTags: TArray&lt;TBLTag&gt;; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#returns_5","title":"Returns","text":"<p><code>TArray&lt;TBLTag&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#GetScriptTags_0","title":"GetScriptTags(TBLArray&lt;TBLTag&gt;)","text":"<p>Retrieves OpenType script tags provided by this <code>TBLFontFace</code>.</p> <p>Each script tag is represented by 4 characters encoded in <code>TBLTag</code>. </p> <p><code>procedure GetScriptTags(const AOut: TBLArray&lt;TBLTag&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_9","title":"Parameters","text":"<p><code>AOut</code>: <code>TBLArray&lt;TBLTag&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#GetScriptTags_1","title":"GetScriptTags","text":"<p>Retrieves OpenType script tags provided by this <code>TBLFontFace</code>.</p> <p>Each script tag is represented by 4 characters encoded in <code>TBLTag</code>. </p> <p><code>function GetScriptTags: TArray&lt;TBLTag&gt;; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#returns_6","title":"Returns","text":"<p><code>TArray&lt;TBLTag&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#GetVariationTags_0","title":"GetVariationTags(TBLArray&lt;TBLTag&gt;)","text":"<p>Retrieves OpenType variation tags provided by this <code>TBLFontFace</code>.</p> <p>Each variation tag is represented by 4 characters encoded in <code>TBLTag</code>.</p> <p>Variation tag registry: -  Microsoft. </p> <p><code>procedure GetVariationTags(const AOut: TBLArray&lt;TBLTag&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_10","title":"Parameters","text":"<p><code>AOut</code>: <code>TBLArray&lt;TBLTag&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#GetVariationTags_1","title":"GetVariationTags","text":"<p>Retrieves OpenType variation tags provided by this <code>TBLFontFace</code>.</p> <p>Each variation tag is represented by 4 characters encoded in <code>TBLTag</code>.</p> <p>Variation tag registry: -  Microsoft. </p> <p><code>function GetVariationTags: TArray&lt;TBLTag&gt;; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#returns_7","title":"Returns","text":"<p><code>TArray&lt;TBLTag&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasFaceFlag","title":"HasFaceFlag(TBLFontFaceFlag)","text":"<p>Tests whether the font face has a given <code>AFlag</code> set. </p> <p><code>function HasFaceFlag(const AFlag: TBLFontFaceFlag): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_11","title":"Parameters","text":"<p><code>AFlag</code>: <code>TBLFontFaceFlag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#returns_8","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasFeatureTag","title":"HasFeatureTag(TBLTag)","text":"<p>Tests whether the font face provides the given OpenType <code>AFeatureTag</code>. </p> <p><code>function HasFeatureTag(const AFeatureTag: TBLTag): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_12","title":"Parameters","text":"<p><code>AFeatureTag</code>: <code>TBLTag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#returns_9","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasScriptTag","title":"HasScriptTag(TBLTag)","text":"<p>Tests whether the font face provides the given OpenType <code>AScriptTag</code>. </p> <p><code>function HasScriptTag(const AScriptTag: TBLTag): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_13","title":"Parameters","text":"<p><code>AScriptTag</code>: <code>TBLTag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#returns_10","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#HasVariationTag","title":"HasVariationTag(TBLTag)","text":"<p>Tests whether the font face provides the given OpenType <code>AVariationTag</code>. </p> <p><code>function HasVariationTag(const AVariationTag: TBLTag): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_14","title":"Parameters","text":"<p><code>AVariationTag</code>: <code>TBLTag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#returns_11","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#MakeFromData","title":"MakeFromData(TBLFontData, Integer)","text":"<p>Creates a new <code>TBLFontFace</code> from <code>TBLFontData</code> at the given <code>AFaceIndex</code>.</p> <p>On success the existing <code>TBLFontFace</code> is completely replaced by a new one, on failure the existing <code>TBLFontFace</code> is kept as is. </p> <p><code>procedure MakeFromData(const AFontData: TBLFontData; const AFaceIndex: Integer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_15","title":"Parameters","text":"<p><code>AFontData</code>: <code>TBLFontData</code></p> <p><code>AFaceIndex</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#MakeFromFile","title":"MakeFromFile(String, TBLFileReadFlags)","text":"<p>Creates a new <code>TBLFontFace</code> from a file specified by <code>AFilename</code>.</p> <p>This is a utility method that first creates a <code>TBLFontData</code> and then calls <code>MakeFromData(FontData, 0)</code>. See <code>TBLFontData.MakeFromFile</code> for more details, especially the use of <code>AReadFlags</code> is important for system fonts. </p> <p><code>procedure MakeFromFile(const AFilename: String; const AReadFlags: TBLFileReadFlags = []); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_16","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p> <p><code>AReadFlags</code>: <code>TBLFileReadFlags = []</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#see-also","title":"See Also","text":"<ul> <li>MakeFromData</li> <li>TBLFontData</li> <li>TBLFontData.MakeFromFile</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#remarks_2","title":"Remarks","text":"<p>This method offers a simplified creation of <code>TBLFontFace</code> directly from a file, but doesn't provide as much flexibility as <code>MakeFromData</code> as it allows to specify a <code>AFaceIndex</code>, which can be used to load multiple font faces from a TrueType/OpenType collection. The use of <code>MakeFromData</code> is recommended for any serious font handling. </p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#Swap","title":"Swap(TBLFontFace)","text":"<p><code>procedure Swap(var AOther: TBLFontFace); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFace/#parameters_17","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/","title":"TBLFontFaceInfo","text":"<p>Information of <code>TBLFontFace</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontFaceInfo = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#see-also","title":"See Also","text":"<ul> <li>TBLFontFace</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#properties","title":"Properties","text":"Name Description DiagFlags Font face diagnostic flags. FaceFlags Font face flags. FaceIndex Face face index in a TTF/OTF collection or zero if not part of a collection. FaceType Font face type. GlyphCount Number of glyphs provided by this font face. OutlineType Type of outlines used by the font face. Revision Revision (read from 'head' table, represented as 16.16 fixed point)."},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#DiagFlags","title":"DiagFlags","text":"<p>Font face diagnostic flags. </p> <p><code>property DiagFlags: TBLFontFaceDiagFlags read GetDiagFlags</code></p> <p>Type: <code>TBLFontFaceDiagFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#FaceFlags","title":"FaceFlags","text":"<p>Font face flags. </p> <p><code>property FaceFlags: TBLFontFaceFlags read GetFaceFlags</code></p> <p>Type: <code>TBLFontFaceFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#FaceIndex","title":"FaceIndex","text":"<p>Face face index in a TTF/OTF collection or zero if not part of a collection. </p> <p><code>property FaceIndex: Integer read FFaceIndex</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#FaceType","title":"FaceType","text":"<p>Font face type. </p> <p><code>property FaceType: TBLFontFaceType read GetFaceType</code></p> <p>Type: <code>TBLFontFaceType</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#GlyphCount","title":"GlyphCount","text":"<p>Number of glyphs provided by this font face. </p> <p><code>property GlyphCount: Integer read FGlyphCount</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#OutlineType","title":"OutlineType","text":"<p>Type of outlines used by the font face. </p> <p><code>property OutlineType: TBLFontOutlineType read GetOutlineType</code></p> <p>Type: <code>TBLFontOutlineType</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#Revision","title":"Revision","text":"<p>Revision (read from 'head' table, represented as 16.16 fixed point). </p> <p><code>property Revision: Cardinal read FRevision</code></p> <p>Type: <code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFaceInfo/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureItem/","title":"TBLFontFeatureItem","text":"<p>Associates a font feature tag with a value. Tag describes the feature (as provided by the font) and <code>Value</code> describes its value. Some features only allow boolean values 0 and 1 and some allow values up to 65535. Values less than 0 and greater than 65535 are invalid, however, only <code>-1</code> should be used as invalid value in general.</p> <p>Registered OpenType features: -  Microsoft. -  Adobe. </p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureItem/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontFeatureItem = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureItem/#properties","title":"Properties","text":"Name Description Tag Feature tag (32-bit). Value Feature value."},{"location":"Reference/Blend2D/classes/TBLFontFeatureItem/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLFontFeatureItem/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFeatureItem/#Tag","title":"Tag","text":"<p>Feature tag (32-bit). </p> <p><code>property Tag: TBLTag read FTag</code></p> <p>Type: <code>TBLTag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureItem/#Value","title":"Value","text":"<p>Feature value. </p> <p><code>property Value: Integer read FValue</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureItem/#remarks","title":"Remarks","text":"<p>Values less than 0 and greater than 65535 are invalid. </p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureItem/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFeatureItem/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/","title":"TBLFontFeatureSettings","text":"<p>Font feature settings. </p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontFeatureSettings = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#properties","title":"Properties","text":"Name Description Capacity The container capacity. IsEmpty Whether the container is empty, which means that no tag/value pairs are stored in it. Size The number of feature tag/value pairs stored in the container. Values The value associated with the given <code>AFeatureTag</code>."},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> font feature settings. Finalize Destroys the font feature settings. Initialize Creates default initialized font feature settings."},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#operators","title":"Operators","text":"Name Description Equal(TBLFontFeatureSettings, TBLFontFeatureSettings) Returns True if two font feature settings instances are equal. Equal(TBLFontFeatureSettings, Pointer) Used to compare against <code>nil</code> (empty font feature settings). NotEqual(TBLFontFeatureSettings, TBLFontFeatureSettings) Returns True if two font feature settings instances are not equal. NotEqual(TBLFontFeatureSettings, Pointer) Used to compare against <code>nil</code> (empty font feature settings)."},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#methods","title":"Methods","text":"Name Description Clear Equals Tests whether this and <code>AOther</code> font feature settings are equal. GetValue Returns the value associated with the given <code>AFeatureTag</code>. HasValue Tests whether the settings contains the given <code>AFeatureTag</code>. RemoveValue Removes the given <code>AFeatureTag</code> and its associated value from the settings. Reset Resets the font feature settings to a default constructed state. SetValue Sets or inserts the given <code>AFeatureTag</code> to the settings, associating the <code>AFeatureTag</code> with <code>AValue</code>. Swap Swaps the underlying representation with <code>AOther</code>. View Returns a normalized view of tag/value pairs."},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#Capacity","title":"Capacity","text":"<p>The container capacity. </p> <p><code>property Capacity: NativeInt read GetCapacity</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#IsEmpty","title":"IsEmpty","text":"<p>Whether the container is empty, which means that no tag/value pairs are stored in it. </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#Size","title":"Size","text":"<p>The number of feature tag/value pairs stored in the container. </p> <p><code>property Size: NativeInt read GetSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#Values","title":"Values","text":"<p>The value associated with the given <code>AFeatureTag</code>.</p> <p>See <code>GetValue</code> and <code>SetValue</code> for more information. </p> <p><code>property Values[const AFeatureTag: TBLTag]: Integer read GetValue write SetValue</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#see-also","title":"See Also","text":"<ul> <li>GetValue</li> <li>SetValue</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> font feature settings. </p> <p><code>constructor Assign(var ADest: TBLFontFeatureSettings; const ASrc: TBLFontFeatureSettings); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontFeatureSettings</code></p> <p><code>ASrc</code>: <code>TBLFontFeatureSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the font feature settings. </p> <p><code>destructor Finalize(var ADest: TBLFontFeatureSettings)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontFeatureSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates default initialized font feature settings. </p> <p><code>constructor Initialize(out ADest: TBLFontFeatureSettings)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontFeatureSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#Equal_0","title":"Equal(TBLFontFeatureSettings, TBLFontFeatureSettings)","text":"<p>Returns True if two font feature settings instances are equal. </p> <p><code>class operator Equal(const ALeft, ARight: TBLFontFeatureSettings): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontFeatureSettings</code></p> <p><code>ARight</code>: <code>TBLFontFeatureSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#Equal_1","title":"Equal(TBLFontFeatureSettings, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty font feature settings). </p> <p><code>class operator Equal(const ALeft: TBLFontFeatureSettings; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontFeatureSettings</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#NotEqual_0","title":"NotEqual(TBLFontFeatureSettings, TBLFontFeatureSettings)","text":"<p>Returns True if two font feature settings instances are not equal. </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLFontFeatureSettings): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontFeatureSettings</code></p> <p><code>ARight</code>: <code>TBLFontFeatureSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#NotEqual_1","title":"NotEqual(TBLFontFeatureSettings, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty font feature settings). </p> <p><code>class operator NotEqual(const ALeft: TBLFontFeatureSettings; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontFeatureSettings</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#Clear","title":"Clear","text":"<p><code>procedure Clear; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#Equals","title":"Equals(TBLFontFeatureSettings)","text":"<p>Tests whether this and <code>AOther</code> font feature settings are equal. </p> <p><code>function Equals(const AOther: TBLFontFeatureSettings): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters_7","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontFeatureSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#GetValue","title":"GetValue(TBLTag)","text":"<p>Returns the value associated with the given <code>AFeatureTag</code>.</p> <p>If the <code>AFeatureTag</code> doesn't exist or is invalid <code>-1</code> is returned. </p> <p><code>function GetValue(const AFeatureTag: TBLTag): Integer; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters_8","title":"Parameters","text":"<p><code>AFeatureTag</code>: <code>TBLTag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#returns_5","title":"Returns","text":"<p><code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#HasValue","title":"HasValue(TBLTag)","text":"<p>Tests whether the settings contains the given <code>AFeatureTag</code>. </p> <p><code>function HasValue(const AFeatureTag: TBLTag): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters_9","title":"Parameters","text":"<p><code>AFeatureTag</code>: <code>TBLTag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#returns_6","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#RemoveValue","title":"RemoveValue(TBLTag)","text":"<p>Removes the given <code>AFeatureTag</code> and its associated value from the settings.</p> <p>Nothing happens if the <code>AFeatureTag</code> is not in the settings. </p> <p><code>procedure RemoveValue(const AFeatureTag: TBLTag); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters_10","title":"Parameters","text":"<p><code>AFeatureTag</code>: <code>TBLTag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#Reset","title":"Reset","text":"<p>Resets the font feature settings to a default constructed state. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#SetValue","title":"SetValue(TBLTag, Integer)","text":"<p>Sets or inserts the given <code>AFeatureTag</code> to the settings, associating the <code>AFeatureTag</code> with <code>AValue</code>.</p> <p>The <code>AFeatureTag</code> must be valid, which means that it must contain 4 characters within ' ' to '~' range - [32, 126] in ASCII. If the given <code>AFeatureTag</code> is not valid or <code>AValue</code> is out of range (maximum value is <code>65535</code>) an error is raised.</p> <p>The following tags only support values that are either 0 (disabled) or 1 (enabled):</p> <ul> <li>'case'</li> <li>'clig'</li> <li>'cpct'</li> <li>'cpsp'</li> <li>'dlig'</li> <li>'dnom'</li> <li>'expt'</li> <li>'falt'</li> <li>'frac'</li> <li>'fwid'</li> <li>'halt'</li> <li>'hist'</li> <li>'hwid'</li> <li>'jalt'</li> <li>'kern'</li> <li>'liga'</li> <li>'lnum'</li> <li>'onum'</li> <li>'ordn'</li> <li>'palt'</li> <li>'pcap'</li> <li>'ruby'</li> <li>'smcp'</li> <li>'subs'</li> <li>'sups'</li> <li>'titl'</li> <li>'tnam'</li> <li>'tnum'</li> <li>'unic'</li> <li>'valt'</li> <li>'vkrn'</li> <li>'zero'</li> </ul> <p>Trying to use any other value with these tags would fail. </p> <p><code>procedure SetValue(const ATag: TBLTag; const AValue: Integer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters_11","title":"Parameters","text":"<p><code>ATag</code>: <code>TBLTag</code></p> <p><code>AValue</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#Swap","title":"Swap(TBLFontFeatureSettings)","text":"<p>Swaps the underlying representation with <code>AOther</code>. </p> <p><code>procedure Swap(var AOther: TBLFontFeatureSettings); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#parameters_12","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontFeatureSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#View","title":"View","text":"<p>Returns a normalized view of tag/value pairs. </p> <p><code>function View: TBLFontFeatureSettingsView; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettings/#returns_7","title":"Returns","text":"<p><code>TBLFontFeatureSettingsView</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettingsView/","title":"TBLFontFeatureSettingsView","text":"<p>A view unifying the representation of an internal storage used by <code>TBLFontFeatureSettings</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettingsView/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontFeatureSettingsView = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettingsView/#properties","title":"Properties","text":"Name Description Data Pointer to font feature items, where each item describes a tag and its value. IsEmpty Whether the view is empty. Items The font feature items, where each item describes a tag and its value. Size Count of items in <code>Data</code>."},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettingsView/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettingsView/#Data","title":"Data","text":"<p>Pointer to font feature items, where each item describes a tag and its value. </p> <p><code>property Data: PBLFontFeatureItem read FData</code></p> <p>Type: <code>PBLFontFeatureItem</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettingsView/#IsEmpty","title":"IsEmpty","text":"<p>Whether the view is empty. </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettingsView/#Items","title":"Items","text":"<p>The font feature items, where each item describes a tag and its value. </p> <p><code>property Items[const AIndex: NativeInt]: TBLFontFeatureItem read GetItem; default</code></p> <p>Type: <code>TBLFontFeatureItem</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontFeatureSettingsView/#Size","title":"Size","text":"<p>Count of items in <code>Data</code>. </p> <p><code>property Size: NativeInt read GetSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/","title":"TBLFontManager","text":"<p>Font manager. </p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontManager = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#properties","title":"Properties","text":"Name Description FaceCount The number of <code>TBLFontFace</code> instances the font manager holds. FamilyCount The number of unique font families the font manager holds. IsValid Whether the font manager is a valid <code>TBLFontManager</code> and not a built-in default instance."},{"location":"Reference/Blend2D/classes/TBLFontManager/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> font manager. Finalize Destroys the font manager. Initialize Creates a default initialized font manager."},{"location":"Reference/Blend2D/classes/TBLFontManager/#operators","title":"Operators","text":"Name Description Equal(TBLFontManager, TBLFontManager) Returns True if two font managers are equal (have the same contents). Equal(TBLFontManager, Pointer) Used to compare against <code>nil</code> (null font manager). NotEqual(TBLFontManager, TBLFontManager) Returns True if two font managers are not equal (do not have the same contents). NotEqual(TBLFontManager, Pointer) Used to compare against <code>nil</code> (null font manager)."},{"location":"Reference/Blend2D/classes/TBLFontManager/#methods","title":"Methods","text":"Name Description AddFace Adds a font <code>AFace</code> to the font manager. Equals Tests whether this and <code>AOther</code> font managers are equal. HasFace Tests whether the font manager contains the given font <code>AFace</code>. Make Makes a valid <code>TBLFontManager</code> instance. QueryFace(TBLStringView, TBLFontQueryProperties) Queries a font face by family <code>AName</code> and returns the result. QueryFace(String, TBLFontQueryProperties) Queries a font face by family <code>AName</code> and returns the result. QueryFace(TBLStringView) Queries a font face by family <code>AName</code> and returns the result. QueryFace(String) Queries a font face by family <code>AName</code> and returns the result. QueryFacesByFamilyName(TBLStringView, TBLArray&lt;TBLFontFace&gt;) Queries all font faces by family <code>AName</code> and stores the result to <code>AOut</code>. QueryFacesByFamilyName(TBLStringView) Queries all font faces by family <code>AName</code>. QueryFacesByFamilyName(String, TBLArray&lt;TBLFontFace&gt;) Queries all font faces by family <code>AName</code> and stores the result to <code>AOut</code>. QueryFacesByFamilyName(String) Queries all font faces by family <code>AName</code>. Reset Resets the font manager to a default constructed state. Swap Swaps the underlying representation of this font manager with the <code>AOther</code> font manager."},{"location":"Reference/Blend2D/classes/TBLFontManager/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontManager/#FaceCount","title":"FaceCount","text":"<p>The number of <code>TBLFontFace</code> instances the font manager holds. </p> <p><code>property FaceCount: NativeInt read GetFaceCount</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#see-also","title":"See Also","text":"<ul> <li>TBLFontFace</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#FamilyCount","title":"FamilyCount","text":"<p>The number of unique font families the font manager holds. </p> <p><code>property FamilyCount: NativeInt read GetFamilyCount</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#IsValid","title":"IsValid","text":"<p>Whether the font manager is a valid <code>TBLFontManager</code> and not a built-in default instance. </p> <p><code>property IsValid: Boolean read GetIsValid</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontManager/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> font manager. </p> <p><code>constructor Assign(var ADest: TBLFontManager; const ASrc: TBLFontManager); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontManager</code></p> <p><code>ASrc</code>: <code>TBLFontManager</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the font manager. </p> <p><code>destructor Finalize(var ADest: TBLFontManager)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontManager</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default initialized font manager. </p> <p><code>constructor Initialize(out ADest: TBLFontManager)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontManager</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontManager/#Equal_0","title":"Equal(TBLFontManager, TBLFontManager)","text":"<p>Returns True if two font managers are equal (have the same contents). </p> <p><code>class operator Equal(const ALeft, ARight: TBLFontManager): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontManager</code></p> <p><code>ARight</code>: <code>TBLFontManager</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#Equal_1","title":"Equal(TBLFontManager, Pointer)","text":"<p>Used to compare against <code>nil</code> (null font manager). </p> <p><code>class operator Equal(const ALeft: TBLFontManager; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontManager</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#NotEqual_0","title":"NotEqual(TBLFontManager, TBLFontManager)","text":"<p>Returns True if two font managers are not equal (do not have the same contents). </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLFontManager): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontManager</code></p> <p><code>ARight</code>: <code>TBLFontManager</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#NotEqual_1","title":"NotEqual(TBLFontManager, Pointer)","text":"<p>Used to compare against <code>nil</code> (null font manager). </p> <p><code>class operator NotEqual(const ALeft: TBLFontManager; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontManager</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontManager/#AddFace","title":"AddFace(TBLFontFace)","text":"<p>Adds a font <code>AFace</code> to the font manager. </p> <p><code>procedure AddFace(const AFace: TBLFontFace); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure. For example if the font <code>AFace</code> is invalid.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_7","title":"Parameters","text":"<p><code>AFace</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#Equals","title":"Equals(TBLFontManager)","text":"<p>Tests whether this and <code>AOther</code> font managers are equal. </p> <p><code>function Equals(const AOther: TBLFontManager): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_8","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontManager</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#HasFace","title":"HasFace(TBLFontFace)","text":"<p>Tests whether the font manager contains the given font <code>AFace</code>. </p> <p><code>function HasFace(const AFace: TBLFontFace): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_9","title":"Parameters","text":"<p><code>AFace</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#returns_5","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#Make","title":"Make","text":"<p>Makes a valid <code>TBLFontManager</code> instance. </p> <p><code>procedure Make; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#QueryFace_0","title":"QueryFace(TBLStringView, TBLFontQueryProperties)","text":"<p>Queries a font face by family <code>AName</code> and returns the result.</p> <p>An <code>AProperties</code> parameter contains query properties that the query engine will consider when doing the match. The best candidate will be selected based on the following rules:</p> <ul> <li>Style has the highest priority.</li> <li>Weight has the lowest priority. </li> </ul> <p><code>function QueryFace(const AName: TBLStringView; const AProperties: TBLFontQueryProperties): TBLFontFace; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_10","title":"Parameters","text":"<p><code>AName</code>: <code>TBLStringView</code></p> <p><code>AProperties</code>: <code>TBLFontQueryProperties</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#returns_6","title":"Returns","text":"<p><code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#QueryFace_1","title":"QueryFace(String, TBLFontQueryProperties)","text":"<p>Queries a font face by family <code>AName</code> and returns the result.</p> <p>An <code>AProperties</code> parameter contains query properties that the query engine will consider when doing the match. The best candidate will be selected based on the following rules:</p> <ul> <li>Style has the highest priority.</li> <li>Weight has the lowest priority. </li> </ul> <p><code>function QueryFace(const AName: String; const AProperties: TBLFontQueryProperties): TBLFontFace; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_11","title":"Parameters","text":"<p><code>AName</code>: <code>String</code></p> <p><code>AProperties</code>: <code>TBLFontQueryProperties</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#returns_7","title":"Returns","text":"<p><code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#QueryFace_2","title":"QueryFace(TBLStringView)","text":"<p>Queries a font face by family <code>AName</code> and returns the result. </p> <p><code>function QueryFace(const AName: TBLStringView): TBLFontFace; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_12","title":"Parameters","text":"<p><code>AName</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#returns_8","title":"Returns","text":"<p><code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#QueryFace_3","title":"QueryFace(String)","text":"<p>Queries a font face by family <code>AName</code> and returns the result. </p> <p><code>function QueryFace(const AName: String): TBLFontFace; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_13","title":"Parameters","text":"<p><code>AName</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#returns_9","title":"Returns","text":"<p><code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#QueryFacesByFamilyName_0","title":"QueryFacesByFamilyName(TBLStringView, TBLArray&lt;TBLFontFace&gt;)","text":"<p>Queries all font faces by family <code>AName</code> and stores the result to <code>AOut</code>. </p> <p><code>procedure QueryFacesByFamilyName(const AName: TBLStringView; const AOut: TBLArray&lt;TBLFontFace&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_14","title":"Parameters","text":"<p><code>AName</code>: <code>TBLStringView</code></p> <p><code>AOut</code>: <code>TBLArray&lt;TBLFontFace&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#QueryFacesByFamilyName_1","title":"QueryFacesByFamilyName(TBLStringView)","text":"<p>Queries all font faces by family <code>AName</code>. </p> <p><code>function QueryFacesByFamilyName(const AName: TBLStringView): TArray&lt;TBLFontFace&gt;; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions_10","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_15","title":"Parameters","text":"<p><code>AName</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#returns_10","title":"Returns","text":"<p><code>TArray&lt;TBLFontFace&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#QueryFacesByFamilyName_2","title":"QueryFacesByFamilyName(String, TBLArray&lt;TBLFontFace&gt;)","text":"<p>Queries all font faces by family <code>AName</code> and stores the result to <code>AOut</code>. </p> <p><code>procedure QueryFacesByFamilyName(const AName: String; const AOut: TBLArray&lt;TBLFontFace&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions_11","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_16","title":"Parameters","text":"<p><code>AName</code>: <code>String</code></p> <p><code>AOut</code>: <code>TBLArray&lt;TBLFontFace&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#QueryFacesByFamilyName_3","title":"QueryFacesByFamilyName(String)","text":"<p>Queries all font faces by family <code>AName</code>. </p> <p><code>function QueryFacesByFamilyName(const AName: String): TArray&lt;TBLFontFace&gt;; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#exceptions_12","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_17","title":"Parameters","text":"<p><code>AName</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#returns_11","title":"Returns","text":"<p><code>TArray&lt;TBLFontFace&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#Reset","title":"Reset","text":"<p>Resets the font manager to a default constructed state. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#Swap","title":"Swap(TBLFontManager)","text":"<p>Swaps the underlying representation of this font manager with the <code>AOther</code> font manager. </p> <p><code>procedure Swap(var AOther: TBLFontManager); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontManager/#parameters_18","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontManager</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/","title":"TBLFontMatrix","text":"<p>2x2 transformation matrix used by <code>TBLFont</code>. It's similar to <code>TBLMatrix2D</code>, however, it doesn't provide a translation part as it's assumed to be zero. </p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontMatrix = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#see-also","title":"See Also","text":"<ul> <li>TBLFont</li> <li>TBLMatrix2D</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#fields","title":"Fields","text":"Name Description M"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#properties","title":"Properties","text":"Name Description M00 M01 M10 M11"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#methods","title":"Methods","text":"Name Description Create Reset(Double, Double, Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#M","title":"M","text":"<p><code>var M: array [0..3] of Double</code></p> <p>Type: <code>array [0..3] of Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#M00","title":"M00","text":"<p><code>property M00: Double read M[0]</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#M01","title":"M01","text":"<p><code>property M01: Double read M[1]</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#M10","title":"M10","text":"<p><code>property M10: Double read M[2]</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#M11","title":"M11","text":"<p><code>property M11: Double read M[3]</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AM00, AM01, AM10, AM11: Double); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#parameters","title":"Parameters","text":"<p><code>AM00</code>: <code>Double</code></p> <p><code>AM01</code>: <code>Double</code></p> <p><code>AM10</code>: <code>Double</code></p> <p><code>AM11</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#Create","title":"Create","text":"<p><code>class function Create: TBLFontMatrix; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#returns","title":"Returns","text":"<p><code>TBLFontMatrix</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#Reset_0","title":"Reset(Double, Double, Double, Double)","text":"<p><code>procedure Reset(const AM00, AM01, AM10, AM11: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#parameters_1","title":"Parameters","text":"<p><code>AM00</code>: <code>Double</code></p> <p><code>AM01</code>: <code>Double</code></p> <p><code>AM10</code>: <code>Double</code></p> <p><code>AM11</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMatrix/#Reset_1","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/","title":"TBLFontMetrics","text":"<p>Scaled <code>TBLFontDesignMetrics</code> based on font size and other properties. </p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontMetrics = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#see-also","title":"See Also","text":"<ul> <li>TBLFontDesignMetrics</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#properties","title":"Properties","text":"Name Description Ascent Font ascent (horizontal orientation). CapHeight Maximum height of a capital letter above the baseline. Descent Font descent (horizontal orientation). LineGap Line gap. Size Font size. StrikethroughPosition Text strikethrough position. StrikethroughThickness Text strikethrough thickness. UnderlinePosition Text underline position. UnderlineThickness Text underline thickness. VAscent Font ascent (vertical orientation). VDescent Font descent (vertical orientation). XHeight Distance between the baseline and the mean line of lower-case letters. XMax Maximum X, reported by the font. XMin Minimum X, reported by the font. YMax Maximum Y, reported by the font. YMin Minimum Y, reported by the font."},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#Ascent","title":"Ascent","text":"<p>Font ascent (horizontal orientation). </p> <p><code>property Ascent: Single read FAscent</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#CapHeight","title":"CapHeight","text":"<p>Maximum height of a capital letter above the baseline. </p> <p><code>property CapHeight: Single read FCapHeight</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#Descent","title":"Descent","text":"<p>Font descent (horizontal orientation). </p> <p><code>property Descent: Single read FDescent</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#LineGap","title":"LineGap","text":"<p>Line gap. </p> <p><code>property LineGap: Single read FLineGap</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#Size","title":"Size","text":"<p>Font size. </p> <p><code>property Size: Single read FSize</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#StrikethroughPosition","title":"StrikethroughPosition","text":"<p>Text strikethrough position. </p> <p><code>property StrikethroughPosition: Single read FStrikethroughPosition</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#StrikethroughThickness","title":"StrikethroughThickness","text":"<p>Text strikethrough thickness. </p> <p><code>property StrikethroughThickness: Single read FStrikethroughThickness</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#UnderlinePosition","title":"UnderlinePosition","text":"<p>Text underline position. </p> <p><code>property UnderlinePosition: Single read FUnderlinePosition</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#UnderlineThickness","title":"UnderlineThickness","text":"<p>Text underline thickness. </p> <p><code>property UnderlineThickness: Single read FUnderlineThickness</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#VAscent","title":"VAscent","text":"<p>Font ascent (vertical orientation). </p> <p><code>property VAscent: Single read FVAscent</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#VDescent","title":"VDescent","text":"<p>Font descent (vertical orientation). </p> <p><code>property VDescent: Single read FVDescent</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#XHeight","title":"XHeight","text":"<p>Distance between the baseline and the mean line of lower-case letters. </p> <p><code>property XHeight: Single read FXHeight</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#XMax","title":"XMax","text":"<p>Maximum X, reported by the font. </p> <p><code>property XMax: Single read FXMax</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#XMin","title":"XMin","text":"<p>Minimum X, reported by the font. </p> <p><code>property XMin: Single read FXMin</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#YMax","title":"YMax","text":"<p>Maximum Y, reported by the font. </p> <p><code>property YMax: Single read FYMax</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#YMin","title":"YMin","text":"<p>Minimum Y, reported by the font. </p> <p><code>property YMin: Single read FYMin</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontMetrics/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontPanose/","title":"TBLFontPanose","text":"<p>Font PANOSE classification. </p>"},{"location":"Reference/Blend2D/classes/TBLFontPanose/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontPanose = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontPanose/#nested-types","title":"Nested Types","text":"Name Description TDecorative TScript TSymbol TText"},{"location":"Reference/Blend2D/classes/TBLFontPanose/#properties","title":"Properties","text":"Name Description Decorative FamilyKind IsEmpty Script Symbol Text"},{"location":"Reference/Blend2D/classes/TBLFontPanose/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLFontPanose/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontPanose/#Decorative","title":"Decorative","text":"<p><code>property Decorative: TDecorative read GetDecorative</code></p> <p>Type: <code>TDecorative</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontPanose/#FamilyKind","title":"FamilyKind","text":"<p><code>property FamilyKind: Byte read GetFamilyKind</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontPanose/#IsEmpty","title":"IsEmpty","text":"<p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontPanose/#Script","title":"Script","text":"<p><code>property Script: TScript read GetScript</code></p> <p>Type: <code>TScript</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontPanose/#Symbol","title":"Symbol","text":"<p><code>property Symbol: TSymbol read GetSymbol</code></p> <p>Type: <code>TSymbol</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontPanose/#Text","title":"Text","text":"<p><code>property Text: TText read GetText</code></p> <p>Type: <code>TText</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontPanose/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontPanose/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontQueryProperties/","title":"TBLFontQueryProperties","text":"<p>Properties that can be used to query <code>TBLFont</code> and <code>TBLFontFace</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLFontQueryProperties/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontQueryProperties = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontQueryProperties/#see-also","title":"See Also","text":"<ul> <li>TBLFont</li> <li>TBLFontFace</li> <li>TBLFontManager</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFontQueryProperties/#fields","title":"Fields","text":"Name Description Stretch Font stretch. Style Font style. Weight Font weight."},{"location":"Reference/Blend2D/classes/TBLFontQueryProperties/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLFontQueryProperties/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontQueryProperties/#Stretch","title":"Stretch","text":"<p>Font stretch. </p> <p><code>var Stretch: TBLFontStretch</code></p> <p>Type: <code>TBLFontStretch</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontQueryProperties/#Style","title":"Style","text":"<p>Font style. </p> <p><code>var Style: TBLFontStyle</code></p> <p>Type: <code>TBLFontStyle</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontQueryProperties/#Weight","title":"Weight","text":"<p>Font weight. </p> <p><code>var Weight: TBLFontWeight</code></p> <p>Type: <code>TBLFontWeight</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontQueryProperties/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontQueryProperties/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontTable/","title":"TBLFontTable","text":"<p>A read only data that represents a font table or its sub-table. </p>"},{"location":"Reference/Blend2D/classes/TBLFontTable/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontTable = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontTable/#properties","title":"Properties","text":"Name Description Data Pointer to the beginning of the data. IsEmpty Whether the table is empty (has no content). Size Size of <code>Data</code> in bytes."},{"location":"Reference/Blend2D/classes/TBLFontTable/#methods","title":"Methods","text":"Name Description Reset(Pointer, NativeInt) Reset"},{"location":"Reference/Blend2D/classes/TBLFontTable/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontTable/#Data","title":"Data","text":"<p>Pointer to the beginning of the data. </p> <p><code>property Data: Pointer read FData</code></p> <p>Type: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontTable/#IsEmpty","title":"IsEmpty","text":"<p>Whether the table is empty (has no content). </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontTable/#Size","title":"Size","text":"<p>Size of <code>Data</code> in bytes. </p> <p><code>property Size: NativeInt read GetSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontTable/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontTable/#Reset_0","title":"Reset(Pointer, NativeInt)","text":"<p><code>procedure Reset(const AData: Pointer; const ASize: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontTable/#parameters","title":"Parameters","text":"<p><code>AData</code>: <code>Pointer</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontTable/#Reset_1","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/","title":"TBLFontUnicodeCoverage","text":"<p>Font unicode coverage.</p> <p>Unicode coverage describes which unicode characters are provided by a font. Blend2D accesses this information by reading \"OS/2\" table, if available. </p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontUnicodeCoverage = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#properties","title":"Properties","text":"Name Description Bits IsEmpty"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#methods","title":"Methods","text":"Name Description ClearBit Equals HasBit Reset SetBit"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#Bits","title":"Bits","text":"<p><code>property Bits[const AIndex: Integer]: Boolean read HasBit write SetBitValue</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#IsEmpty","title":"IsEmpty","text":"<p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#Equal","title":"Equal(TBLFontUnicodeCoverage, TBLFontUnicodeCoverage)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLFontUnicodeCoverage): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#parameters","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontUnicodeCoverage</code></p> <p><code>ARight</code>: <code>TBLFontUnicodeCoverage</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#NotEqual","title":"NotEqual(TBLFontUnicodeCoverage, TBLFontUnicodeCoverage)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLFontUnicodeCoverage): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontUnicodeCoverage</code></p> <p><code>ARight</code>: <code>TBLFontUnicodeCoverage</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#ClearBit","title":"ClearBit(Integer)","text":"<p><code>procedure ClearBit(const AIndex: Integer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#parameters_2","title":"Parameters","text":"<p><code>AIndex</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#Equals","title":"Equals(TBLFontUnicodeCoverage)","text":"<p><code>function Equals(const AOther: TBLFontUnicodeCoverage): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#parameters_3","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontUnicodeCoverage</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#HasBit","title":"HasBit(Integer)","text":"<p><code>function HasBit(const AIndex: Integer): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#parameters_4","title":"Parameters","text":"<p><code>AIndex</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#SetBit","title":"SetBit(Integer)","text":"<p><code>procedure SetBit(const AIndex: Integer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontUnicodeCoverage/#parameters_5","title":"Parameters","text":"<p><code>AIndex</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationItem/","title":"TBLFontVariationItem","text":"<p>Associates a font variation tag with a value. </p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationItem/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontVariationItem = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontVariationItem/#properties","title":"Properties","text":"Name Description Tag Variation tag (32-bit). Value Variation value."},{"location":"Reference/Blend2D/classes/TBLFontVariationItem/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLFontVariationItem/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontVariationItem/#Tag","title":"Tag","text":"<p>Variation tag (32-bit). </p> <p><code>property Tag: TBLTag read FTag</code></p> <p>Type: <code>TBLTag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationItem/#Value","title":"Value","text":"<p>Variation value. </p> <p><code>property Value: Single read FValue</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationItem/#remarks","title":"Remarks","text":"<p>Values outside of [0, 1] range are invalid. </p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationItem/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontVariationItem/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/","title":"TBLFontVariationSettings","text":"<p>Font variation settings. </p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontVariationSettings = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#properties","title":"Properties","text":"Name Description Capacity The container capacity. IsEmpty Whether the container is empty, which means that no tag/value pairs are stored in it. Size The number of variation tag/value pairs stored in the container. Values The value associated with the given <code>AVariationTag</code>."},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> font variation settings. Finalize Destroys the font variation settings. Initialize Creates default initialized font variation settings."},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#operators","title":"Operators","text":"Name Description Equal(TBLFontVariationSettings, TBLFontVariationSettings) Returns True if two font variation settings instances are equal. Equal(TBLFontVariationSettings, Pointer) Used to compare against <code>nil</code> (empty font variation settings). NotEqual(TBLFontVariationSettings, TBLFontVariationSettings) Returns True if two font variation settings instances are not equal. NotEqual(TBLFontVariationSettings, Pointer) Used to compare against <code>nil</code> (empty font variation settings)."},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#methods","title":"Methods","text":"Name Description Clear Equals Tests whether this and <code>AOther</code> font variation settings are equal. GetValue Returns the value associated with the given <code>AVariationTag</code>. HasValue Tests whether the settings contains the given <code>AVariationTag</code>. RemoveValue Removes the given <code>AVariationTag</code> and its associated value from the settings. Reset Resets the font variation settings to a default constructed state. SetValue Sets or inserts the given <code>AVariationTag</code> to the settings, associating the <code>AVariationTag</code> with <code>AValue</code>. Swap Swaps the underlying representation with <code>AOther</code>. View Returns a normalized view of tag/value pairs."},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#Capacity","title":"Capacity","text":"<p>The container capacity. </p> <p><code>property Capacity: NativeInt read GetCapacity</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#IsEmpty","title":"IsEmpty","text":"<p>Whether the container is empty, which means that no tag/value pairs are stored in it. </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#Size","title":"Size","text":"<p>The number of variation tag/value pairs stored in the container. </p> <p><code>property Size: NativeInt read GetSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#Values","title":"Values","text":"<p>The value associated with the given <code>AVariationTag</code>.</p> <p>See <code>GetValue</code> and <code>SetValue</code> for more information. </p> <p><code>property Values[const AVariationTag: TBLTag]: Single read GetValue write SetValue</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#see-also","title":"See Also","text":"<ul> <li>GetValue</li> <li>SetValue</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> font variation settings. </p> <p><code>constructor Assign(var ADest: TBLFontVariationSettings; const ASrc: TBLFontVariationSettings); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontVariationSettings</code></p> <p><code>ASrc</code>: <code>TBLFontVariationSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the font variation settings. </p> <p><code>destructor Finalize(var ADest: TBLFontVariationSettings)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontVariationSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates default initialized font variation settings. </p> <p><code>constructor Initialize(out ADest: TBLFontVariationSettings)</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLFontVariationSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#Equal_0","title":"Equal(TBLFontVariationSettings, TBLFontVariationSettings)","text":"<p>Returns True if two font variation settings instances are equal. </p> <p><code>class operator Equal(const ALeft, ARight: TBLFontVariationSettings): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontVariationSettings</code></p> <p><code>ARight</code>: <code>TBLFontVariationSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#Equal_1","title":"Equal(TBLFontVariationSettings, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty font variation settings). </p> <p><code>class operator Equal(const ALeft: TBLFontVariationSettings; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontVariationSettings</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#NotEqual_0","title":"NotEqual(TBLFontVariationSettings, TBLFontVariationSettings)","text":"<p>Returns True if two font variation settings instances are not equal. </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLFontVariationSettings): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontVariationSettings</code></p> <p><code>ARight</code>: <code>TBLFontVariationSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#NotEqual_1","title":"NotEqual(TBLFontVariationSettings, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty font variation settings). </p> <p><code>class operator NotEqual(const ALeft: TBLFontVariationSettings; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFontVariationSettings</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#Clear","title":"Clear","text":"<p><code>procedure Clear; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#Equals","title":"Equals(TBLFontVariationSettings)","text":"<p>Tests whether this and <code>AOther</code> font variation settings are equal. </p> <p><code>function Equals(const AOther: TBLFontVariationSettings): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters_7","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontVariationSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#GetValue","title":"GetValue(TBLTag)","text":"<p>Returns the value associated with the given <code>AVariationTag</code>.</p> <p>If the <code>AVariationTag</code> doesn't exist or is invalid <code>NaN</code> is returned. </p> <p><code>function GetValue(const AVariationTag: TBLTag): Single; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters_8","title":"Parameters","text":"<p><code>AVariationTag</code>: <code>TBLTag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#returns_5","title":"Returns","text":"<p><code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#HasValue","title":"HasValue(TBLTag)","text":"<p>Tests whether the settings contains the given <code>AVariationTag</code>. </p> <p><code>function HasValue(const AVariationTag: TBLTag): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters_9","title":"Parameters","text":"<p><code>AVariationTag</code>: <code>TBLTag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#returns_6","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#RemoveValue","title":"RemoveValue(TBLTag)","text":"<p>Removes the given <code>AVariationTag</code> and its associated value from the settings.</p> <p>Nothing happens if the <code>AVariationTag</code> is not in the settings. </p> <p><code>procedure RemoveValue(const AVariationTag: TBLTag); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters_10","title":"Parameters","text":"<p><code>AVariationTag</code>: <code>TBLTag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#Reset","title":"Reset","text":"<p>Resets the font variation settings to a default constructed state. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#SetValue","title":"SetValue(TBLTag, Single)","text":"<p>Sets or inserts the given <code>AVariationTag</code> to the settings, associating the <code>AVariationTag</code> with <code>AValue</code>. </p> <p><code>procedure SetValue(const ATag: TBLTag; const AValue: Single); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters_11","title":"Parameters","text":"<p><code>ATag</code>: <code>TBLTag</code></p> <p><code>AValue</code>: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#Swap","title":"Swap(TBLFontVariationSettings)","text":"<p>Swaps the underlying representation with <code>AOther</code>. </p> <p><code>procedure Swap(var AOther: TBLFontVariationSettings); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#parameters_12","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontVariationSettings</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#View","title":"View","text":"<p>Returns a normalized view of tag/value pairs. </p> <p><code>function View: TBLFontVariationSettingsView; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettings/#returns_7","title":"Returns","text":"<p><code>TBLFontVariationSettingsView</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettingsView/","title":"TBLFontVariationSettingsView","text":"<p>A view unifying the representation of an internal storage used by <code>TBLFontVariationSettings</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettingsView/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontVariationSettingsView = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettingsView/#properties","title":"Properties","text":"Name Description Data Pointer to font variation items, where each item describes a tag and its value. IsEmpty Whether the view is empty. Items The font variation items, where each item describes a tag and its value. Size Count of items in <code>Data</code>."},{"location":"Reference/Blend2D/classes/TBLFontVariationSettingsView/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFontVariationSettingsView/#Data","title":"Data","text":"<p>Pointer to font variation items, where each item describes a tag and its value. </p> <p><code>property Data: PBLFontVariationItem read FData</code></p> <p>Type: <code>PBLFontVariationItem</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettingsView/#IsEmpty","title":"IsEmpty","text":"<p>Whether the view is empty. </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettingsView/#Items","title":"Items","text":"<p>The font variation items, where each item describes a tag and its value. </p> <p><code>property Items[const AIndex: NativeInt]: TBLFontVariationItem read GetItem; default</code></p> <p>Type: <code>TBLFontVariationItem</code></p>"},{"location":"Reference/Blend2D/classes/TBLFontVariationSettingsView/#Size","title":"Size","text":"<p>Count of items in <code>Data</code>. </p> <p><code>property Size: NativeInt read GetSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/","title":"TBLFormatInfo","text":"<p>Provides a detailed information about a pixel format. Use <code>Query</code> for information of Blend2D native pixel formats. </p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFormatInfo = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#properties","title":"Properties","text":"Name Description AShift ASize BShift BSize Depth Flags GShift GSize Palette RShift RSize Shifts Sizes"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#methods","title":"Methods","text":"Name Description AddFlags ClearFlags HasFlag Init Query Query Blend2D <code>AFormat</code> and copy it to this format info. Reset Sanitize Sanitize this <code>TBLFormatInfo</code>. SetShifts SetSizes"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#AShift","title":"AShift","text":"<p><code>property AShift: Byte read FShifts[3] write FShifts[3]</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#ASize","title":"ASize","text":"<p><code>property ASize: Byte read FSizes[3] write FSizes[3]</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#BShift","title":"BShift","text":"<p><code>property BShift: Byte read FShifts[2] write FShifts[2]</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#BSize","title":"BSize","text":"<p><code>property BSize: Byte read FSizes[2] write FSizes[2]</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#Depth","title":"Depth","text":"<p><code>property Depth: Integer read FDepth write FDepth</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#Flags","title":"Flags","text":"<p><code>property Flags: TBLFormatFlags read FFlags write FFlags</code></p> <p>Type: <code>TBLFormatFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#GShift","title":"GShift","text":"<p><code>property GShift: Byte read FShifts[1] write FShifts[1]</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#GSize","title":"GSize","text":"<p><code>property GSize: Byte read FSizes[1] write FSizes[1]</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#Palette","title":"Palette","text":"<p><code>property Palette: PBLRgba32 read GetPalette</code></p> <p>Type: <code>PBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#RShift","title":"RShift","text":"<p><code>property RShift: Byte read FShifts[0] write FShifts[0]</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#RSize","title":"RSize","text":"<p><code>property RSize: Byte read FSizes[0] write FSizes[0]</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#Shifts","title":"Shifts","text":"<p><code>property Shifts[const AIndex: Integer]: Byte read GetShift write SetShift</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#Sizes","title":"Sizes","text":"<p><code>property Sizes[const AIndex: Integer]: Byte read GetSize write SetSize</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#Equal","title":"Equal(TBLFormatInfo, TBLFormatInfo)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLFormatInfo): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#parameters","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFormatInfo</code></p> <p><code>ARight</code>: <code>TBLFormatInfo</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#NotEqual","title":"NotEqual(TBLFormatInfo, TBLFormatInfo)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLFormatInfo): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLFormatInfo</code></p> <p><code>ARight</code>: <code>TBLFormatInfo</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#AddFlags","title":"AddFlags(TBLFormatFlags)","text":"<p><code>procedure AddFlags(const AFlags: TBLFormatFlags); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#parameters_2","title":"Parameters","text":"<p><code>AFlags</code>: <code>TBLFormatFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#ClearFlags","title":"ClearFlags(TBLFormatFlags)","text":"<p><code>procedure ClearFlags(const AFlags: TBLFormatFlags); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#parameters_3","title":"Parameters","text":"<p><code>AFlags</code>: <code>TBLFormatFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#HasFlag","title":"HasFlag(TBLFormatFlag)","text":"<p><code>function HasFlag(const AFlag: TBLFormatFlag): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#parameters_4","title":"Parameters","text":"<p><code>AFlag</code>: <code>TBLFormatFlag</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#Init","title":"Init(Integer, TBLFormatFlags, TBLFourBytes, TBLFourBytes)","text":"<p><code>procedure Init(const ADepth: Integer; const AFlags: TBLFormatFlags; const ASizes, AShifts: TBLFourBytes); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#parameters_5","title":"Parameters","text":"<p><code>ADepth</code>: <code>Integer</code></p> <p><code>AFlags</code>: <code>TBLFormatFlags</code></p> <p><code>ASizes</code>: <code>TBLFourBytes</code></p> <p><code>AShifts</code>: <code>TBLFourBytes</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#Query","title":"Query(TBLFormat)","text":"<p>Query Blend2D <code>AFormat</code> and copy it to this format info. </p> <p><code>procedure Query(const AFormat: TBLFormat); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#parameters_6","title":"Parameters","text":"<p><code>AFormat</code>: <code>TBLFormat</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#remarks","title":"Remarks","text":"<p><code>TBLFormat.None</code> is considered invalid format, thus if it's passed to <code>Query</code> it will raise an error. &lt;.remarks&gt;Raised on failure.&lt;/.remarks&gt;</p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#Sanitize","title":"Sanitize","text":"<p>Sanitize this <code>TBLFormatInfo</code>.</p> <p>Sanitizer verifies whether the format is valid and updates the format information about flags to values that Blend2D expects. For example format flags are properly examined and simplified if possible, byte-swap is implicitly performed for formats where a single component matches one byte, etc... </p> <p><code>procedure Sanitize; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#SetShifts","title":"SetShifts(Byte, Byte, Byte, Byte)","text":"<p><code>procedure SetShifts(const AR, AG, AB, AA: Byte); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#parameters_7","title":"Parameters","text":"<p><code>AR</code>: <code>Byte</code></p> <p><code>AG</code>: <code>Byte</code></p> <p><code>AB</code>: <code>Byte</code></p> <p><code>AA</code>: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#SetSizes","title":"SetSizes(Byte, Byte, Byte, Byte)","text":"<p><code>procedure SetSizes(const AR, AG, AB, AA: Byte); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLFormatInfo/#parameters_8","title":"Parameters","text":"<p><code>AR</code>: <code>Byte</code></p> <p><code>AG</code>: <code>Byte</code></p> <p><code>AB</code>: <code>Byte</code></p> <p><code>AA</code>: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/","title":"TBLGlyphBuffer","text":"<p>Glyph buffer.</p> <p>Can hold either text or glyphs and provides basic memory management that is used for text shaping, character to glyph mapping, glyph substitution, and glyph positioning.</p> <p>Glyph buffer provides two separate buffers called 'Primary' and 'Secondary' that serve different purposes during processing. Primary buffer always holds actual text/glyph array, and secondary buffer is either used as a scratch buffer during glyph substitution or to hold glyph positions after the processing is complete and glyph positions were calculated. </p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGlyphBuffer = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#properties","title":"Properties","text":"Name Description Content Flags GlyphRun HasGlyphs Whether the buffer contains glyph-id data. HasInvalidChars Tests whether the input string contained invalid characters (unicode encoding errors). HasInvalidFontData Whether one or more operation was terminated before completion because of invalid data in a font. HasText Whether the buffer contains unicode data. HasUndefinedChars Whether the input string contained undefined characters that weren't mapped properly to glyphs. InfoData IsEmpty PlacementData Size"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#constructors","title":"Constructors","text":"Name Description Assign Copying a glyph buffer is not allowed. This will raise a <code>EBlend2DError</code> exception with result <code>TBLResult.NotPermitted</code>. Finalize Destroys the glyph buffer. Initialize Creates a default constructed glyph buffer."},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#operators","title":"Operators","text":"Name Description Equal Used to compare against <code>nil</code>. NotEqual Used to compare against <code>nil</code>."},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#methods","title":"Methods","text":"Name Description Clear Clears the content of <code>TBLGlyphBuffer</code> without releasing internal buffers. HasFlag Tests whether the glyph-buffer has <code>AFlag</code> set. Reset Resets the <code>TBLGlyphBuffer</code> into its default constructed state. The content will be cleared and allocated memory released. ResetDebugSink SetDebugSink SetGlyphs(PUInt32, NativeInt) Assigns a glyph content of this <code>TBLGlyphBuffer</code> from the given <code>AGlyphData</code>. SetGlyphs(TArray&lt;UInt32&gt;) Assigns a glyph content of this <code>TBLGlyphBuffer</code> from the given <code>AGlyphData</code>. SetGlyphsFromRecord Assigns a glyph content of this <code>TBLGlyphBuffer</code> from an array of glyphs or from a foreign record that contains glyphs and possibly other members that have to be skipped. The glyph size can be either 16-bit (2) or 32-bit (4). The last parameter <code>AGlyphAdvance</code> specifies how many bytes to advance after a glyph value is read. SetLatin1Text Assigns a text content of this <code>TBLGlyphBuffer</code> from LATIN1 (ISO/IEC 8859-1) string. SetText(Pointer, NativeInt, TBLTextEncoding) Assigns a text content of this <code>TBLGlyphBuffer</code>. SetText(AnsiString) Assigns a text content of this <code>TBLGlyphBuffer</code>. SetText(UCS4String) Assigns a text content of this <code>TBLGlyphBuffer</code>. SetText(UTF8String) Assigns a text content of this <code>TBLGlyphBuffer</code>. SetText(String) Assigns a text content of this <code>TBLGlyphBuffer</code>. SetUtf16Text Assigns a text content of this <code>TBLGlyphBuffer</code> from UTF-16 encoded string. The <code>ALength</code> parameter represents the  length of the <code>AText</code> in 16-bit units. SetUtf32Text Assigns a text content of this <code>TBLGlyphBuffer</code> from UTF-32 encoded string. The <code>ALength</code> parameter represents the length of the <code>AText</code> in 32-bit units. SetUtf8Text Assigns a text content of this <code>TBLGlyphBuffer</code> from UTF-8 encoded string. The <code>ALength</code> parameter represents the length of the <code>AText</code> in bytes."},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#Content","title":"Content","text":"<p><code>property Content: PUInt32 read GetContent</code></p> <p>Type: <code>PUInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#Flags","title":"Flags","text":"<p><code>property Flags: TBLGlyphRunFlags read GetFlags</code></p> <p>Type: <code>TBLGlyphRunFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#GlyphRun","title":"GlyphRun","text":"<p><code>property GlyphRun: TBLGlyphRun read GetGlyphRun</code></p> <p>Type: <code>TBLGlyphRun</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#HasGlyphs","title":"HasGlyphs","text":"<p>Whether the buffer contains glyph-id data. </p> <p><code>property HasGlyphs: Boolean read GetHasGlyphs</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#HasInvalidChars","title":"HasInvalidChars","text":"<p>Tests whether the input string contained invalid characters (unicode encoding errors). </p> <p><code>property HasInvalidChars: Boolean read GetHasInvalidChars</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#HasInvalidFontData","title":"HasInvalidFontData","text":"<p>Whether one or more operation was terminated before completion because of invalid data in a font. </p> <p><code>property HasInvalidFontData: Boolean read GetHasInvalidFontData</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#HasText","title":"HasText","text":"<p>Whether the buffer contains unicode data. </p> <p><code>property HasText: Boolean read GetHasText</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#HasUndefinedChars","title":"HasUndefinedChars","text":"<p>Whether the input string contained undefined characters that weren't mapped properly to glyphs. </p> <p><code>property HasUndefinedChars: Boolean read GetHasUndefinedChars</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#InfoData","title":"InfoData","text":"<p><code>property InfoData: PBLGlyphInfo read GetInfoData</code></p> <p>Type: <code>PBLGlyphInfo</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#IsEmpty","title":"IsEmpty","text":"<p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#PlacementData","title":"PlacementData","text":"<p><code>property PlacementData: PBLGlyphPlacement read GetPlacementData</code></p> <p>Type: <code>PBLGlyphPlacement</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#Size","title":"Size","text":"<p><code>property Size: NativeInt read GetSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#Assign","title":"<code>Assign</code>","text":"<p>Copying a glyph buffer is not allowed. This will raise a <code>EBlend2DError</code> exception with result <code>TBLResult.NotPermitted</code>. </p> <p><code>constructor Assign(var ADest: TBLGlyphBuffer; const ASrc: TBLGlyphBuffer); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLGlyphBuffer</code></p> <p><code>ASrc</code>: <code>TBLGlyphBuffer</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the glyph buffer. </p> <p><code>destructor Finalize(var ADest: TBLGlyphBuffer)</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLGlyphBuffer</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default constructed glyph buffer. </p> <p><code>constructor Initialize(out ADest: TBLGlyphBuffer)</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLGlyphBuffer</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#Equal","title":"Equal(TBLGlyphBuffer, Pointer)","text":"<p>Used to compare against <code>nil</code>. </p> <p><code>class operator Equal(const ALeft: TBLGlyphBuffer; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLGlyphBuffer</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#NotEqual","title":"NotEqual(TBLGlyphBuffer, Pointer)","text":"<p>Used to compare against <code>nil</code>. </p> <p><code>class operator NotEqual(const ALeft: TBLGlyphBuffer; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLGlyphBuffer</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#Clear","title":"Clear","text":"<p>Clears the content of <code>TBLGlyphBuffer</code> without releasing internal buffers. </p> <p><code>procedure Clear; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#HasFlag","title":"HasFlag(TBLGlyphRunFlag)","text":"<p>Tests whether the glyph-buffer has <code>AFlag</code> set. </p> <p><code>function HasFlag(const AFlag: TBLGlyphRunFlag): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_5","title":"Parameters","text":"<p><code>AFlag</code>: <code>TBLGlyphRunFlag</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#Reset","title":"Reset","text":"<p>Resets the <code>TBLGlyphBuffer</code> into its default constructed state. The content will be cleared and allocated memory released. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#ResetDebugSink","title":"ResetDebugSink","text":"<p><code>procedure ResetDebugSink; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetDebugSink","title":"SetDebugSink(TBLDebugMessageSinkFunc, Pointer)","text":"<p><code>procedure SetDebugSink(const ASink: TBLDebugMessageSinkFunc; const AUserData: Pointer = nil); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_6","title":"Parameters","text":"<p><code>ASink</code>: <code>TBLDebugMessageSinkFunc</code></p> <p><code>AUserData</code>: <code>Pointer = nil</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetGlyphs_0","title":"SetGlyphs(PUInt32, NativeInt)","text":"<p>Assigns a glyph content of this <code>TBLGlyphBuffer</code> from the given <code>AGlyphData</code>. </p> <p><code>procedure SetGlyphs(const AGlyphData: PUInt32; const ASize: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_7","title":"Parameters","text":"<p><code>AGlyphData</code>: <code>PUInt32</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetGlyphs_1","title":"SetGlyphs(TArray&lt;UInt32&gt;)","text":"<p>Assigns a glyph content of this <code>TBLGlyphBuffer</code> from the given <code>AGlyphData</code>. </p> <p><code>procedure SetGlyphs(const AGlyphData: TArray&lt;UInt32&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_8","title":"Parameters","text":"<p><code>AGlyphData</code>: <code>TArray&lt;UInt32&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetGlyphsFromRecord","title":"SetGlyphsFromRecord(Pointer, NativeInt, NativeInt, NativeInt)","text":"<p>Assigns a glyph content of this <code>TBLGlyphBuffer</code> from an array of glyphs or from a foreign record that contains glyphs and possibly other members that have to be skipped. The glyph size can be either 16-bit (2) or 32-bit (4). The last parameter <code>AGlyphAdvance</code> specifies how many bytes to advance after a glyph value is read. </p> <p><code>procedure SetGlyphsFromRecord(const AGlyphData: Pointer; const ASize, AGlyphIdSize, AGlyphAdvance: NativeInt); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_9","title":"Parameters","text":"<p><code>AGlyphData</code>: <code>Pointer</code></p> <p><code>ASize</code>: <code>NativeInt</code></p> <p><code>AGlyphIdSize</code>: <code>NativeInt</code></p> <p><code>AGlyphAdvance</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetLatin1Text","title":"SetLatin1Text(PAnsiChar, NativeInt)","text":"<p>Assigns a text content of this <code>TBLGlyphBuffer</code> from LATIN1 (ISO/IEC 8859-1) string. </p> <p><code>procedure SetLatin1Text(const AText: PAnsiChar; const ALength: NativeInt = -1); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_10","title":"Parameters","text":"<p><code>AText</code>: <code>PAnsiChar</code></p> <p><code>ALength</code>: <code>NativeInt = -1</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetText_0","title":"SetText(Pointer, NativeInt, TBLTextEncoding)","text":"<p>Assigns a text content of this <code>TBLGlyphBuffer</code>.</p> <p>This is a generic function that accepts a pointer to data, which is specified by <code>AEncoding</code>. The <code>ASize</code> argument depends on encoding as well. If the encoding specifies byte string (Latin1 or Utf8) then it's bytes, if the encoding specifies Utf16 or Utf32 then it would describe the number of <code>UInt16</code> or <code>UInt32</code> code points, respectively.</p> <p>Null-terminated string can be specified by passing <code>-1</code> as <code>ASize</code>. </p> <p><code>procedure SetText(const ATextData: Pointer; const ASize: NativeInt; const AEncoding: TBLTextEncoding); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_11","title":"Parameters","text":"<p><code>ATextData</code>: <code>Pointer</code></p> <p><code>ASize</code>: <code>NativeInt</code></p> <p><code>AEncoding</code>: <code>TBLTextEncoding</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetText_1","title":"SetText(AnsiString)","text":"<p>Assigns a text content of this <code>TBLGlyphBuffer</code>. </p> <p><code>procedure SetText(const AText: AnsiString); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_10","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_12","title":"Parameters","text":"<p><code>AText</code>: <code>AnsiString</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetText_2","title":"SetText(UCS4String)","text":"<p>Assigns a text content of this <code>TBLGlyphBuffer</code>. </p> <p><code>procedure SetText(const AText: UCS4String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_11","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_13","title":"Parameters","text":"<p><code>AText</code>: <code>UCS4String</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetText_3","title":"SetText(UTF8String)","text":"<p>Assigns a text content of this <code>TBLGlyphBuffer</code>. </p> <p><code>procedure SetText(const AText: UTF8String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_12","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_14","title":"Parameters","text":"<p><code>AText</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetText_4","title":"SetText(String)","text":"<p>Assigns a text content of this <code>TBLGlyphBuffer</code>. </p> <p><code>procedure SetText(const AText: String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_13","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_15","title":"Parameters","text":"<p><code>AText</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetUtf16Text","title":"SetUtf16Text(PWideChar, NativeInt)","text":"<p>Assigns a text content of this <code>TBLGlyphBuffer</code> from UTF-16 encoded string. The <code>ALength</code> parameter represents the  length of the <code>AText</code> in 16-bit units. </p> <p><code>procedure SetUtf16Text(const AText: PWideChar; const ALength: NativeInt = -1); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_14","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_16","title":"Parameters","text":"<p><code>AText</code>: <code>PWideChar</code></p> <p><code>ALength</code>: <code>NativeInt = -1</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetUtf32Text","title":"SetUtf32Text(PUCS4Char, NativeInt)","text":"<p>Assigns a text content of this <code>TBLGlyphBuffer</code> from UTF-32 encoded string. The <code>ALength</code> parameter represents the length of the <code>AText</code> in 32-bit units. </p> <p><code>procedure SetUtf32Text(const AText: PUCS4Char; const ALength: NativeInt = -1); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_15","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_17","title":"Parameters","text":"<p><code>AText</code>: <code>PUCS4Char</code></p> <p><code>ALength</code>: <code>NativeInt = -1</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#SetUtf8Text","title":"SetUtf8Text(PUTF8Char, NativeInt)","text":"<p>Assigns a text content of this <code>TBLGlyphBuffer</code> from UTF-8 encoded string. The <code>ALength</code> parameter represents the length of the <code>AText</code> in bytes. </p> <p><code>procedure SetUtf8Text(const AText: PUTF8Char; const ALength: NativeInt = -1); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#exceptions_16","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGlyphBuffer/#parameters_18","title":"Parameters","text":"<p><code>AText</code>: <code>PUTF8Char</code></p> <p><code>ALength</code>: <code>NativeInt = -1</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphInfo/","title":"TBLGlyphInfo","text":"<p>Contains additional information associated with a glyph used by <code>TBLGlyphBuffer</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLGlyphInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGlyphInfo = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLGlyphInfo/#see-also","title":"See Also","text":"<ul> <li>TBLGlyphBuffer</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLGlyphInfo/#properties","title":"Properties","text":"Name Description Cluster"},{"location":"Reference/Blend2D/classes/TBLGlyphInfo/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLGlyphInfo/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphInfo/#Cluster","title":"Cluster","text":"<p><code>property Cluster: UInt32 read FCluster</code></p> <p>Type: <code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphInfo/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphInfo/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphMappingState/","title":"TBLGlyphMappingState","text":"<p>Character to glyph mapping state. </p>"},{"location":"Reference/Blend2D/classes/TBLGlyphMappingState/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGlyphMappingState = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLGlyphMappingState/#properties","title":"Properties","text":"Name Description GlyphCount Number of glyphs or glyph-items on output. UndefinedCount Undefined glyph count (chars that have no mapping). UndefinedFirst Index of the first undefined glyph (-1 if none)."},{"location":"Reference/Blend2D/classes/TBLGlyphMappingState/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLGlyphMappingState/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphMappingState/#GlyphCount","title":"GlyphCount","text":"<p>Number of glyphs or glyph-items on output. </p> <p><code>property GlyphCount: NativeInt read GetGlyphCount</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphMappingState/#UndefinedCount","title":"UndefinedCount","text":"<p>Undefined glyph count (chars that have no mapping). </p> <p><code>property UndefinedCount: NativeInt read GetUndefinedCount</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphMappingState/#UndefinedFirst","title":"UndefinedFirst","text":"<p>Index of the first undefined glyph (-1 if none). </p> <p><code>property UndefinedFirst: NativeInt read GetUndefinedFirst</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphMappingState/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphMappingState/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphPlacement/","title":"TBLGlyphPlacement","text":"<p>Glyph placement.</p> <p>Provides information about glyph offset (X/Y) and advance (X/Y). </p>"},{"location":"Reference/Blend2D/classes/TBLGlyphPlacement/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGlyphPlacement = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLGlyphPlacement/#fields","title":"Fields","text":"Name Description Advance Placement"},{"location":"Reference/Blend2D/classes/TBLGlyphPlacement/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLGlyphPlacement/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphPlacement/#Advance","title":"Advance","text":"<p><code>var Advance: TBLPointI</code></p> <p>Type: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphPlacement/#Placement","title":"Placement","text":"<p><code>var Placement: TBLPointI</code></p> <p>Type: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphPlacement/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphPlacement/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/","title":"TBLGlyphRun","text":"<p>TBLGlyphRun describes a set of consecutive glyphs and their placements.</p> <p>TBLGlyphRun should only be used to pass glyph IDs and their placements to the rendering context. The purpose of TBLGlyphRun is to allow rendering glyphs, which could be shaped by various shaping engines (Blend2D, Harfbuzz, etc).</p> <p>TBLGlyphRun allows to render glyphs that are stored as UInt32[] array or part of a bigger structure (for example <code>hb_glyph_info_t</code> used by HarfBuzz). Glyph placements at the moment use Blend2D's <code>TBLGlyphPlacement</code> or <code>TBLPoint</code>, but it's possible to extend the data type in the future. </p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGlyphRun = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#see-also","title":"See Also","text":"<ul> <li>TBLGlyphPlacement</li> <li>TBLPoint</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#properties","title":"Properties","text":"Name Description Flags Glyph-run flags. GlyphAdvance Advance of <code>GlyphData</code> array. GlyphData Glyph id data (abstract, incremented by <code>GlyphAdvance</code>). GlyphDataAsGlyphIds IsEmpty PlacementAdvance Advance of <code>PlacementData</code> array. PlacementData Glyph placement data (abstract, incremented by <code>PlacementAdvance</code>). PlacementDataAsGlyphPlacements PlacementDataAsPoints PlacementType Type of placement. Size Size of the glyph-run in glyph units."},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#methods","title":"Methods","text":"Name Description Reset ResetGlyphIdData ResetPlacementData SetGlyphData(Pointer, ShortInt) SetGlyphData(PBLGlyphId) SetPlacementData(Pointer, ShortInt) SetPlacementData(PBLPoint) SetPlacementData(PBLGlyphPlacement)"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#Flags","title":"Flags","text":"<p>Glyph-run flags. </p> <p><code>property Flags: TBLGlyphRunFlags read GetFlags</code></p> <p>Type: <code>TBLGlyphRunFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#GlyphAdvance","title":"GlyphAdvance","text":"<p>Advance of <code>GlyphData</code> array. </p> <p><code>property GlyphAdvance: ShortInt read FGlyphAdvance</code></p> <p>Type: <code>ShortInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#GlyphData","title":"GlyphData","text":"<p>Glyph id data (abstract, incremented by <code>GlyphAdvance</code>). </p> <p><code>property GlyphData: Pointer read FGlyphData</code></p> <p>Type: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#GlyphDataAsGlyphIds","title":"GlyphDataAsGlyphIds","text":"<p><code>property GlyphDataAsGlyphIds: PBLGlyphId read GetGlyphDataAsGlyphIds</code></p> <p>Type: <code>PBLGlyphId</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#IsEmpty","title":"IsEmpty","text":"<p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#PlacementAdvance","title":"PlacementAdvance","text":"<p>Advance of <code>PlacementData</code> array. </p> <p><code>property PlacementAdvance: ShortInt read FPlacementAdvance</code></p> <p>Type: <code>ShortInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#PlacementData","title":"PlacementData","text":"<p>Glyph placement data (abstract, incremented by <code>PlacementAdvance</code>). </p> <p><code>property PlacementData: Pointer read FPlacementData</code></p> <p>Type: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#PlacementDataAsGlyphPlacements","title":"PlacementDataAsGlyphPlacements","text":"<p><code>property PlacementDataAsGlyphPlacements: PBLGlyphPlacement read GetPlacementDataAsGlyphPlacements</code></p> <p>Type: <code>PBLGlyphPlacement</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#PlacementDataAsPoints","title":"PlacementDataAsPoints","text":"<p><code>property PlacementDataAsPoints: PBLPoint read GetPlacementDataAsPoints</code></p> <p>Type: <code>PBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#PlacementType","title":"PlacementType","text":"<p>Type of placement. </p> <p><code>property PlacementType: TBLGlyphPlacementType read GetPlacementType</code></p> <p>Type: <code>TBLGlyphPlacementType</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#Size","title":"Size","text":"<p>Size of the glyph-run in glyph units. </p> <p><code>property Size: NativeInt read GetSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#ResetGlyphIdData","title":"ResetGlyphIdData","text":"<p><code>procedure ResetGlyphIdData; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#ResetPlacementData","title":"ResetPlacementData","text":"<p><code>procedure ResetPlacementData; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#SetGlyphData_0","title":"SetGlyphData(Pointer, ShortInt)","text":"<p><code>procedure SetGlyphData(const AData: Pointer; const AAdvance: ShortInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#parameters","title":"Parameters","text":"<p><code>AData</code>: <code>Pointer</code></p> <p><code>AAdvance</code>: <code>ShortInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#SetGlyphData_1","title":"SetGlyphData(PBLGlyphId)","text":"<p><code>procedure SetGlyphData(const AGlyphData: PBLGlyphId); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#parameters_1","title":"Parameters","text":"<p><code>AGlyphData</code>: <code>PBLGlyphId</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#SetPlacementData_0","title":"SetPlacementData(Pointer, ShortInt)","text":"<p><code>procedure SetPlacementData(const AData: Pointer; const AAdvance: ShortInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#parameters_2","title":"Parameters","text":"<p><code>AData</code>: <code>Pointer</code></p> <p><code>AAdvance</code>: <code>ShortInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#SetPlacementData_1","title":"SetPlacementData(PBLPoint)","text":"<p><code>procedure SetPlacementData(const AData: PBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#parameters_3","title":"Parameters","text":"<p><code>AData</code>: <code>PBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#SetPlacementData_2","title":"SetPlacementData(PBLGlyphPlacement)","text":"<p><code>procedure SetPlacementData(const AData: PBLGlyphPlacement); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRun/#parameters_4","title":"Parameters","text":"<p><code>AData</code>: <code>PBLGlyphPlacement</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/","title":"TBLGlyphRunIterator","text":"<p>A helper to iterate over a <code>TBLGlyphRun</code>.</p> <p>Takes into consideration glyph-id advance and glyph-offset advance.</p> <p>Example:</p> <pre><code>  procedure InspectGlyphRun(const AGlyphRun: TBLGlyphRun);\n  begin\n    var It := TBLGlyphRunIterator.Create(AGlyphRun);\n    if (It.HasPlacement) then\n    begin\n      while (not It.AtEnd) do\n      begin\n        var GlyphId := It.GlyphId;\n        var Offset := It.Placement&lt;tblpoint&gt;;\n\n        // Do something with `GlyphId` and `Offset`.\n\n        It.Advance;\n      end;\n    end\n    else\n    begin\n      while (not It.AtEnd) do\n      begin\n        var GlyphId := It.GlyphId;\n\n        // Do something with `GlyphId`.\n\n        It.Advance;\n      end;\n    end;\n  end;\n```&lt;/tblpoint&gt;\n\n## Definition\n\nUnit: [Blend2D](../index.md)\n\n``` delphi\ntype TBLGlyphRunIterator = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#properties","title":"Properties","text":"Name Description GlyphId HasPlacement IsEmpty PlacementAsGlyphPlacement PlacementAsPoint"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#constructors","title":"Constructors","text":"Name Description Create Initialize"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#methods","title":"Methods","text":"Name Description Advance AtEnd Placement&lt;T&gt; Reset(TBLGlyphRun) Reset"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#GlyphId","title":"GlyphId","text":"<p><code>property GlyphId: TBLGlyphId read GetGlyphId</code></p> <p>Type: <code>TBLGlyphId</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#HasPlacement","title":"HasPlacement","text":"<p><code>property HasPlacement: Boolean read GetHasPlacement</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#IsEmpty","title":"IsEmpty","text":"<p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#PlacementAsGlyphPlacement","title":"PlacementAsGlyphPlacement","text":"<p><code>property PlacementAsGlyphPlacement: TBLGlyphPlacement read GetPlacementAsGlyphPlacement</code></p> <p>Type: <code>TBLGlyphPlacement</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#PlacementAsPoint","title":"PlacementAsPoint","text":"<p><code>property PlacementAsPoint: TBLPoint read GetPlacementAsPoint</code></p> <p>Type: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AGlyphRun: TBLGlyphRun)</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#parameters","title":"Parameters","text":"<p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#Initialize","title":"<code>Initialize</code>","text":"<p><code>constructor Initialize(out ADest: TBLGlyphRunIterator)</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLGlyphRunIterator</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#Advance","title":"Advance","text":"<p><code>procedure Advance; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#AtEnd","title":"AtEnd","text":"<p><code>function AtEnd: Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#Placement`1","title":"Placement&lt;T&gt;","text":"<p><code>function Placement&lt;T&gt;: T; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#type-parameters","title":"Type Parameters","text":"<p><code>T</code>: </p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#returns_1","title":"Returns","text":"<p><code>T</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#Reset_0","title":"Reset(TBLGlyphRun)","text":"<p><code>procedure Reset(const AGlyphRun: TBLGlyphRun); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#parameters_2","title":"Parameters","text":"<p><code>AGlyphRun</code>: <code>TBLGlyphRun</code></p>"},{"location":"Reference/Blend2D/classes/TBLGlyphRunIterator/#Reset_1","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/","title":"TBLGradient","text":"<p>Gradient. </p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGradient = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLGradient/#properties","title":"Properties","text":"Name Description Angle Capacity The gradient capacity [in stops]. Conic ConicAngle ConicRepeat ExtendMode The gradient extend mode. HasTransform Tests whether the gradient has a non-identity transformation matrix. IsEmpty Whether the gradient is empty. Kind The type of the gradient. Linear R0 R1 Radial Size The number of stops the gradient has. StopData The gradient stop data. Stops Gradient stop at <code>AIndex</code>. Transform The transformation matrix applied to the gradient. TransformKind Returns the type of the transformation matrix returned by <code>Transform</code>. Values X0 X1 Y0 Y1"},{"location":"Reference/Blend2D/classes/TBLGradient/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor creates a weak copy of <code>ASrc</code>. Create(TBLConicGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;, TBLMatrix2D) Create(TBLRadialGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;, TBLMatrix2D) Create(TBLLinearGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;, TBLMatrix2D) Create(TBLConicGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;) Create(TBLRadialGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;) Create(TBLLinearGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;) Create(TBLConicGradientValues, TBLExtendMode) Create(TBLRadialGradientValues, TBLExtendMode) Create(TBLLinearGradientValues, TBLExtendMode) Create(TBLGradientKind, PDouble) Create(TBLGradientKind, TArray&lt;Double&gt;) Finalize Destroys the gradient. Initialize Creates a default constructed gradient."},{"location":"Reference/Blend2D/classes/TBLGradient/#operators","title":"Operators","text":"Name Description Equal(TBLGradient, TBLGradient) Equality operator, performs the same operation as <code>ALeft.Equals(ARight)</code>. Equal(TBLGradient, Pointer) Used to compare against <code>nil</code>. NotEqual(TBLGradient, TBLGradient) Equality operator, performs the same operation as <code>not ALeft.Equals(ARight)</code>. NotEqual(TBLGradient, Pointer) Used to compare against <code>nil</code>."},{"location":"Reference/Blend2D/classes/TBLGradient/#methods","title":"Methods","text":"Name Description AddStop(Double, TAlphaColor) Adds a color stop described as a <code>AColor</code> at the given <code>AOffset</code>. AddStop(Double, TBLRgba64) Adds a color stop described as a 64-bit color <code>ARgba64</code> at the given <code>AOffset</code>. AddStop(Double, TBLRgba32) Adds a color stop described as a 32-bit color <code>ARgba32</code> at the given <code>AOffset</code>. ApplyTransform AssignStops(TBLArrayView&lt;TBLGradientStop&gt;) Assigns colors stops of the gradient to <code>AStops</code>. AssignStops(PBLGradientStop, NativeInt) Assigns colors stops of the gradient to <code>AStops</code> of size <code>ACount</code>. AssignStops(TArray&lt;TBLGradientStop&gt;) Assigns colors stops of the gradient to <code>AStops</code>. Equals Tests whether the gradient equals <code>AOther</code>. IndexOfStop Returns the index of a color stop in Stops array of the given <code>AOffset</code>. Make(TBLConicGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;, TBLMatrix2D) Make(TBLRadialGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;, TBLMatrix2D) Make(TBLLinearGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;, TBLMatrix2D) Make(TBLConicGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;) Make(TBLRadialGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;) Make(TBLLinearGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;) Make(TBLConicGradientValues, TBLExtendMode) Make(TBLRadialGradientValues, TBLExtendMode) Make(TBLLinearGradientValues, TBLExtendMode) PostRotate(Double, TBLPointI) PostRotate(Double, TBLPoint) PostRotate(Double, Double, Double) PostRotate(Double) PostScale(TBLPointI) PostScale(TBLPoint) PostScale(Double, Double) PostScale(Double) PostSkew(TBLPoint) PostSkew(Double, Double) PostTransform PostTranslate(TBLPointI) PostTranslate(TBLPoint) PostTranslate(Double, Double) RemoveStop Removes stop at the given <code>AIndex</code>. RemoveStopByOffset Removes stop at the given <code>AOffset</code>, which should be in <code>[0, 1]</code> range. RemoveStops Removes all stops in the given range, which describes indexes in the stop array. RemoveStopsByOffset Removes all stops in the given interval <code>[AOffsetMin, AOffsetMax]</code>, which specifies stop offsets, which are between [0, 1]. ReplaceStop(NativeInt, Double, TAlphaColor) Replaces stop at the given <code>AIndex</code> with a new color stop described by <code>AOffset</code> and <code>AColor</code>. ReplaceStop(NativeInt, Double, TBLRgba64) Replaces stop at the given <code>AIndex</code> with a new color stop described by <code>AOffset</code> and <code>ARgba64</code>. ReplaceStop(NativeInt, Double, TBLRgba32) Replaces stop at the given <code>AIndex</code> with a new color stop described by <code>AOffset</code> and <code>ARgba32</code>. Reserve Reserves the capacity of gradient for at least <code>AMinCapacity</code> stops. Reset Resets the gradient to its construction state. ResetExtendMode Resets the gradient extend mode to <code>TBLExtendMode.Pad</code>. ResetStops Resets all stops of the gradient. ResetTransform Rotate(Double, TBLPointI) Rotate(Double, TBLPoint) Rotate(Double, Double, Double) Rotate(Double) Scale(TBLPointI) Scale(TBLPoint) Scale(Double, Double) Scale(Double) SetValues(TBLConicGradientValues) SetValues(TBLRadialGradientValues) SetValues(TBLLinearGradientValues) SetValues(NativeInt, PDouble, NativeInt) SetValues(NativeInt, TArray&lt;Double&gt;) Shrink Shrinks the capacity of gradient stops to fit the current use. Skew(TBLPoint) Skew(Double, Double) StopsView Returns gradient stops and their count as `TBLArrayView Swap Swaps this gradient with <code>AOther</code>. Translate(TBLPointI) Translate(TBLPoint) Translate(Double, Double)"},{"location":"Reference/Blend2D/classes/TBLGradient/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGradient/#Angle","title":"Angle","text":"<p><code>property Angle: Double read GetAngle write SetAngle</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Capacity","title":"Capacity","text":"<p>The gradient capacity [in stops]. </p> <p><code>property Capacity: NativeInt read GetCapacity</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Conic","title":"Conic","text":"<p><code>property Conic: TBLConicGradientValues read GetConic write SetConic</code></p> <p>Type: <code>TBLConicGradientValues</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#ConicAngle","title":"ConicAngle","text":"<p><code>property ConicAngle: Double read GetConicAngle write SetConicAngle</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#ConicRepeat","title":"ConicRepeat","text":"<p><code>property ConicRepeat: Double read GetConicRepeat write SetConicRepeat</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#ExtendMode","title":"ExtendMode","text":"<p>The gradient extend mode. </p> <p><code>property ExtendMode: TBLExtendMode read GetExtendMode write SetExtendMode</code></p> <p>Type: <code>TBLExtendMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#HasTransform","title":"HasTransform","text":"<p>Tests whether the gradient has a non-identity transformation matrix. </p> <p><code>property HasTransform: Boolean read GetHasTransform</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#IsEmpty","title":"IsEmpty","text":"<p>Whether the gradient is empty.</p> <p>Empty gradient is considered any gradient that has no stops. </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Kind","title":"Kind","text":"<p>The type of the gradient. </p> <p><code>property Kind: TBLGradientKind read GetKind write SetKind</code></p> <p>Type: <code>TBLGradientKind</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Linear","title":"Linear","text":"<p><code>property Linear: TBLLinearGradientValues read GetLinear write SetLinear</code></p> <p>Type: <code>TBLLinearGradientValues</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#R0","title":"R0","text":"<p><code>property R0: Double read GetR0 write SetR0</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#R1","title":"R1","text":"<p><code>property R1: Double read GetR1 write SetR1</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Radial","title":"Radial","text":"<p><code>property Radial: TBLRadialGradientValues read GetRadial write SetRadial</code></p> <p>Type: <code>TBLRadialGradientValues</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Size","title":"Size","text":"<p>The number of stops the gradient has. </p> <p><code>property Size: NativeInt read GetSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#StopData","title":"StopData","text":"<p>The gradient stop data. </p> <p><code>property StopData: PBLGradientStop read GetStopData</code></p> <p>Type: <code>PBLGradientStop</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Stops","title":"Stops","text":"<p>Gradient stop at <code>AIndex</code>. </p> <p><code>property Stops[const AIndex: NativeInt]: TBLGradientStop read GetStop</code></p> <p>Type: <code>TBLGradientStop</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Transform","title":"Transform","text":"<p>The transformation matrix applied to the gradient. </p> <p><code>property Transform: TBLMatrix2D read GetTransform write SetTransform</code></p> <p>Type: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#TransformKind","title":"TransformKind","text":"<p>Returns the type of the transformation matrix returned by <code>Transform</code>. </p> <p><code>property TransformKind: TBLTransformKind read GetTransformKind</code></p> <p>Type: <code>TBLTransformKind</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#see-also","title":"See Also","text":"<ul> <li>Transform</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Values","title":"Values","text":"<p><code>property Values[const AIndex: NativeInt]: Double read GetValue write SetValue</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#X0","title":"X0","text":"<p><code>property X0: Double read GetX0 write SetX0</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#X1","title":"X1","text":"<p><code>property X1: Double read GetX1 write SetX1</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Y0","title":"Y0","text":"<p><code>property Y0: Double read GetY0 write SetY0</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Y1","title":"Y1","text":"<p><code>property Y1: Double read GetY1 write SetY1</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGradient/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor creates a weak copy of <code>ASrc</code>. </p> <p><code>constructor Assign(var ADest: TBLGradient; const ASrc: TBLGradient); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLGradient</code></p> <p><code>ASrc</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Create_0","title":"<code>Create</code>","text":"<p><code>constructor Create(const AValues: TBLConicGradientValues; const AExtendMode: TBLExtendMode; const AStops: TArray&lt;TBLGradientStop&gt;; const ATransform: TBLMatrix2D); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_1","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLConicGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Create_1","title":"<code>Create</code>","text":"<p><code>constructor Create(const AValues: TBLRadialGradientValues; const AExtendMode: TBLExtendMode; const AStops: TArray&lt;TBLGradientStop&gt;; const ATransform: TBLMatrix2D); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_2","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLRadialGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Create_2","title":"<code>Create</code>","text":"<p><code>constructor Create(const AValues: TBLLinearGradientValues; const AExtendMode: TBLExtendMode; const AStops: TArray&lt;TBLGradientStop&gt;; const ATransform: TBLMatrix2D); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_3","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLLinearGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Create_3","title":"<code>Create</code>","text":"<p><code>constructor Create(const AValues: TBLConicGradientValues; const AExtendMode: TBLExtendMode; const AStops: TArray&lt;TBLGradientStop&gt;); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_4","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLConicGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Create_4","title":"<code>Create</code>","text":"<p><code>constructor Create(const AValues: TBLRadialGradientValues; const AExtendMode: TBLExtendMode; const AStops: TArray&lt;TBLGradientStop&gt;); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_5","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLRadialGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Create_5","title":"<code>Create</code>","text":"<p><code>constructor Create(const AValues: TBLLinearGradientValues; const AExtendMode: TBLExtendMode; const AStops: TArray&lt;TBLGradientStop&gt;); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_6","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLLinearGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Create_6","title":"<code>Create</code>","text":"<p><code>constructor Create(const AValues: TBLConicGradientValues; const AExtendMode: TBLExtendMode = TBLExtendMode.Pad); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_7","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLConicGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode = TBLExtendMode.Pad</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Create_7","title":"<code>Create</code>","text":"<p><code>constructor Create(const AValues: TBLRadialGradientValues; const AExtendMode: TBLExtendMode = TBLExtendMode.Pad); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_8","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLRadialGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode = TBLExtendMode.Pad</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Create_8","title":"<code>Create</code>","text":"<p><code>constructor Create(const AValues: TBLLinearGradientValues; const AExtendMode: TBLExtendMode = TBLExtendMode.Pad); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_9","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLLinearGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode = TBLExtendMode.Pad</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Create_9","title":"<code>Create</code>","text":"<p><code>constructor Create(const AKind: TBLGradientKind; const AValues: PDouble = nil); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_10","title":"Parameters","text":"<p><code>AKind</code>: <code>TBLGradientKind</code></p> <p><code>AValues</code>: <code>PDouble = nil</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Create_10","title":"<code>Create</code>","text":"<p><code>constructor Create(const AKind: TBLGradientKind; const AValues: TArray&lt;Double&gt;); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_11","title":"Parameters","text":"<p><code>AKind</code>: <code>TBLGradientKind</code></p> <p><code>AValues</code>: <code>TArray&lt;Double&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the gradient. </p> <p><code>destructor Finalize(var ADest: TBLGradient)</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_12","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default constructed gradient.</p> <p>A default constructed gradient has <code>TBLGradientKind.Linear</code> type, all values set to zero, and has no color stops. </p> <p><code>constructor Initialize(out ADest: TBLGradient)</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_13","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGradient/#Equal_0","title":"Equal(TBLGradient, TBLGradient)","text":"<p>Equality operator, performs the same operation as <code>ALeft.Equals(ARight)</code>. </p> <p><code>class operator Equal(const ALeft, ARight: TBLGradient): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_14","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLGradient</code></p> <p><code>ARight</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Equal_1","title":"Equal(TBLGradient, Pointer)","text":"<p>Used to compare against <code>nil</code>. </p> <p><code>class operator Equal(const ALeft: TBLGradient; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_15","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLGradient</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#NotEqual_0","title":"NotEqual(TBLGradient, TBLGradient)","text":"<p>Equality operator, performs the same operation as <code>not ALeft.Equals(ARight)</code>. </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLGradient): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_16","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLGradient</code></p> <p><code>ARight</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#NotEqual_1","title":"NotEqual(TBLGradient, Pointer)","text":"<p>Used to compare against <code>nil</code>. </p> <p><code>class operator NotEqual(const ALeft: TBLGradient; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_17","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLGradient</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGradient/#AddStop_0","title":"AddStop(Double, TAlphaColor)","text":"<p>Adds a color stop described as a <code>AColor</code> at the given <code>AOffset</code>. </p> <p><code>procedure AddStop(const AOffset: Double; const AColor: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_18","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>AColor</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#remarks","title":"Remarks","text":"<p>The offset value must be in <code>[0, 1]</code> range. </p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#AddStop_1","title":"AddStop(Double, TBLRgba64)","text":"<p>Adds a color stop described as a 64-bit color <code>ARgba64</code> at the given <code>AOffset</code>. </p> <p><code>procedure AddStop(const AOffset: Double; const ARgba64: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_19","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>ARgba64</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#remarks_1","title":"Remarks","text":"<p>The offset value must be in <code>[0, 1]</code> range. </p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#AddStop_2","title":"AddStop(Double, TBLRgba32)","text":"<p>Adds a color stop described as a 32-bit color <code>ARgba32</code> at the given <code>AOffset</code>. </p> <p><code>procedure AddStop(const AOffset: Double; const ARgba32: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_20","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>ARgba32</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#remarks_2","title":"Remarks","text":"<p>The offset value must be in <code>[0, 1]</code> range. </p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#ApplyTransform","title":"ApplyTransform(TBLMatrix2D)","text":"<p><code>procedure ApplyTransform(const ATransform: TBLMatrix2D); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_21","title":"Parameters","text":"<p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#AssignStops_0","title":"AssignStops(TBLArrayView&lt;TBLGradientStop&gt;)","text":"<p>Assigns colors stops of the gradient to <code>AStops</code>. </p> <p><code>procedure AssignStops(const AStops: TBLArrayView&lt;TBLGradientStop&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_22","title":"Parameters","text":"<p><code>AStops</code>: <code>TBLArrayView&lt;TBLGradientStop&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#AssignStops_1","title":"AssignStops(PBLGradientStop, NativeInt)","text":"<p>Assigns colors stops of the gradient to <code>AStops</code> of size <code>ACount</code>. </p> <p><code>procedure AssignStops(const AStops: PBLGradientStop; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_10","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_23","title":"Parameters","text":"<p><code>AStops</code>: <code>PBLGradientStop</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#AssignStops_2","title":"AssignStops(TArray&lt;TBLGradientStop&gt;)","text":"<p>Assigns colors stops of the gradient to <code>AStops</code>. </p> <p><code>procedure AssignStops(const AStops: TArray&lt;TBLGradientStop&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_11","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_24","title":"Parameters","text":"<p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Equals","title":"Equals(TBLGradient)","text":"<p>Tests whether the gradient equals <code>AOther</code>. </p> <p><code>function Equals(const AOther: TBLGradient): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_25","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#remarks_3","title":"Remarks","text":"<p>The equality check returns True if both gradients are the same value-wise. </p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#IndexOfStop","title":"IndexOfStop(Double)","text":"<p>Returns the index of a color stop in Stops array of the given <code>AOffset</code>. </p> <p><code>function IndexOfStop(const AOffset: Double): NativeInt; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_26","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#returns_5","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#remarks_4","title":"Remarks","text":"<p>If there is no such offset, <code>-1</code> is returned. </p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Make_0","title":"Make(TBLConicGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;, TBLMatrix2D)","text":"<p><code>procedure Make(const AValues: TBLConicGradientValues; const AExtendMode: TBLExtendMode; const AStops: TArray&lt;TBLGradientStop&gt;; const ATransform: TBLMatrix2D); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_27","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLConicGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Make_1","title":"Make(TBLRadialGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;, TBLMatrix2D)","text":"<p><code>procedure Make(const AValues: TBLRadialGradientValues; const AExtendMode: TBLExtendMode; const AStops: TArray&lt;TBLGradientStop&gt;; const ATransform: TBLMatrix2D); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_28","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLRadialGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Make_2","title":"Make(TBLLinearGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;, TBLMatrix2D)","text":"<p><code>procedure Make(const AValues: TBLLinearGradientValues; const AExtendMode: TBLExtendMode; const AStops: TArray&lt;TBLGradientStop&gt;; const ATransform: TBLMatrix2D); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_29","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLLinearGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Make_3","title":"Make(TBLConicGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;)","text":"<p><code>procedure Make(const AValues: TBLConicGradientValues; const AExtendMode: TBLExtendMode; const AStops: TArray&lt;TBLGradientStop&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_30","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLConicGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Make_4","title":"Make(TBLRadialGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;)","text":"<p><code>procedure Make(const AValues: TBLRadialGradientValues; const AExtendMode: TBLExtendMode; const AStops: TArray&lt;TBLGradientStop&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_31","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLRadialGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Make_5","title":"Make(TBLLinearGradientValues, TBLExtendMode, TArray&lt;TBLGradientStop&gt;)","text":"<p><code>procedure Make(const AValues: TBLLinearGradientValues; const AExtendMode: TBLExtendMode; const AStops: TArray&lt;TBLGradientStop&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_32","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLLinearGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>AStops</code>: <code>TArray&lt;TBLGradientStop&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Make_6","title":"Make(TBLConicGradientValues, TBLExtendMode)","text":"<p><code>procedure Make(const AValues: TBLConicGradientValues; const AExtendMode: TBLExtendMode = TBLExtendMode.Pad); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_33","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLConicGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode = TBLExtendMode.Pad</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Make_7","title":"Make(TBLRadialGradientValues, TBLExtendMode)","text":"<p><code>procedure Make(const AValues: TBLRadialGradientValues; const AExtendMode: TBLExtendMode = TBLExtendMode.Pad); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_34","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLRadialGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode = TBLExtendMode.Pad</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Make_8","title":"Make(TBLLinearGradientValues, TBLExtendMode)","text":"<p><code>procedure Make(const AValues: TBLLinearGradientValues; const AExtendMode: TBLExtendMode = TBLExtendMode.Pad); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_35","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLLinearGradientValues</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode = TBLExtendMode.Pad</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostRotate_0","title":"PostRotate(Double, TBLPointI)","text":"<p><code>procedure PostRotate(const AAngle: Double; const AOrigin: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_36","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostRotate_1","title":"PostRotate(Double, TBLPoint)","text":"<p><code>procedure PostRotate(const AAngle: Double; const AOrigin: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_37","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostRotate_2","title":"PostRotate(Double, Double, Double)","text":"<p><code>procedure PostRotate(const AAngle, AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_38","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostRotate_3","title":"PostRotate(Double)","text":"<p><code>procedure PostRotate(const AAngle: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_39","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostScale_0","title":"PostScale(TBLPointI)","text":"<p><code>procedure PostScale(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_40","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostScale_1","title":"PostScale(TBLPoint)","text":"<p><code>procedure PostScale(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_41","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostScale_2","title":"PostScale(Double, Double)","text":"<p><code>procedure PostScale(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_42","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostScale_3","title":"PostScale(Double)","text":"<p><code>procedure PostScale(const AXY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_43","title":"Parameters","text":"<p><code>AXY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostSkew_0","title":"PostSkew(TBLPoint)","text":"<p><code>procedure PostSkew(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_44","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostSkew_1","title":"PostSkew(Double, Double)","text":"<p><code>procedure PostSkew(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_45","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostTransform","title":"PostTransform(TBLMatrix2D)","text":"<p><code>procedure PostTransform(const ATransform: TBLMatrix2D); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_46","title":"Parameters","text":"<p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostTranslate_0","title":"PostTranslate(TBLPointI)","text":"<p><code>procedure PostTranslate(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_47","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostTranslate_1","title":"PostTranslate(TBLPoint)","text":"<p><code>procedure PostTranslate(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_48","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#PostTranslate_2","title":"PostTranslate(Double, Double)","text":"<p><code>procedure PostTranslate(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_49","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#RemoveStop","title":"RemoveStop(NativeInt)","text":"<p>Removes stop at the given <code>AIndex</code>. </p> <p><code>procedure RemoveStop(const AIndex: NativeInt); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_12","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_50","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#see-also_1","title":"See Also","text":"<ul> <li>IndexOfStop</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLGradient/#remarks_5","title":"Remarks","text":"<p>This method should be used together with <code>IndexOfStop</code>, which returns index to the stop array. </p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#RemoveStopByOffset","title":"RemoveStopByOffset(Double, Boolean)","text":"<p>Removes stop at the given <code>AOffset</code>, which should be in <code>[0, 1]</code> range.</p> <p>The <code>AAll</code> parameter specifies whether all stops at the given offset should be removed as there are cases in which two stops can occupy the same offset to create sharp transitions. If <code>AAll</code> is False and there is a sharp transition only the first stop would be removed. If <code>AAll</code> is True both stops will be removed. </p> <p><code>procedure RemoveStopByOffset(const AOffset: Double; const AAll: Boolean = True); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_13","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_51","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>AAll</code>: <code>Boolean = True</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#remarks_6","title":"Remarks","text":"<p>There are never 3 stops occupying the same <code>AOffset</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#RemoveStops","title":"RemoveStops(TBLRange)","text":"<p>Removes all stops in the given range, which describes indexes in the stop array. </p> <p><code>procedure RemoveStops(const ARange: TBLRange); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_14","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_52","title":"Parameters","text":"<p><code>ARange</code>: <code>TBLRange</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#RemoveStopsByOffset","title":"RemoveStopsByOffset(Double, Double)","text":"<p>Removes all stops in the given interval <code>[AOffsetMin, AOffsetMax]</code>, which specifies stop offsets, which are between [0, 1]. </p> <p><code>procedure RemoveStopsByOffset(const AOffsetMin, AOffsetMax: Double); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_15","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_53","title":"Parameters","text":"<p><code>AOffsetMin</code>: <code>Double</code></p> <p><code>AOffsetMax</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#ReplaceStop_0","title":"ReplaceStop(NativeInt, Double, TAlphaColor)","text":"<p>Replaces stop at the given <code>AIndex</code> with a new color stop described by <code>AOffset</code> and <code>AColor</code>.</p> <p>The operation leads to the same result as <code>RemoveStop(AIndex)</code> followed by <code>AddStop(AOffset, AColor)</code>. </p> <p><code>procedure ReplaceStop(const AIndex: NativeInt; const AOffset: Double; const AColor: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_16","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_54","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AOffset</code>: <code>Double</code></p> <p><code>AColor</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#see-also_2","title":"See Also","text":"<ul> <li>RemoveStop</li> <li>AddStop</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLGradient/#ReplaceStop_1","title":"ReplaceStop(NativeInt, Double, TBLRgba64)","text":"<p>Replaces stop at the given <code>AIndex</code> with a new color stop described by <code>AOffset</code> and <code>ARgba64</code>.</p> <p>The operation leads to the same result as <code>RemoveStop(AIndex)</code> followed by <code>AddStop(AOffset, ARgba64)</code>. </p> <p><code>procedure ReplaceStop(const AIndex: NativeInt; const AOffset: Double; const ARgba64: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_17","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_55","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AOffset</code>: <code>Double</code></p> <p><code>ARgba64</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#see-also_3","title":"See Also","text":"<ul> <li>RemoveStop</li> <li>AddStop</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLGradient/#ReplaceStop_2","title":"ReplaceStop(NativeInt, Double, TBLRgba32)","text":"<p>Replaces stop at the given <code>AIndex</code> with a new color stop described by <code>AOffset</code> and <code>ARgba32</code>.</p> <p>The operation leads to the same result as <code>RemoveStop(AIndex)</code> followed by <code>AddStop(AOffset, ARgba32)</code>. </p> <p><code>procedure ReplaceStop(const AIndex: NativeInt; const AOffset: Double; const ARgba32: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_18","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_56","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AOffset</code>: <code>Double</code></p> <p><code>ARgba32</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#see-also_4","title":"See Also","text":"<ul> <li>RemoveStop</li> <li>AddStop</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Reserve","title":"Reserve(NativeInt)","text":"<p>Reserves the capacity of gradient for at least <code>AMinCapacity</code> stops. </p> <p><code>procedure Reserve(const AMinCapacity: NativeInt); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_19","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_57","title":"Parameters","text":"<p><code>AMinCapacity</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Reset","title":"Reset","text":"<p>Resets the gradient to its construction state. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#ResetExtendMode","title":"ResetExtendMode","text":"<p>Resets the gradient extend mode to <code>TBLExtendMode.Pad</code>. </p> <p><code>procedure ResetExtendMode; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_20","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#see-also_5","title":"See Also","text":"<ul> <li>TBLExtendMode</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLGradient/#ResetStops","title":"ResetStops","text":"<p>Resets all stops of the gradient.</p> <p>After the operation the gradient will have no color stops. </p> <p><code>procedure ResetStops; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_21","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#ResetTransform","title":"ResetTransform","text":"<p><code>procedure ResetTransform; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Rotate_0","title":"Rotate(Double, TBLPointI)","text":"<p><code>procedure Rotate(const AAngle: Double; const AOrigin: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_58","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Rotate_1","title":"Rotate(Double, TBLPoint)","text":"<p><code>procedure Rotate(const AAngle: Double; const AOrigin: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_59","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Rotate_2","title":"Rotate(Double, Double, Double)","text":"<p><code>procedure Rotate(const AAngle, AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_60","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Rotate_3","title":"Rotate(Double)","text":"<p><code>procedure Rotate(const AAngle: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_61","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Scale_0","title":"Scale(TBLPointI)","text":"<p><code>procedure Scale(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_62","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Scale_1","title":"Scale(TBLPoint)","text":"<p><code>procedure Scale(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_63","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Scale_2","title":"Scale(Double, Double)","text":"<p><code>procedure Scale(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_64","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Scale_3","title":"Scale(Double)","text":"<p><code>procedure Scale(const AXY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_65","title":"Parameters","text":"<p><code>AXY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#SetValues_0","title":"SetValues(TBLConicGradientValues)","text":"<p><code>procedure SetValues(const AValues: TBLConicGradientValues); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_66","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLConicGradientValues</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#SetValues_1","title":"SetValues(TBLRadialGradientValues)","text":"<p><code>procedure SetValues(const AValues: TBLRadialGradientValues); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_67","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLRadialGradientValues</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#SetValues_2","title":"SetValues(TBLLinearGradientValues)","text":"<p><code>procedure SetValues(const AValues: TBLLinearGradientValues); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_68","title":"Parameters","text":"<p><code>AValues</code>: <code>TBLLinearGradientValues</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#SetValues_3","title":"SetValues(NativeInt, PDouble, NativeInt)","text":"<p><code>procedure SetValues(const AIndex: NativeInt; const AValues: PDouble; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_69","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AValues</code>: <code>PDouble</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#SetValues_4","title":"SetValues(NativeInt, TArray&lt;Double&gt;)","text":"<p><code>procedure SetValues(const AIndex: NativeInt; const AValues: TArray&lt;Double&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_70","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AValues</code>: <code>TArray&lt;Double&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Shrink","title":"Shrink","text":"<p>Shrinks the capacity of gradient stops to fit the current use. </p> <p><code>procedure Shrink; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#exceptions_22","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Skew_0","title":"Skew(TBLPoint)","text":"<p><code>procedure Skew(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_71","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Skew_1","title":"Skew(Double, Double)","text":"<p><code>procedure Skew(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_72","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#StopsView","title":"StopsView","text":"<p>Returns gradient stops and their count as <code>TBLArrayView&lt;tblgradientstop&gt;</code>. </p> <p><code>function StopsView: TBLArrayView&lt;TBLGradientStop&gt;; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#returns_6","title":"Returns","text":"<p><code>TBLArrayView&lt;TBLGradientStop&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Swap","title":"Swap(TBLGradient)","text":"<p>Swaps this gradient with <code>AOther</code>. </p> <p><code>procedure Swap(var AOther: TBLGradient); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_73","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Translate_0","title":"Translate(TBLPointI)","text":"<p><code>procedure Translate(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_74","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Translate_1","title":"Translate(TBLPoint)","text":"<p><code>procedure Translate(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_75","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#Translate_2","title":"Translate(Double, Double)","text":"<p><code>procedure Translate(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradient/#parameters_76","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/","title":"TBLGradientStop","text":"<p>Defines an <code>Offset</code> and <code>Rgba</code> color that is used by <code>TBLGradient</code> to define a linear transition between colors. </p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGradientStop = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#see-also","title":"See Also","text":"<ul> <li>TBLGradient</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#fields","title":"Fields","text":"Name Description Offset Rgba"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#constructors","title":"Constructors","text":"Name Description Create(Double, TAlphaColor) Create(Double, TBLRgba64) Create(Double, TBLRgba32)"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#methods","title":"Methods","text":"Name Description Create Equals Reset(Double, TAlphaColor) Reset(Double, TBLRgba64) Reset(Double, TBLRgba32) Reset"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGradientStop/#Offset","title":"Offset","text":"<p><code>var Offset: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#Rgba","title":"Rgba","text":"<p><code>var Rgba: TBLRgba64</code></p> <p>Type: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGradientStop/#Create_0","title":"<code>Create</code>","text":"<p><code>constructor Create(const AOffset: Double; const AColor: TAlphaColor); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#parameters","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>AColor</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#Create_1","title":"<code>Create</code>","text":"<p><code>constructor Create(const AOffset: Double; const ARgba64: TBLRgba64); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#parameters_1","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>ARgba64</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#Create_2","title":"<code>Create</code>","text":"<p><code>constructor Create(const AOffset: Double; const ARgba32: TBLRgba32); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#parameters_2","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>ARgba32</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGradientStop/#Equal","title":"Equal(TBLGradientStop, TBLGradientStop)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLGradientStop): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLGradientStop</code></p> <p><code>ARight</code>: <code>TBLGradientStop</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#NotEqual","title":"NotEqual(TBLGradientStop, TBLGradientStop)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLGradientStop): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLGradientStop</code></p> <p><code>ARight</code>: <code>TBLGradientStop</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLGradientStop/#Create","title":"Create","text":"<p><code>class function Create: TBLGradientStop; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#returns_2","title":"Returns","text":"<p><code>TBLGradientStop</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#Equals","title":"Equals(TBLGradientStop)","text":"<p><code>function Equals(const AOther: TBLGradientStop): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#parameters_5","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLGradientStop</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#Reset_0","title":"Reset(Double, TAlphaColor)","text":"<p><code>procedure Reset(const AOffset: Double; const AColor: TAlphaColor); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#parameters_6","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>AColor</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#Reset_1","title":"Reset(Double, TBLRgba64)","text":"<p><code>procedure Reset(const AOffset: Double; const ARgba64: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#parameters_7","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>ARgba64</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#Reset_2","title":"Reset(Double, TBLRgba32)","text":"<p><code>procedure Reset(const AOffset: Double; const ARgba32: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#parameters_8","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>ARgba32</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLGradientStop/#Reset_3","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/","title":"TBLImage","text":"<p>2D raster image.</p> <p>Raster image holds pixel data and additional information such as pixel format. The underlying image data can be shared between multiple instances of <code>TBLImage</code>, which can be used by multiple threads. Atomic reference counting is used to safely manage the internal reference count of the underlying image data.</p> <p>When an image is copied to another TBLImage instance its called a weak-copy as the underlying data is not copied, but the reference count is increased instead (atomically). </p>"},{"location":"Reference/Blend2D/classes/TBLImage/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLImage = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLImage/#properties","title":"Properties","text":"Name Description Depth Image depth (in bits). Format The image format. Height Image height (in pixels). IsEmpty Whether the image is empty (such image has no size and a pixel format is equal to <code>TBLFormat.None</code>. Size Image size (in pixels). Width Image width (in pixels)."},{"location":"Reference/Blend2D/classes/TBLImage/#constructors","title":"Constructors","text":"Name Description Assign Creates a weak copy of <code>ASrc</code> image by incrementing the reference count of the underlying representation. Create Creates a new image data of <code>[AWidth, AHeight]</code> size (specified in pixels) having the given pixel <code>AFormat</code>. Finalize Destroys the image data held by the instance. Initialize Creates a default constructed image, which is an empty image having"},{"location":"Reference/Blend2D/classes/TBLImage/#operators","title":"Operators","text":"Name Description Equal(TBLImage, TBLImage) Tests whether the <code>ALeft</code> image is equal with <code>ARight</code> image. See Equals for more details about image equality. Equal(TBLImage, Pointer) Used to compare against <code>nil</code>. NotEqual(TBLImage, TBLImage) Tests whether the <code>ALeft</code> image is not equal with <code>ARight</code> image. See Equals for more details about image equality. NotEqual(TBLImage, Pointer) Used to compare against <code>nil</code>."},{"location":"Reference/Blend2D/classes/TBLImage/#methods","title":"Methods","text":"Name Description AssignDeep Create a deep copy of the <code>AOther</code> image. AssignShallow Copy assignment replaces the underlying data of this image with <code>AOther</code>. Convert Converts the image to a different pixel <code>AFormat</code>. Equals Tests whether the image is equal to <code>AOther</code> image. GetData Returns immutable in <code>ADataOut</code>, which contains pixel pointer, stride, and other image properties like size and pixel format. Make Creates a new image of a specified 'AWidth<code>,</code>AHeight<code>, and</code>AFormat`. MakeFromData Creates a new image from external data passed in <code>APixelData</code>. MakeMutable Makes the image data mutable and returns them in <code>ADataOut</code>. ReadFromData(TBLArrayView&lt;Byte&gt;, TBLArray&lt;TBLImageCodec&gt;) Reads an image from an existing byte-view passed via <code>AView</code> by using image codecs passed via <code>ACodecs</code> parameter. ReadFromData(TBLArrayView&lt;Byte&gt;) Reads an image from an existing byte-view passed via <code>AView</code>. ReadFromData(TBytes, TBLArray&lt;TBLImageCodec&gt;) Reads an image from an existing byte-buffer passed via <code>AArray</code> by using image codecs passed via <code>ACodecs</code> parameter. ReadFromData(TBytes) Reads an image from an existing byte-buffer passed via <code>AArray</code>. ReadFromData(TBLArray&lt;Byte&gt;, TBLArray&lt;TBLImageCodec&gt;) Reads an image from an existing byte-buffer passed via <code>AArray</code> by using image codecs passed via <code>ACodecs</code> parameter. ReadFromData(TBLArray&lt;Byte&gt;) Reads an image from an existing byte-buffer passed via <code>AArray</code>. ReadFromData(Pointer, NativeInt, TBLArray&lt;TBLImageCodec&gt;) Reads an image from an existing byte-array starting at <code>AData</code> and having <code>ASize</code> bytes by using image codecs passed via <code>ACodecs</code> parameter. ReadFromData(Pointer, NativeInt) Reads an image from an existing byte-array starting at <code>AData</code> and having <code>ASize</code> bytes. ReadFromFile(String, TBLArray&lt;TBLImageCodec&gt;) Reads an image from a file specified by <code>AFilename</code> by using image codecs passed via <code>ACodecs</code> parameter. ReadFromFile(String) Reads an image from a file specified by <code>AFileName</code>. Reset Resets the image to a default constructed image. Scale Scales the <code>ASrc</code> image to the specified <code>ASize</code> by using <code>AFilter</code> and writes the scaled image to <code>ADst</code>. Swap Swaps the underlying data with the <code>AOther</code> image. WriteToData(TBLImageCodec) Encodes the image using the specified image <code>ACodec</code> and returns the encoded data. WriteToData(TBLArray&lt;Byte&gt;, TBLImageCodec) Writes an encoded image to a buffer <code>ADst</code> using the specified image <code>ACodec</code> to encode the image. WriteToFile(String, TBLImageCodec) Writes an encoded image to a file specified by <code>AFileName</code> using the specified image <code>ACodec</code> to encode the image. WriteToFile(String) Writes an encoded image to a file specified by <code>AFilename</code>."},{"location":"Reference/Blend2D/classes/TBLImage/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImage/#Depth","title":"Depth","text":"<p>Image depth (in bits). </p> <p><code>property Depth: Integer read GetDepth</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#Format","title":"Format","text":"<p>The image format. </p> <p><code>property Format: TBLFormat read GetFormat</code></p> <p>Type: <code>TBLFormat</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#see-also","title":"See Also","text":"<ul> <li>TBLFormat</li> <li>IsEmpty</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLImage/#remarks","title":"Remarks","text":"<p>When an image <code>IsEmpty</code>, the pixel format returned is always <code>TBLFormat.None</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLImage/#Height","title":"Height","text":"<p>Image height (in pixels). </p> <p><code>property Height: Integer read GetHeight</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#IsEmpty","title":"IsEmpty","text":"<p>Whether the image is empty (such image has no size and a pixel format is equal to <code>TBLFormat.None</code>. </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#see-also_1","title":"See Also","text":"<ul> <li>TBLFormat</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLImage/#Size","title":"Size","text":"<p>Image size (in pixels). </p> <p><code>property Size: TBLSizeI read GetSize</code></p> <p>Type: <code>TBLSizeI</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#Width","title":"Width","text":"<p>Image width (in pixels). </p> <p><code>property Width: Integer read GetWidth</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImage/#Assign","title":"<code>Assign</code>","text":"<p>Creates a weak copy of <code>ASrc</code> image by incrementing the reference count of the underlying representation. </p> <p><code>constructor Assign(var ADest: TBLImage; const ASrc: TBLImage); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLImage</code></p> <p><code>ASrc</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#Create","title":"<code>Create</code>","text":"<p>Creates a new image data of <code>[AWidth, AHeight]</code> size (specified in pixels) having the given pixel <code>AFormat</code>.</p> <p>To create a valid image, both <code>AWidth</code> and <code>AHeight</code> must be greater than zero and the pixel <code>AFormat</code> cannot be TBLFormat.None. </p> <p><code>constructor Create(const AWidth, AHeight: Integer; const AFormat: TBLFormat)</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_1","title":"Parameters","text":"<p><code>AWidth</code>: <code>Integer</code></p> <p><code>AHeight</code>: <code>Integer</code></p> <p><code>AFormat</code>: <code>TBLFormat</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the image data held by the instance.</p> <p>The pixel data held by the image will only be deallocated if the reference count of the underlying representation gets decremented to zero. </p> <p><code>destructor Finalize(var ADest: TBLImage)</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default constructed image, which is an empty image having </p> <p><code>constructor Initialize(out ADest: TBLImage)</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_3","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#see-also_2","title":"See Also","text":"<ul> <li>TBLFormat</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLImage/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImage/#Equal_0","title":"Equal(TBLImage, TBLImage)","text":"<p>Tests whether the <code>ALeft</code> image is equal with <code>ARight</code> image. See Equals for more details about image equality. </p> <p><code>class operator Equal(const ALeft, ARight: TBLImage): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImage</code></p> <p><code>ARight</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#Equal_1","title":"Equal(TBLImage, Pointer)","text":"<p>Used to compare against <code>nil</code>. </p> <p><code>class operator Equal(const ALeft: TBLImage; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImage</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#NotEqual_0","title":"NotEqual(TBLImage, TBLImage)","text":"<p>Tests whether the <code>ALeft</code> image is not equal with <code>ARight</code> image. See Equals for more details about image equality. </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLImage): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImage</code></p> <p><code>ARight</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#NotEqual_1","title":"NotEqual(TBLImage, Pointer)","text":"<p>Used to compare against <code>nil</code>. </p> <p><code>class operator NotEqual(const ALeft: TBLImage; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_7","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImage</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImage/#AssignDeep","title":"AssignDeep(TBLImage)","text":"<p>Create a deep copy of the <code>AOther</code> image. </p> <p><code>procedure AssignDeep(const AOther: TBLImage); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_8","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#AssignShallow","title":"AssignShallow(TBLImage)","text":"<p>Copy assignment replaces the underlying data of this image with <code>AOther</code>. </p> <p><code>procedure AssignShallow(const AOther: TBLImage); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_9","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#Convert","title":"Convert(TBLFormat)","text":"<p>Converts the image to a different pixel <code>AFormat</code>.</p> <p>This operation could be lossy if the given pixel <code>AFormat</code> has less channels than this image. </p> <p><code>procedure Convert(const AFormat: TBLFormat); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_10","title":"Parameters","text":"<p><code>AFormat</code>: <code>TBLFormat</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#see-also_3","title":"See Also","text":"<ul> <li>IsEmpty</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLImage/#remarks_1","title":"Remarks","text":"<p>If the image <code>IsEmpty</code> the image format would not be changed. It will stay <code>TBLFormat.None</code> and an error with code TBLResult.NotInitialized will be raised. </p>"},{"location":"Reference/Blend2D/classes/TBLImage/#Equals","title":"Equals(TBLImage)","text":"<p>Tests whether the image is equal to <code>AOther</code> image.</p> <p>Images are equal when the size, pixel format, and pixel data match. This means that this operation could be very expensive if the images are large. </p> <p><code>function Equals(const AOther: TBLImage): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_11","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#GetData","title":"GetData(TBLImageData)","text":"<p>Returns immutable in <code>ADataOut</code>, which contains pixel pointer, stride, and other image properties like size and pixel format. </p> <p><code>procedure GetData(out ADataOut: TBLImageData); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_12","title":"Parameters","text":"<p><code>ADataOut</code>: <code>TBLImageData</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#see-also_4","title":"See Also","text":"<ul> <li>TBLImageData</li> <li>MakeMutable</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLImage/#remarks_2","title":"Remarks","text":"<p>Although the data is filled in <code>TBLImageData</code>, which holds a <code>PixelData</code> pointer, the data is immutable. If you intend to modify the data, use <code>MakeMutable</code> method instead, which would copy the image data if it's shared with another <code>TBLImage</code> instance. </p>"},{"location":"Reference/Blend2D/classes/TBLImage/#Make","title":"Make(Integer, Integer, TBLFormat)","text":"<p>Creates a new image of a specified 'AWidth<code>,</code>AHeight<code>, and</code>AFormat`. </p> <p><code>procedure Make(const AWidth, AHeight: Integer; const AFormat: TBLFormat); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_13","title":"Parameters","text":"<p><code>AWidth</code>: <code>Integer</code></p> <p><code>AHeight</code>: <code>Integer</code></p> <p><code>AFormat</code>: <code>TBLFormat</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#remarks_3","title":"Remarks","text":"<p>If invalid arguments (invalid size or format) were passed to the method, an error with code <code>TBLResult.InvalidValue</code> will be returned and no data will be allocated. It's also important to notice that this method would not change anything if it fails (the previous image content would be kept as is in such case). </p>"},{"location":"Reference/Blend2D/classes/TBLImage/#MakeFromData","title":"MakeFromData(Integer, Integer, TBLFormat, Pointer, IntPtr, TBLDataAccessFlags, TBLDestroyExternalDataFunc, Pointer)","text":"<p>Creates a new image from external data passed in <code>APixelData</code>.</p> <p>Blend2D can use pixel-data allocated outside of Blend2D, which is useful for rendering into images that can be allocated by other libraries. The only thing that the user should pay extra attention to is the passed pixel <code>AFormat</code> and <code>AStride</code>.</p> <p>If the image data you are passing is read-only, pass <code>TBLDataAccessFlag.Read</code> in <code>AAccessFlags</code>, in that case Blend2D would never attempt to modify the passed data and would create a copy instead if such image gets modified.</p> <p>Additionally, if you would like to get notified about the destruction of the image (and thus Blend2D not holding the passed <code>APixelData</code> anymore, pass your own function in <code>ADestroyFunc</code> parameter with an optional <code>AUserData</code>). </p> <p><code>procedure MakeFromData(const AWidth, AHeight: Integer; const AFormat: TBLFormat; const APixelData: Pointer; const AStride: IntPtr; const AAccessFlags: TBLDataAccessFlags = TBLDataAccessFlags.RW; const ADestroyFunc: TBLDestroyExternalDataFunc = nil; const AUserData: Pointer = nil); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_14","title":"Parameters","text":"<p><code>AWidth</code>: <code>Integer</code></p> <p><code>AHeight</code>: <code>Integer</code></p> <p><code>AFormat</code>: <code>TBLFormat</code></p> <p><code>APixelData</code>: <code>Pointer</code></p> <p><code>AStride</code>: <code>IntPtr</code></p> <p><code>AAccessFlags</code>: <code>TBLDataAccessFlags = TBLDataAccessFlags.RW</code></p> <p><code>ADestroyFunc</code>: <code>TBLDestroyExternalDataFunc = nil</code></p> <p><code>AUserData</code>: <code>Pointer = nil</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#MakeMutable","title":"MakeMutable(TBLImageData)","text":"<p>Makes the image data mutable and returns them in <code>ADataOut</code>. </p> <p><code>procedure MakeMutable(out ADataOut: TBLImageData); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_15","title":"Parameters","text":"<p><code>ADataOut</code>: <code>TBLImageData</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#ReadFromData_0","title":"ReadFromData(TBLArrayView&lt;Byte&gt;, TBLArray&lt;TBLImageCodec&gt;)","text":"<p>Reads an image from an existing byte-view passed via <code>AView</code> by using image codecs passed via <code>ACodecs</code> parameter.</p> <p>Image reader will automatically detect the image format by checking whether it's supported by the passed image <code>ACodecs</code> - only codecs passed in will be considered. </p> <p><code>procedure ReadFromData(const AView: TBLArrayView&lt;Byte&gt;; const ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_10","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_16","title":"Parameters","text":"<p><code>AView</code>: <code>TBLArrayView&lt;Byte&gt;</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#ReadFromData_1","title":"ReadFromData(TBLArrayView&lt;Byte&gt;)","text":"<p>Reads an image from an existing byte-view passed via <code>AView</code>.</p> <p>Image reader will automatically detect the image format by checking whether it's supported by available image codecs, which can be retrieved by <code>TBLImageCodec.BuiltInCodecs</code>. </p> <p><code>procedure ReadFromData(const AView: TBLArrayView&lt;Byte&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_11","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_17","title":"Parameters","text":"<p><code>AView</code>: <code>TBLArrayView&lt;Byte&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#see-also_5","title":"See Also","text":"<ul> <li>TBLImageCodec.BuiltInCodecs</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLImage/#ReadFromData_2","title":"ReadFromData(TBytes, TBLArray&lt;TBLImageCodec&gt;)","text":"<p>Reads an image from an existing byte-buffer passed via <code>AArray</code> by using image codecs passed via <code>ACodecs</code> parameter.</p> <p>Image reader will automatically detect the image format by checking whether it's supported by the passed image <code>ACodecs</code> - only codecs passed in will be considered. </p> <p><code>procedure ReadFromData(const AArray: TBytes; const ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_12","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_18","title":"Parameters","text":"<p><code>AArray</code>: <code>TBytes</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#ReadFromData_3","title":"ReadFromData(TBytes)","text":"<p>Reads an image from an existing byte-buffer passed via <code>AArray</code>.</p> <p>Image reader will automatically detect the image format by checking whether it's supported by available image codecs, which can be retrieved by <code>TBLImageCodec.BuiltInCodecs</code>. </p> <p><code>procedure ReadFromData(const AArray: TBytes); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_13","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_19","title":"Parameters","text":"<p><code>AArray</code>: <code>TBytes</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#see-also_6","title":"See Also","text":"<ul> <li>TBLImageCodec.BuiltInCodecs</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLImage/#ReadFromData_4","title":"ReadFromData(TBLArray&lt;Byte&gt;, TBLArray&lt;TBLImageCodec&gt;)","text":"<p>Reads an image from an existing byte-buffer passed via <code>AArray</code> by using image codecs passed via <code>ACodecs</code> parameter.</p> <p>Image reader will automatically detect the image format by checking whether it's supported by the passed image <code>ACodecs</code> - only codecs passed in will be considered. </p> <p><code>procedure ReadFromData(const AArray, ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_14","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_20","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArray&lt;Byte&gt;</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#ReadFromData_5","title":"ReadFromData(TBLArray&lt;Byte&gt;)","text":"<p>Reads an image from an existing byte-buffer passed via <code>AArray</code>.</p> <p>Image reader will automatically detect the image format by checking whether it's supported by available image codecs, which can be retrieved by <code>TBLImageCodec.BuiltInCodecs</code>. </p> <p><code>procedure ReadFromData(const AArray: TBLArray&lt;Byte&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_15","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_21","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArray&lt;Byte&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#see-also_7","title":"See Also","text":"<ul> <li>TBLImageCodec.BuiltInCodecs</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLImage/#ReadFromData_6","title":"ReadFromData(Pointer, NativeInt, TBLArray&lt;TBLImageCodec&gt;)","text":"<p>Reads an image from an existing byte-array starting at <code>AData</code> and having <code>ASize</code> bytes by using image codecs passed via <code>ACodecs</code> parameter.</p> <p>Image reader will automatically detect the image format by checking whether it's supported by the passed image <code>ACodecs</code> - only codecs passed in will be considered. </p> <p><code>procedure ReadFromData(const AData: Pointer; const ASize: NativeInt; const ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_16","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_22","title":"Parameters","text":"<p><code>AData</code>: <code>Pointer</code></p> <p><code>ASize</code>: <code>NativeInt</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#ReadFromData_7","title":"ReadFromData(Pointer, NativeInt)","text":"<p>Reads an image from an existing byte-array starting at <code>AData</code> and having <code>ASize</code> bytes.</p> <p>Image reader will automatically detect the image format by checking whether it's supported by available image codecs, which can be retrieved by <code>TBLImageCodec.BuiltInCodecs</code>. </p> <p><code>procedure ReadFromData(const AData: Pointer; const ASize: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_17","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_23","title":"Parameters","text":"<p><code>AData</code>: <code>Pointer</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#see-also_8","title":"See Also","text":"<ul> <li>TBLImageCodec.BuiltInCodecs</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLImage/#ReadFromFile_0","title":"ReadFromFile(String, TBLArray&lt;TBLImageCodec&gt;)","text":"<p>Reads an image from a file specified by <code>AFilename</code> by using image codecs passed via <code>ACodecs</code> parameter.</p> <p>Image reader will automatically detect the image format by checking whether it's supported by the passed image <code>ACodecs</code> - only codecs passed in will be considered. </p> <p><code>procedure ReadFromFile(const AFilename: String; const ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_18","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_24","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#ReadFromFile_1","title":"ReadFromFile(String)","text":"<p>Reads an image from a file specified by <code>AFileName</code>.</p> <p>Image reader will automatically detect the image format by checking whether it's supported by available image codecs, which can be retrieved by <code>TBLImageCodec.BuiltInCodecs</code>. </p> <p><code>procedure ReadFromFile(const AFilename: String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_19","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_25","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#see-also_9","title":"See Also","text":"<ul> <li>TBLImageCodec.BuiltInCodecs</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLImage/#Reset","title":"Reset","text":"<p>Resets the image to a default constructed image.</p> <p>A default constructed image has zero size and a pixel format equal to <code>TBLFormat.None</code>. Such image is considered <code>IsEmpty</code> and holds no data that could be used by the rendering context or as a pattern. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_20","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#see-also_10","title":"See Also","text":"<ul> <li>TBLFormat</li> <li>IsEmpty</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLImage/#Scale","title":"Scale(TBLImage, TBLImage, TBLSizeI, TBLImageScaleFilter)","text":"<p>Scales the <code>ASrc</code> image to the specified <code>ASize</code> by using <code>AFilter</code> and writes the scaled image to <code>ADst</code>.</p> <p>If the destination image <code>ADst</code> doesn't match <code>ASize</code> and the source pixel format the underlying image data will be re-created. </p> <p><code>class procedure Scale(const ADst, ASrc: TBLImage; const ASize: TBLSizeI; const AFilter: TBLImageScaleFilter); inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_21","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_26","title":"Parameters","text":"<p><code>ADst</code>: <code>TBLImage</code></p> <p><code>ASrc</code>: <code>TBLImage</code></p> <p><code>ASize</code>: <code>TBLSizeI</code></p> <p><code>AFilter</code>: <code>TBLImageScaleFilter</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#Swap","title":"Swap(TBLImage)","text":"<p>Swaps the underlying data with the <code>AOther</code> image. </p> <p><code>procedure Swap(var AOther: TBLImage); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_27","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#WriteToData_0","title":"WriteToData(TBLImageCodec)","text":"<p>Encodes the image using the specified image <code>ACodec</code> and returns the encoded data. </p> <p><code>function WriteToData(const ACodec: TBLImageCodec): TBytes; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_22","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_28","title":"Parameters","text":"<p><code>ACodec</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#returns_5","title":"Returns","text":"<p><code>TBytes</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#WriteToData_1","title":"WriteToData(TBLArray&lt;Byte&gt;, TBLImageCodec)","text":"<p>Writes an encoded image to a buffer <code>ADst</code> using the specified image <code>ACodec</code> to encode the image. </p> <p><code>procedure WriteToData(const ADst: TBLArray&lt;Byte&gt;; const ACodec: TBLImageCodec); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_23","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_29","title":"Parameters","text":"<p><code>ADst</code>: <code>TBLArray&lt;Byte&gt;</code></p> <p><code>ACodec</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#WriteToFile_0","title":"WriteToFile(String, TBLImageCodec)","text":"<p>Writes an encoded image to a file specified by <code>AFileName</code> using the specified image <code>ACodec</code> to encode the image. </p> <p><code>procedure WriteToFile(const AFilename: String; const ACodec: TBLImageCodec); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_24","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_30","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p> <p><code>ACodec</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#WriteToFile_1","title":"WriteToFile(String)","text":"<p>Writes an encoded image to a file specified by <code>AFilename</code>.</p> <p>Image writer detects the image codec by inspecting the extension of a file passed via <code>AFilename</code>. </p> <p><code>procedure WriteToFile(const AFilename: String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImage/#exceptions_25","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImage/#parameters_31","title":"Parameters","text":"<p><code>AFilename</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/","title":"TBLImageCodec","text":"<p>Image codec.</p> <p>Provides a unified interface for inspecting image data and creating image decoders &amp; encoders. </p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLImageCodec = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#properties","title":"Properties","text":"Name Description BuiltInCodecs Built-in codecs, which are present in a global registry. Extensions A list of file extensions used to store image of this codec, separated by ' Features Image codec flags. IsValid Tests whether the image codec is not a built-in null instance. MimeType A mime-type associated with the image codec's format. Name Image codec name (i.e, \"PNG\", \"JPEG\", etc...). Vendor The image codec vendor (i.e. \"Blend2D\" for all built-in codecs)."},{"location":"Reference/Blend2D/classes/TBLImageCodec/#constructors","title":"Constructors","text":"Name Description Assign Creates a copy of the <code>AOther</code> image codec. Finalize Destroys the image codec and releases all resources allocated by it. Initialize Creates a new default-initialized image codec."},{"location":"Reference/Blend2D/classes/TBLImageCodec/#operators","title":"Operators","text":"Name Description Equal(TBLImageCodec, TBLImageCodec) Returns True if two image codecs are equal. Equal(TBLImageCodec, Pointer) Used to compare against <code>nil</code>. NotEqual(TBLImageCodec, TBLImageCodec) Returns True if two image codecs are not equal. NotEqual(TBLImageCodec, Pointer) Used to compare against <code>nil</code>."},{"location":"Reference/Blend2D/classes/TBLImageCodec/#methods","title":"Methods","text":"Name Description AddToBuiltIn Adds a codec to a global built-in codecs registry. CreateDecoder CreateEncoder Equals FindByData(TBytes, TBLArray&lt;TBLImageCodec&gt;) FindByData(TBytes) FindByData(TBLArray&lt;Byte&gt;, TBLArray&lt;TBLImageCodec&gt;) FindByData(TBLArray&lt;Byte&gt;) FindByData(TBLArrayView&lt;Byte&gt;, TBLArray&lt;TBLImageCodec&gt;) FindByData(TBLArrayView&lt;Byte&gt;) FindByData(Pointer, NativeInt, TBLArray&lt;TBLImageCodec&gt;) FindByData(Pointer, NativeInt) FindByExtension(TBLStringView, TBLArray&lt;TBLImageCodec&gt;) FindByExtension(TBLStringView) FindByExtension(String, TBLArray&lt;TBLImageCodec&gt;) FindByExtension(String) FindByName(TBLStringView, TBLArray&lt;TBLImageCodec&gt;) FindByName(TBLStringView) FindByName(String, TBLArray&lt;TBLImageCodec&gt;) FindByName(String) HasFeature Tests whether the image codec has the given feature. InspectData(Pointer, NativeInt) InspectData(TBLArrayView&lt;Byte&gt;) InspectData(TBytes) InspectData(TBLArray&lt;Byte&gt;) RemoveFromBuiltIn Removes a codec from a global built-in codecs registry. Reset Swap"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageCodec/#BuiltInCodecs","title":"BuiltInCodecs","text":"<p>Built-in codecs, which are present in a global registry. </p> <p><code>class property BuiltInCodecs: TBLArray&lt;TBLImageCodec&gt; read GetBuiltInCodecs</code></p> <p>Type: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#Extensions","title":"Extensions","text":"<p>A list of file extensions used to store image of this codec, separated by '|' character. </p> <p><code>property Extensions: TBLString read GetExtensions</code></p> <p>Type: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#Features","title":"Features","text":"<p>Image codec flags. </p> <p><code>property Features: TBLImageCodecFeatures read GetFeatures</code></p> <p>Type: <code>TBLImageCodecFeatures</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#IsValid","title":"IsValid","text":"<p>Tests whether the image codec is not a built-in null instance. </p> <p><code>property IsValid: Boolean read GetIsValid</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#MimeType","title":"MimeType","text":"<p>A mime-type associated with the image codec's format. </p> <p><code>property MimeType: TBLString read GetMimeType</code></p> <p>Type: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#Name","title":"Name","text":"<p>Image codec name (i.e, \"PNG\", \"JPEG\", etc...). </p> <p><code>property Name: TBLString read GetName</code></p> <p>Type: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#Vendor","title":"Vendor","text":"<p>The image codec vendor (i.e. \"Blend2D\" for all built-in codecs). </p> <p><code>property Vendor: TBLString read GetVendor</code></p> <p>Type: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageCodec/#Assign","title":"<code>Assign</code>","text":"<p>Creates a copy of the <code>AOther</code> image codec. </p> <p><code>constructor Assign(var ADest: TBLImageCodec; const ASrc: TBLImageCodec); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLImageCodec</code></p> <p><code>ASrc</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the image codec and releases all resources allocated by it. </p> <p><code>destructor Finalize(var ADest: TBLImageCodec)</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a new default-initialized image codec. </p> <p><code>constructor Initialize(out ADest: TBLImageCodec)</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageCodec/#Equal_0","title":"Equal(TBLImageCodec, TBLImageCodec)","text":"<p>Returns True if two image codecs are equal. </p> <p><code>class operator Equal(const ALeft, ARight: TBLImageCodec): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImageCodec</code></p> <p><code>ARight</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#Equal_1","title":"Equal(TBLImageCodec, Pointer)","text":"<p>Used to compare against <code>nil</code>. </p> <p><code>class operator Equal(const ALeft: TBLImageCodec; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImageCodec</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#NotEqual_0","title":"NotEqual(TBLImageCodec, TBLImageCodec)","text":"<p>Returns True if two image codecs are not equal. </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLImageCodec): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImageCodec</code></p> <p><code>ARight</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#NotEqual_1","title":"NotEqual(TBLImageCodec, Pointer)","text":"<p>Used to compare against <code>nil</code>. </p> <p><code>class operator NotEqual(const ALeft: TBLImageCodec; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImageCodec</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageCodec/#AddToBuiltIn","title":"AddToBuiltIn(TBLImageCodec)","text":"<p>Adds a codec to a global built-in codecs registry. </p> <p><code>class procedure AddToBuiltIn(const ACodec: TBLImageCodec); inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_7","title":"Parameters","text":"<p><code>ACodec</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#CreateDecoder","title":"CreateDecoder","text":"<p><code>function CreateDecoder: TBLImageDecoder; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#returns_4","title":"Returns","text":"<p><code>TBLImageDecoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#CreateEncoder","title":"CreateEncoder","text":"<p><code>function CreateEncoder: TBLImageEncoder; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#returns_5","title":"Returns","text":"<p><code>TBLImageEncoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#Equals","title":"Equals(TBLImageCodec)","text":"<p><code>function Equals(const AOther: TBLImageCodec): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_8","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#returns_6","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByData_0","title":"FindByData(TBytes, TBLArray&lt;TBLImageCodec&gt;)","text":"<p><code>procedure FindByData(const ABuffer: TBytes; const ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_9","title":"Parameters","text":"<p><code>ABuffer</code>: <code>TBytes</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByData_1","title":"FindByData(TBytes)","text":"<p><code>procedure FindByData(const ABuffer: TBytes); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_10","title":"Parameters","text":"<p><code>ABuffer</code>: <code>TBytes</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByData_2","title":"FindByData(TBLArray&lt;Byte&gt;, TBLArray&lt;TBLImageCodec&gt;)","text":"<p><code>procedure FindByData(const ABuffer, ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_11","title":"Parameters","text":"<p><code>ABuffer</code>: <code>TBLArray&lt;Byte&gt;</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByData_3","title":"FindByData(TBLArray&lt;Byte&gt;)","text":"<p><code>procedure FindByData(const ABuffer: TBLArray&lt;Byte&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_12","title":"Parameters","text":"<p><code>ABuffer</code>: <code>TBLArray&lt;Byte&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByData_4","title":"FindByData(TBLArrayView&lt;Byte&gt;, TBLArray&lt;TBLImageCodec&gt;)","text":"<p><code>procedure FindByData(const AView: TBLArrayView&lt;Byte&gt;; const ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_13","title":"Parameters","text":"<p><code>AView</code>: <code>TBLArrayView&lt;Byte&gt;</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByData_5","title":"FindByData(TBLArrayView&lt;Byte&gt;)","text":"<p><code>procedure FindByData(const AView: TBLArrayView&lt;Byte&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_14","title":"Parameters","text":"<p><code>AView</code>: <code>TBLArrayView&lt;Byte&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByData_6","title":"FindByData(Pointer, NativeInt, TBLArray&lt;TBLImageCodec&gt;)","text":"<p><code>procedure FindByData(const AData: Pointer; const ASize: NativeInt; const ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_15","title":"Parameters","text":"<p><code>AData</code>: <code>Pointer</code></p> <p><code>ASize</code>: <code>NativeInt</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByData_7","title":"FindByData(Pointer, NativeInt)","text":"<p><code>procedure FindByData(const AData: Pointer; const ASize: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_16","title":"Parameters","text":"<p><code>AData</code>: <code>Pointer</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByExtension_0","title":"FindByExtension(TBLStringView, TBLArray&lt;TBLImageCodec&gt;)","text":"<p><code>procedure FindByExtension(const AExt: TBLStringView; const ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_17","title":"Parameters","text":"<p><code>AExt</code>: <code>TBLStringView</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByExtension_1","title":"FindByExtension(TBLStringView)","text":"<p><code>procedure FindByExtension(const AExt: TBLStringView); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_18","title":"Parameters","text":"<p><code>AExt</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByExtension_2","title":"FindByExtension(String, TBLArray&lt;TBLImageCodec&gt;)","text":"<p><code>procedure FindByExtension(const AExt: String; const ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_19","title":"Parameters","text":"<p><code>AExt</code>: <code>String</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByExtension_3","title":"FindByExtension(String)","text":"<p><code>procedure FindByExtension(const AExt: String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_20","title":"Parameters","text":"<p><code>AExt</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByName_0","title":"FindByName(TBLStringView, TBLArray&lt;TBLImageCodec&gt;)","text":"<p><code>procedure FindByName(const AName: TBLStringView; const ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_21","title":"Parameters","text":"<p><code>AName</code>: <code>TBLStringView</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByName_1","title":"FindByName(TBLStringView)","text":"<p><code>procedure FindByName(const AName: TBLStringView); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_22","title":"Parameters","text":"<p><code>AName</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByName_2","title":"FindByName(String, TBLArray&lt;TBLImageCodec&gt;)","text":"<p><code>procedure FindByName(const AName: String; const ACodecs: TBLArray&lt;TBLImageCodec&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_23","title":"Parameters","text":"<p><code>AName</code>: <code>String</code></p> <p><code>ACodecs</code>: <code>TBLArray&lt;TBLImageCodec&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#FindByName_3","title":"FindByName(String)","text":"<p><code>procedure FindByName(const AName: String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_24","title":"Parameters","text":"<p><code>AName</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#HasFeature","title":"HasFeature(TBLImageCodecFeature)","text":"<p>Tests whether the image codec has the given feature. </p> <p><code>function HasFeature(const AFeature: TBLImageCodecFeature): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_25","title":"Parameters","text":"<p><code>AFeature</code>: <code>TBLImageCodecFeature</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#returns_7","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#InspectData_0","title":"InspectData(Pointer, NativeInt)","text":"<p><code>function InspectData(const AData: Pointer; const ASize: NativeInt): Cardinal; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_26","title":"Parameters","text":"<p><code>AData</code>: <code>Pointer</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#returns_8","title":"Returns","text":"<p><code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#InspectData_1","title":"InspectData(TBLArrayView&lt;Byte&gt;)","text":"<p><code>function InspectData(const AView: TBLArrayView&lt;Byte&gt;): Cardinal; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_27","title":"Parameters","text":"<p><code>AView</code>: <code>TBLArrayView&lt;Byte&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#returns_9","title":"Returns","text":"<p><code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#InspectData_2","title":"InspectData(TBytes)","text":"<p><code>function InspectData(const ABuffer: TBytes): Cardinal; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_28","title":"Parameters","text":"<p><code>ABuffer</code>: <code>TBytes</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#returns_10","title":"Returns","text":"<p><code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#InspectData_3","title":"InspectData(TBLArray&lt;Byte&gt;)","text":"<p><code>function InspectData(const ABuffer: TBLArray&lt;Byte&gt;): Cardinal; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_29","title":"Parameters","text":"<p><code>ABuffer</code>: <code>TBLArray&lt;Byte&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#returns_11","title":"Returns","text":"<p><code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#RemoveFromBuiltIn","title":"RemoveFromBuiltIn(TBLImageCodec)","text":"<p>Removes a codec from a global built-in codecs registry. </p> <p><code>class procedure RemoveFromBuiltIn(const ACodec: TBLImageCodec); inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_30","title":"Parameters","text":"<p><code>ACodec</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#Swap","title":"Swap(TBLImageCodec)","text":"<p><code>procedure Swap(var AOther: TBLImageCodec); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageCodec/#parameters_31","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageData/","title":"TBLImageData","text":"<p>Data that describes a raster image. Used by <code>TBLImage</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLImageData/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLImageData = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLImageData/#see-also","title":"See Also","text":"<ul> <li>TBLImage</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLImageData/#fields","title":"Fields","text":"Name Description Flags Format Pixel format. PixelData Pixel data, starting at the top left corner of the image. Size Size of the image. Stride Stride (in bytes) of image data (positive when image data starts at top-left, negative when it starts at bottom-left)."},{"location":"Reference/Blend2D/classes/TBLImageData/#methods","title":"Methods","text":"Name Description Reset Resets the image data to represent an empty image (all members set to zeros)."},{"location":"Reference/Blend2D/classes/TBLImageData/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageData/#Flags","title":"Flags","text":"<p><code>var Flags: Cardinal</code></p> <p>Type: <code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageData/#Format","title":"Format","text":"<p>Pixel format. </p> <p><code>var Format: TBLFormat</code></p> <p>Type: <code>TBLFormat</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageData/#PixelData","title":"PixelData","text":"<p>Pixel data, starting at the top left corner of the image. </p> <p><code>var PixelData: Pointer</code></p> <p>Type: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageData/#remarks","title":"Remarks","text":"<p>If the stride is negative the image data would start at the bottom. </p>"},{"location":"Reference/Blend2D/classes/TBLImageData/#Size","title":"Size","text":"<p>Size of the image. </p> <p><code>var Size: TBLSizeI</code></p> <p>Type: <code>TBLSizeI</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageData/#Stride","title":"Stride","text":"<p>Stride (in bytes) of image data (positive when image data starts at top-left, negative when it starts at bottom-left). </p> <p><code>var Stride: IntPtr</code></p> <p>Type: <code>IntPtr</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageData/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageData/#Reset","title":"Reset","text":"<p>Resets the image data to represent an empty image (all members set to zeros). </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/","title":"TBLImageDecoder","text":"<p>Image decoder. </p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLImageDecoder = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#properties","title":"Properties","text":"Name Description BufferIndex The position in source buffer. Codec FrameIndex The current frame index (to be decoded). IsValid Tests whether the image decoder is not a built-in null instance. LastResult The last decoding result."},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#constructors","title":"Constructors","text":"Name Description Assign Creates a copy of the <code>AOther</code> image decoder. Finalize Destroys the image decoder and releases all resources allocated by it. Initialize Creates a new default-initialized image decoder."},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#operators","title":"Operators","text":"Name Description Equal(TBLImageDecoder, TBLImageDecoder) Returns True if two image decoders are equal. Equal(TBLImageDecoder, Pointer) Used to compare against <code>nil</code>. NotEqual(TBLImageDecoder, TBLImageDecoder) Returns True if two image decoders are not equal. NotEqual(TBLImageDecoder, Pointer) Used to compare against <code>nil</code>."},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#methods","title":"Methods","text":"Name Description Equals ReadFrame(TBLImage, TBLArray&lt;Byte&gt;) ReadFrame(TBLImage, TBytes) ReadFrame(TBLImage, TBLArrayView&lt;Byte&gt;) ReadFrame(TBLImage, Pointer, NativeInt) ReadInfo(TBLImageInfo, Pointer, NativeInt) ReadInfo(TBLImageInfo, TBLArrayView&lt;Byte&gt;) ReadInfo(TBLImageInfo, TBytes) ReadInfo(TBLImageInfo, TBLArray&lt;Byte&gt;) Reset Restart Swap"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#BufferIndex","title":"BufferIndex","text":"<p>The position in source buffer. </p> <p><code>property BufferIndex: NativeInt read GetBufferIndex</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#Codec","title":"Codec","text":"<p><code>property Codec: TBLImageCodec read GetCodec</code></p> <p>Type: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#FrameIndex","title":"FrameIndex","text":"<p>The current frame index (to be decoded). </p> <p><code>property FrameIndex: Int64 read GetFrameIndex</code></p> <p>Type: <code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#IsValid","title":"IsValid","text":"<p>Tests whether the image decoder is not a built-in null instance. </p> <p><code>property IsValid: Boolean read GetIsValid</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#LastResult","title":"LastResult","text":"<p>The last decoding result. </p> <p><code>property LastResult: TBLResult read GetLastResult</code></p> <p>Type: <code>TBLResult</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#Assign","title":"<code>Assign</code>","text":"<p>Creates a copy of the <code>AOther</code> image decoder. </p> <p><code>constructor Assign(var ADest: TBLImageDecoder; const ASrc: TBLImageDecoder); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLImageDecoder</code></p> <p><code>ASrc</code>: <code>TBLImageDecoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the image decoder and releases all resources allocated by it. </p> <p><code>destructor Finalize(var ADest: TBLImageDecoder)</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLImageDecoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a new default-initialized image decoder. </p> <p><code>constructor Initialize(out ADest: TBLImageDecoder)</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLImageDecoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#Equal_0","title":"Equal(TBLImageDecoder, TBLImageDecoder)","text":"<p>Returns True if two image decoders are equal. </p> <p><code>class operator Equal(const ALeft, ARight: TBLImageDecoder): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImageDecoder</code></p> <p><code>ARight</code>: <code>TBLImageDecoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#Equal_1","title":"Equal(TBLImageDecoder, Pointer)","text":"<p>Used to compare against <code>nil</code>. </p> <p><code>class operator Equal(const ALeft: TBLImageDecoder; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImageDecoder</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#NotEqual_0","title":"NotEqual(TBLImageDecoder, TBLImageDecoder)","text":"<p>Returns True if two image decoders are not equal. </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLImageDecoder): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImageDecoder</code></p> <p><code>ARight</code>: <code>TBLImageDecoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#NotEqual_1","title":"NotEqual(TBLImageDecoder, Pointer)","text":"<p>Used to compare against <code>nil</code>. </p> <p><code>class operator NotEqual(const ALeft: TBLImageDecoder; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImageDecoder</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#Equals","title":"Equals(TBLImageDecoder)","text":"<p><code>function Equals(const AOther: TBLImageDecoder): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_7","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImageDecoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#ReadFrame_0","title":"ReadFrame(TBLImage, TBLArray&lt;Byte&gt;)","text":"<p><code>procedure ReadFrame(out ADst: TBLImage; const ABuffer: TBLArray&lt;Byte&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_8","title":"Parameters","text":"<p><code>ADst</code>: <code>TBLImage</code></p> <p><code>ABuffer</code>: <code>TBLArray&lt;Byte&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#ReadFrame_1","title":"ReadFrame(TBLImage, TBytes)","text":"<p><code>procedure ReadFrame(out ADst: TBLImage; const ABuffer: TBytes); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_9","title":"Parameters","text":"<p><code>ADst</code>: <code>TBLImage</code></p> <p><code>ABuffer</code>: <code>TBytes</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#ReadFrame_2","title":"ReadFrame(TBLImage, TBLArrayView&lt;Byte&gt;)","text":"<p><code>procedure ReadFrame(out ADst: TBLImage; const AView: TBLArrayView&lt;Byte&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_10","title":"Parameters","text":"<p><code>ADst</code>: <code>TBLImage</code></p> <p><code>AView</code>: <code>TBLArrayView&lt;Byte&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#ReadFrame_3","title":"ReadFrame(TBLImage, Pointer, NativeInt)","text":"<p><code>procedure ReadFrame(out ADst: TBLImage; const AData: Pointer; const ASize: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_11","title":"Parameters","text":"<p><code>ADst</code>: <code>TBLImage</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#ReadInfo_0","title":"ReadInfo(TBLImageInfo, Pointer, NativeInt)","text":"<p><code>procedure ReadInfo(out ADst: TBLImageInfo; const AData: Pointer; const ASize: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_12","title":"Parameters","text":"<p><code>ADst</code>: <code>TBLImageInfo</code></p> <p><code>AData</code>: <code>Pointer</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#ReadInfo_1","title":"ReadInfo(TBLImageInfo, TBLArrayView&lt;Byte&gt;)","text":"<p><code>procedure ReadInfo(out ADst: TBLImageInfo; const AView: TBLArrayView&lt;Byte&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_13","title":"Parameters","text":"<p><code>ADst</code>: <code>TBLImageInfo</code></p> <p><code>AView</code>: <code>TBLArrayView&lt;Byte&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#ReadInfo_2","title":"ReadInfo(TBLImageInfo, TBytes)","text":"<p><code>procedure ReadInfo(out ADst: TBLImageInfo; const ABuffer: TBytes); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_14","title":"Parameters","text":"<p><code>ADst</code>: <code>TBLImageInfo</code></p> <p><code>ABuffer</code>: <code>TBytes</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#ReadInfo_3","title":"ReadInfo(TBLImageInfo, TBLArray&lt;Byte&gt;)","text":"<p><code>procedure ReadInfo(out ADst: TBLImageInfo; const ABuffer: TBLArray&lt;Byte&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_15","title":"Parameters","text":"<p><code>ADst</code>: <code>TBLImageInfo</code></p> <p><code>ABuffer</code>: <code>TBLArray&lt;Byte&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#Restart","title":"Restart","text":"<p><code>procedure Restart; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#Swap","title":"Swap(TBLImageDecoder)","text":"<p><code>procedure Swap(var AOther: TBLImageDecoder); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageDecoder/#parameters_16","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImageDecoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/","title":"TBLImageEncoder","text":"<p>Image encoder. </p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLImageEncoder = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#properties","title":"Properties","text":"Name Description BufferIndex The position in destination buffer. Codec FrameIndex The current frame index (yet to be written). IsValid Tests whether the image encoder is not a built-in null instance. LastResult The last encoding result."},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#constructors","title":"Constructors","text":"Name Description Assign Creates a copy of the <code>AOther</code> image encoder. Finalize Destroys the image encoder and releases all resources allocated by it. Initialize Creates a new default-initialized image encoder."},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#operators","title":"Operators","text":"Name Description Equal(TBLImageEncoder, TBLImageEncoder) Returns True if two image encoders are equal. Equal(TBLImageEncoder, Pointer) Used to compare against <code>nil</code>. NotEqual(TBLImageEncoder, TBLImageEncoder) Returns True if two image encoders are not equal. NotEqual(TBLImageEncoder, Pointer) Used to compare against <code>nil</code>."},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#methods","title":"Methods","text":"Name Description Equals Reset Restart Swap WriteFrame(TBLArray&lt;Byte&gt;, TBLImage) Encodes the given <code>AImage</code> and writes the encoded data to the destination buffer <code>ADst</code>. WriteFrame(TBLImage) Encodes the given <code>AImage</code> and returns the encoded data."},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#BufferIndex","title":"BufferIndex","text":"<p>The position in destination buffer. </p> <p><code>property BufferIndex: NativeInt read GetBufferIndex</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#Codec","title":"Codec","text":"<p><code>property Codec: TBLImageCodec read GetCodec</code></p> <p>Type: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#FrameIndex","title":"FrameIndex","text":"<p>The current frame index (yet to be written). </p> <p><code>property FrameIndex: Int64 read GetFrameIndex</code></p> <p>Type: <code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#IsValid","title":"IsValid","text":"<p>Tests whether the image encoder is not a built-in null instance. </p> <p><code>property IsValid: Boolean read GetIsValid</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#LastResult","title":"LastResult","text":"<p>The last encoding result. </p> <p><code>property LastResult: TBLResult read GetLastResult</code></p> <p>Type: <code>TBLResult</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#Assign","title":"<code>Assign</code>","text":"<p>Creates a copy of the <code>AOther</code> image encoder. </p> <p><code>constructor Assign(var ADest: TBLImageEncoder; const ASrc: TBLImageEncoder); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLImageEncoder</code></p> <p><code>ASrc</code>: <code>TBLImageEncoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the image encoder and releases all resources allocated by it. </p> <p><code>destructor Finalize(var ADest: TBLImageEncoder)</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLImageEncoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a new default-initialized image encoder. </p> <p><code>constructor Initialize(out ADest: TBLImageEncoder)</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLImageEncoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#Equal_0","title":"Equal(TBLImageEncoder, TBLImageEncoder)","text":"<p>Returns True if two image encoders are equal. </p> <p><code>class operator Equal(const ALeft, ARight: TBLImageEncoder): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImageEncoder</code></p> <p><code>ARight</code>: <code>TBLImageEncoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#Equal_1","title":"Equal(TBLImageEncoder, Pointer)","text":"<p>Used to compare against <code>nil</code>. </p> <p><code>class operator Equal(const ALeft: TBLImageEncoder; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImageEncoder</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#NotEqual_0","title":"NotEqual(TBLImageEncoder, TBLImageEncoder)","text":"<p>Returns True if two image encoders are not equal. </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLImageEncoder): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImageEncoder</code></p> <p><code>ARight</code>: <code>TBLImageEncoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#NotEqual_1","title":"NotEqual(TBLImageEncoder, Pointer)","text":"<p>Used to compare against <code>nil</code>. </p> <p><code>class operator NotEqual(const ALeft: TBLImageEncoder; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLImageEncoder</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#Equals","title":"Equals(TBLImageEncoder)","text":"<p><code>function Equals(const AOther: TBLImageEncoder): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#parameters_7","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImageEncoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#Restart","title":"Restart","text":"<p><code>procedure Restart; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#Swap","title":"Swap(TBLImageEncoder)","text":"<p><code>procedure Swap(var AOther: TBLImageEncoder); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#parameters_8","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImageEncoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#WriteFrame_0","title":"WriteFrame(TBLArray&lt;Byte&gt;, TBLImage)","text":"<p>Encodes the given <code>AImage</code> and writes the encoded data to the destination buffer <code>ADst</code>. </p> <p><code>procedure WriteFrame(const ADst: TBLArray&lt;Byte&gt;; const AImage: TBLImage); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#parameters_9","title":"Parameters","text":"<p><code>ADst</code>: <code>TBLArray&lt;Byte&gt;</code></p> <p><code>AImage</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#WriteFrame_1","title":"WriteFrame(TBLImage)","text":"<p>Encodes the given <code>AImage</code> and returns the encoded data. </p> <p><code>function WriteFrame(const AImage: TBLImage): TBytes; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#parameters_10","title":"Parameters","text":"<p><code>AImage</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageEncoder/#returns_5","title":"Returns","text":"<p><code>TBytes</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageInfo/","title":"TBLImageInfo","text":"<p>Image information provided by image codecs. </p>"},{"location":"Reference/Blend2D/classes/TBLImageInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLImageInfo = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLImageInfo/#properties","title":"Properties","text":"Name Description Compression Image compression (as understood by codec). Density Pixel density per one meter, can contain fractions. Depth Image depth. Flags Image flags. Format Image format (as understood by codec). FrameCount Number of frames (0 = unknown/unspecified). PlaneCount Number of planes. RepeatCount Number of animation repeats (0 = infinite). Size Image size."},{"location":"Reference/Blend2D/classes/TBLImageInfo/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLImageInfo/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageInfo/#Compression","title":"Compression","text":"<p>Image compression (as understood by codec). </p> <p><code>property Compression: String read GetCompression</code></p> <p>Type: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageInfo/#Density","title":"Density","text":"<p>Pixel density per one meter, can contain fractions. </p> <p><code>property Density: TBLSize read FDensity</code></p> <p>Type: <code>TBLSize</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageInfo/#Depth","title":"Depth","text":"<p>Image depth. </p> <p><code>property Depth: Smallint read FDepth</code></p> <p>Type: <code>Smallint</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageInfo/#Flags","title":"Flags","text":"<p>Image flags. </p> <p><code>property Flags: TBLImageInfoFlags read GetFlags</code></p> <p>Type: <code>TBLImageInfoFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageInfo/#Format","title":"Format","text":"<p>Image format (as understood by codec). </p> <p><code>property Format: String read GetFormat</code></p> <p>Type: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageInfo/#FrameCount","title":"FrameCount","text":"<p>Number of frames (0 = unknown/unspecified). </p> <p><code>property FrameCount: Int64 read FFrameCount</code></p> <p>Type: <code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageInfo/#PlaneCount","title":"PlaneCount","text":"<p>Number of planes. </p> <p><code>property PlaneCount: Smallint read FPlaneCount</code></p> <p>Type: <code>Smallint</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageInfo/#RepeatCount","title":"RepeatCount","text":"<p>Number of animation repeats (0 = infinite). </p> <p><code>property RepeatCount: Integer read FRepeatCount</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageInfo/#Size","title":"Size","text":"<p>Image size. </p> <p><code>property Size: TBLSizeI read FSize</code></p> <p>Type: <code>TBLSizeI</code></p>"},{"location":"Reference/Blend2D/classes/TBLImageInfo/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLImageInfo/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/","title":"TBLLine","text":"<p>Line specified as [X0, Y0, X1, Y1] using <code>Double</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLLine/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLLine = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLLine/#fields","title":"Fields","text":"Name Description X0 X1 Y0 Y1"},{"location":"Reference/Blend2D/classes/TBLLine/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLLine/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLLine/#methods","title":"Methods","text":"Name Description Equals Reset(TBLLine) Reset(TBLPoint, TBLPoint) Reset(Double, Double, Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLLine/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLLine/#X0","title":"X0","text":"<p><code>var X0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#X1","title":"X1","text":"<p><code>var X1: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#Y0","title":"Y0","text":"<p><code>var Y0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#Y1","title":"Y1","text":"<p><code>var Y1: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLLine/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX0, AY0, AX1, AY1: Double)</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLLine/#Equal","title":"Equal(TBLLine, TBLLine)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLLine): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLLine</code></p> <p><code>ARight</code>: <code>TBLLine</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#NotEqual","title":"NotEqual(TBLLine, TBLLine)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLLine): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLLine</code></p> <p><code>ARight</code>: <code>TBLLine</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLLine/#Equals","title":"Equals(TBLLine)","text":"<p><code>function Equals(const AOther: TBLLine): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#parameters_3","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLLine</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#Reset_0","title":"Reset(TBLLine)","text":"<p><code>procedure Reset(const AOther: TBLLine); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#parameters_4","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLLine</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#Reset_1","title":"Reset(TBLPoint, TBLPoint)","text":"<p><code>procedure Reset(const AP0, AP1: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#parameters_5","title":"Parameters","text":"<p><code>AP0</code>: <code>TBLPoint</code></p> <p><code>AP1</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#Reset_2","title":"Reset(Double, Double, Double, Double)","text":"<p><code>procedure Reset(const AX0, AY0, AX1, AY1: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#parameters_6","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLLine/#Reset_3","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/","title":"TBLLinearGradientValues","text":"<p>Linear gradient values packed into a structure. </p>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLLinearGradientValues = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#fields","title":"Fields","text":"Name Description X0 X1 Y0 Y1"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#methods","title":"Methods","text":"Name Description Create Reset(Double, Double, Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#X0","title":"X0","text":"<p><code>var X0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#X1","title":"X1","text":"<p><code>var X1: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#Y0","title":"Y0","text":"<p><code>var Y0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#Y1","title":"Y1","text":"<p><code>var Y1: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX0, AY0, AX1, AY1: Double); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#Create","title":"Create","text":"<p><code>class function Create: TBLLinearGradientValues; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#returns","title":"Returns","text":"<p><code>TBLLinearGradientValues</code></p>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#Reset_0","title":"Reset(Double, Double, Double, Double)","text":"<p><code>procedure Reset(const AX0, AY0, AX1, AY1: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#parameters_1","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLLinearGradientValues/#Reset_1","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/","title":"TBLMatrix2D","text":"<p>2D matrix represents an affine transformation matrix that can be used to transform geometry and images. </p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLMatrix2D = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#fields","title":"Fields","text":"Name Description M"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#properties","title":"Properties","text":"Name Description Kind The matrix kind. M00 Element [0, 0]. Contains X scaling. M01 Element [0, 1]. Contains rotation and skewing. M10 Element [1, 0]. Contains rotation and skewing. M11 Element [1, 1]. Contains Y scaling. M20 Element [2, 0]. Contains X translation. M21 Element [2, 1]. Contains Y translation."},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#methods","title":"Methods","text":"Name Description Determinant Calculates the matrix determinant. Equals Invert(TBLMatrix2D, TBLMatrix2D) Inverts <code>ASrc</code> matrix and stores the result in <code>ADst</code>. Returns True if the matrix has been inverted successfully. Invert Inverts the matrix. Returns True if the matrix has been inverted successfully. MakeIdentity Creates a new matrix initialized to identity. MakeRotation(Double, TBLPoint) MakeRotation(Double, Double, Double) MakeRotation(Double) Creates a new matrix initialized to rotation. MakeScaling(TBLPointI) MakeScaling(TBLPoint) MakeScaling(Double, Double) MakeScaling(Double) Creates a new matrix initialized to scaling. MakeSinCos(Double, Double, TBLPoint) MakeSinCos(Double, Double, Double, Double) MakeSkewing(TBLPoint) MakeSkewing(Double, Double) Create a new skewing matrix. MakeTranslation(TBLPointI) MakeTranslation(TBLPoint) MakeTranslation(Double, Double) Creates a new matrix initialized to translation. MapPoint(TBLPoint) MapPoint(Double, Double) MapVector(TBLPoint) MapVector(Double, Double) PostRotate(Double, TBLPointI) PostRotate(Double, TBLPoint) PostRotate(Double, Double, Double) PostRotate(Double) PostScale(TBLPointI) PostScale(TBLPoint) PostScale(Double, Double) PostScale(Double) PostSkew(TBLPoint) PostSkew(Double, Double) PostTransform PostTranslate(TBLPointI) PostTranslate(TBLPoint) PostTranslate(Double, Double) Reset(Double, Double, Double, Double, Double, Double) Resets matrix to <code>[AM00, AM01, AM10, AM11, AM20, AM21]</code>. Reset(TBLMatrix2D) Resets matrix to <code>AOther</code> (copy its content to this matrix). Reset Resets matrix to identity. ResetToRotation(Double, TBLPoint) Resets matrix to rotation around a point <code>p</code>. ResetToRotation(Double, Double, Double) Resets matrix to rotation around a point <code>[X, Y]</code>. ResetToRotation(Double) Resets matrix to rotation. ResetToScaling(TBLPointI) Resets matrix to scaling. ResetToScaling(TBLPoint) Resets matrix to scaling. ResetToScaling(Double, Double) Resets matrix to scaling. ResetToScaling(Double) Resets matrix to scaling. ResetToSinCos(Double, Double, TBLPoint) Resets matrix to rotation specified by <code>ASin</code> and <code>ACos</code> and translation <code>AP</code>. ResetToSinCos(Double, Double, Double, Double) Resets matrix to rotation specified by <code>ASin</code> and <code>ACos</code> and optional translation <code>ATX</code> and <code>ATY</code>. ResetToSkewing(TBLPoint) Resets matrix to skewing. ResetToSkewing(Double, Double) Resets matrix to skewing. ResetToTranslation(TBLPointI) Resets matrix to translation. ResetToTranslation(TBLPoint) Resets matrix to translation. ResetToTranslation(Double, Double) Resets matrix to translation. Rotate(Double, TBLPointI) Rotate(Double, TBLPoint) Rotate(Double, Double, Double) Rotate(Double) Scale(TBLPointI) Scale(TBLPoint) Scale(Double, Double) Scale(Double) Skew(TBLPoint) Skew(Double, Double) Transform Translate(TBLPointI) Translate(TBLPoint) Translate(Double, Double)"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#M","title":"M","text":"<p><code>var M: array [0..5] of Double</code></p> <p>Type: <code>array [0..5] of Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Kind","title":"Kind","text":"<p>The matrix kind. </p> <p><code>property Kind: TBLTransformKind read GetKind</code></p> <p>Type: <code>TBLTransformKind</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#M00","title":"M00","text":"<p>Element [0, 0]. Contains X scaling. </p> <p><code>property M00: Double read M[0] write M[0]</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#M01","title":"M01","text":"<p>Element [0, 1]. Contains rotation and skewing. </p> <p><code>property M01: Double read M[1] write M[1]</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#M10","title":"M10","text":"<p>Element [1, 0]. Contains rotation and skewing. </p> <p><code>property M10: Double read M[2] write M[2]</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#M11","title":"M11","text":"<p>Element [1, 1]. Contains Y scaling. </p> <p><code>property M11: Double read M[3] write M[3]</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#M20","title":"M20","text":"<p>Element [2, 0]. Contains X translation. </p> <p><code>property M20: Double read M[4] write M[4]</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#M21","title":"M21","text":"<p>Element [2, 1]. Contains Y translation. </p> <p><code>property M21: Double read M[5] write M[5]</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AM00, AM01, AM10, AM11, AM20, AM21: Double)</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters","title":"Parameters","text":"<p><code>AM00</code>: <code>Double</code></p> <p><code>AM01</code>: <code>Double</code></p> <p><code>AM10</code>: <code>Double</code></p> <p><code>AM11</code>: <code>Double</code></p> <p><code>AM20</code>: <code>Double</code></p> <p><code>AM21</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Equal","title":"Equal(TBLMatrix2D, TBLMatrix2D)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLMatrix2D): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLMatrix2D</code></p> <p><code>ARight</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#NotEqual","title":"NotEqual(TBLMatrix2D, TBLMatrix2D)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLMatrix2D): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLMatrix2D</code></p> <p><code>ARight</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Determinant","title":"Determinant","text":"<p>Calculates the matrix determinant. </p> <p><code>function Determinant: Double; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_2","title":"Returns","text":"<p><code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Equals","title":"Equals(TBLMatrix2D)","text":"<p><code>function Equals(const AOther: TBLMatrix2D): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_3","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Invert_0","title":"Invert(TBLMatrix2D, TBLMatrix2D)","text":"<p>Inverts <code>ASrc</code> matrix and stores the result in <code>ADst</code>. Returns True if the matrix has been inverted successfully. </p> <p><code>class function Invert(const ASrc: TBLMatrix2D; out ADst: TBLMatrix2D): Boolean; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_4","title":"Parameters","text":"<p><code>ASrc</code>: <code>TBLMatrix2D</code></p> <p><code>ADst</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Invert_1","title":"Invert","text":"<p>Inverts the matrix. Returns True if the matrix has been inverted successfully. </p> <p><code>function Invert: Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_5","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeIdentity","title":"MakeIdentity","text":"<p>Creates a new matrix initialized to identity. </p> <p><code>class function MakeIdentity: TBLMatrix2D; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_6","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeRotation_0","title":"MakeRotation(Double, TBLPoint)","text":"<p><code>class function MakeRotation(const AAngle: Double; const AOrigin: TBLPoint): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_5","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_7","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeRotation_1","title":"MakeRotation(Double, Double, Double)","text":"<p><code>class function MakeRotation(const AAngle, AX, AY: Double): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_6","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_8","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeRotation_2","title":"MakeRotation(Double)","text":"<p>Creates a new matrix initialized to rotation. </p> <p><code>class function MakeRotation(const AAngle: Double): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_7","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_9","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeScaling_0","title":"MakeScaling(TBLPointI)","text":"<p><code>class function MakeScaling(const AP: TBLPointI): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_8","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_10","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeScaling_1","title":"MakeScaling(TBLPoint)","text":"<p><code>class function MakeScaling(const AP: TBLPoint): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_9","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_11","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeScaling_2","title":"MakeScaling(Double, Double)","text":"<p><code>class function MakeScaling(const AX, AY: Double): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_10","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_12","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeScaling_3","title":"MakeScaling(Double)","text":"<p>Creates a new matrix initialized to scaling. </p> <p><code>class function MakeScaling(const AXY: Double): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_11","title":"Parameters","text":"<p><code>AXY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_13","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeSinCos_0","title":"MakeSinCos(Double, Double, TBLPoint)","text":"<p><code>class function MakeSinCos(const ASin, ACos: Double; const AP: TBLPoint): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_12","title":"Parameters","text":"<p><code>ASin</code>: <code>Double</code></p> <p><code>ACos</code>: <code>Double</code></p> <p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_14","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeSinCos_1","title":"MakeSinCos(Double, Double, Double, Double)","text":"<p><code>class function MakeSinCos(const ASin, ACos: Double; const ATX: Double = 0; const ATY: Double = 0): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_13","title":"Parameters","text":"<p><code>ASin</code>: <code>Double</code></p> <p><code>ACos</code>: <code>Double</code></p> <p><code>ATX</code>: <code>Double = 0</code></p> <p><code>ATY</code>: <code>Double = 0</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_15","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeSkewing_0","title":"MakeSkewing(TBLPoint)","text":"<p><code>class function MakeSkewing(const AOrigin: TBLPoint): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_14","title":"Parameters","text":"<p><code>AOrigin</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_16","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeSkewing_1","title":"MakeSkewing(Double, Double)","text":"<p>Create a new skewing matrix. </p> <p><code>class function MakeSkewing(const AX, AY: Double): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_15","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_17","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeTranslation_0","title":"MakeTranslation(TBLPointI)","text":"<p><code>class function MakeTranslation(const AP: TBLPointI): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_16","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_18","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeTranslation_1","title":"MakeTranslation(TBLPoint)","text":"<p><code>class function MakeTranslation(const AP: TBLPoint): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_17","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_19","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MakeTranslation_2","title":"MakeTranslation(Double, Double)","text":"<p>Creates a new matrix initialized to translation. </p> <p><code>class function MakeTranslation(const AX, AY: Double): TBLMatrix2D; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_18","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_20","title":"Returns","text":"<p><code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MapPoint_0","title":"MapPoint(TBLPoint)","text":"<p><code>function MapPoint(const AP: TBLPoint): TBLPoint; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_19","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_21","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MapPoint_1","title":"MapPoint(Double, Double)","text":"<p><code>function MapPoint(const AX, AY: Double): TBLPoint; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_20","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_22","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MapVector_0","title":"MapVector(TBLPoint)","text":"<p><code>function MapVector(const AP: TBLPoint): TBLPoint; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_21","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_23","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#MapVector_1","title":"MapVector(Double, Double)","text":"<p><code>function MapVector(const AX, AY: Double): TBLPoint; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_22","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#returns_24","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostRotate_0","title":"PostRotate(Double, TBLPointI)","text":"<p><code>procedure PostRotate(const AAngle: Double; const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_23","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostRotate_1","title":"PostRotate(Double, TBLPoint)","text":"<p><code>procedure PostRotate(const AAngle: Double; const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_24","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostRotate_2","title":"PostRotate(Double, Double, Double)","text":"<p><code>procedure PostRotate(const AAngle, AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_25","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostRotate_3","title":"PostRotate(Double)","text":"<p><code>procedure PostRotate(const AAngle: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_26","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostScale_0","title":"PostScale(TBLPointI)","text":"<p><code>procedure PostScale(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_27","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostScale_1","title":"PostScale(TBLPoint)","text":"<p><code>procedure PostScale(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_28","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostScale_2","title":"PostScale(Double, Double)","text":"<p><code>procedure PostScale(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_29","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostScale_3","title":"PostScale(Double)","text":"<p><code>procedure PostScale(const AXY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_30","title":"Parameters","text":"<p><code>AXY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostSkew_0","title":"PostSkew(TBLPoint)","text":"<p><code>procedure PostSkew(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_31","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostSkew_1","title":"PostSkew(Double, Double)","text":"<p><code>procedure PostSkew(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_32","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostTransform","title":"PostTransform(TBLMatrix2D)","text":"<p><code>procedure PostTransform(const AM: TBLMatrix2D); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_33","title":"Parameters","text":"<p><code>AM</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostTranslate_0","title":"PostTranslate(TBLPointI)","text":"<p><code>procedure PostTranslate(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_34","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostTranslate_1","title":"PostTranslate(TBLPoint)","text":"<p><code>procedure PostTranslate(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_35","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#PostTranslate_2","title":"PostTranslate(Double, Double)","text":"<p><code>procedure PostTranslate(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_36","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Reset_0","title":"Reset(Double, Double, Double, Double, Double, Double)","text":"<p>Resets matrix to <code>[AM00, AM01, AM10, AM11, AM20, AM21]</code>. </p> <p><code>procedure Reset(const AM00, AM01, AM10, AM11, AM20, AM21: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_37","title":"Parameters","text":"<p><code>AM00</code>: <code>Double</code></p> <p><code>AM01</code>: <code>Double</code></p> <p><code>AM10</code>: <code>Double</code></p> <p><code>AM11</code>: <code>Double</code></p> <p><code>AM20</code>: <code>Double</code></p> <p><code>AM21</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Reset_1","title":"Reset(TBLMatrix2D)","text":"<p>Resets matrix to <code>AOther</code> (copy its content to this matrix). </p> <p><code>procedure Reset(const AOther: TBLMatrix2D); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_38","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Reset_2","title":"Reset","text":"<p>Resets matrix to identity. </p> <p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToRotation_0","title":"ResetToRotation(Double, TBLPoint)","text":"<p>Resets matrix to rotation around a point <code>p</code>. </p> <p><code>procedure ResetToRotation(const AAngle: Double; const AOrigin: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_39","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToRotation_1","title":"ResetToRotation(Double, Double, Double)","text":"<p>Resets matrix to rotation around a point <code>[X, Y]</code>. </p> <p><code>procedure ResetToRotation(const AAngle, AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_40","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToRotation_2","title":"ResetToRotation(Double)","text":"<p>Resets matrix to rotation. </p> <p><code>procedure ResetToRotation(const AAngle: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_41","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToScaling_0","title":"ResetToScaling(TBLPointI)","text":"<p>Resets matrix to scaling. </p> <p><code>procedure ResetToScaling(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_42","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToScaling_1","title":"ResetToScaling(TBLPoint)","text":"<p>Resets matrix to scaling. </p> <p><code>procedure ResetToScaling(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_43","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToScaling_2","title":"ResetToScaling(Double, Double)","text":"<p>Resets matrix to scaling. </p> <p><code>procedure ResetToScaling(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_44","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToScaling_3","title":"ResetToScaling(Double)","text":"<p>Resets matrix to scaling. </p> <p><code>procedure ResetToScaling(const AXY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_45","title":"Parameters","text":"<p><code>AXY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToSinCos_0","title":"ResetToSinCos(Double, Double, TBLPoint)","text":"<p>Resets matrix to rotation specified by <code>ASin</code> and <code>ACos</code> and translation <code>AP</code>. </p> <p><code>procedure ResetToSinCos(const ASin, ACos: Double; const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_46","title":"Parameters","text":"<p><code>ASin</code>: <code>Double</code></p> <p><code>ACos</code>: <code>Double</code></p> <p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToSinCos_1","title":"ResetToSinCos(Double, Double, Double, Double)","text":"<p>Resets matrix to rotation specified by <code>ASin</code> and <code>ACos</code> and optional translation <code>ATX</code> and <code>ATY</code>. </p> <p><code>procedure ResetToSinCos(const ASin, ACos: Double; const ATX: Double = 0; const ATY: Double = 0); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_47","title":"Parameters","text":"<p><code>ASin</code>: <code>Double</code></p> <p><code>ACos</code>: <code>Double</code></p> <p><code>ATX</code>: <code>Double = 0</code></p> <p><code>ATY</code>: <code>Double = 0</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToSkewing_0","title":"ResetToSkewing(TBLPoint)","text":"<p>Resets matrix to skewing. </p> <p><code>procedure ResetToSkewing(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_48","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToSkewing_1","title":"ResetToSkewing(Double, Double)","text":"<p>Resets matrix to skewing. </p> <p><code>procedure ResetToSkewing(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_49","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToTranslation_0","title":"ResetToTranslation(TBLPointI)","text":"<p>Resets matrix to translation. </p> <p><code>procedure ResetToTranslation(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_50","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToTranslation_1","title":"ResetToTranslation(TBLPoint)","text":"<p>Resets matrix to translation. </p> <p><code>procedure ResetToTranslation(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_51","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#ResetToTranslation_2","title":"ResetToTranslation(Double, Double)","text":"<p>Resets matrix to translation. </p> <p><code>procedure ResetToTranslation(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_52","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Rotate_0","title":"Rotate(Double, TBLPointI)","text":"<p><code>procedure Rotate(const AAngle: Double; const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_53","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Rotate_1","title":"Rotate(Double, TBLPoint)","text":"<p><code>procedure Rotate(const AAngle: Double; const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_54","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Rotate_2","title":"Rotate(Double, Double, Double)","text":"<p><code>procedure Rotate(const AAngle, AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_55","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Rotate_3","title":"Rotate(Double)","text":"<p><code>procedure Rotate(const AAngle: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_56","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Scale_0","title":"Scale(TBLPointI)","text":"<p><code>procedure Scale(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_57","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Scale_1","title":"Scale(TBLPoint)","text":"<p><code>procedure Scale(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_58","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Scale_2","title":"Scale(Double, Double)","text":"<p><code>procedure Scale(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_59","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Scale_3","title":"Scale(Double)","text":"<p><code>procedure Scale(const AXY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_60","title":"Parameters","text":"<p><code>AXY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Skew_0","title":"Skew(TBLPoint)","text":"<p><code>procedure Skew(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_61","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Skew_1","title":"Skew(Double, Double)","text":"<p><code>procedure Skew(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_62","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Transform","title":"Transform(TBLMatrix2D)","text":"<p><code>procedure Transform(const AM: TBLMatrix2D); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_63","title":"Parameters","text":"<p><code>AM</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Translate_0","title":"Translate(TBLPointI)","text":"<p><code>procedure Translate(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_64","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Translate_1","title":"Translate(TBLPoint)","text":"<p><code>procedure Translate(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_65","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#Translate_2","title":"Translate(Double, Double)","text":"<p><code>procedure Translate(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLMatrix2D/#parameters_66","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLObjectCore/","title":"TBLObjectCore","text":"<p>Base \"class\" used by all Blend2D objects. </p>"},{"location":"Reference/Blend2D/classes/TBLObjectCore/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLObjectCore = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLPath/","title":"TBLPath","text":"<p>2D vector path. </p>"},{"location":"Reference/Blend2D/classes/TBLPath/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPath = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLPath/#properties","title":"Properties","text":"Name Description BoundingBox Bounding box of all on-path vertices and curve extrema. Capacity Path capacity (number of allocated vertices). CommandData Path's command data (read-only). CommandDataEnd The end of path's command data (read-only). ControlBox Bounding box of all vertices and control points to. FigureRanges The ranges describing a figure at the given <code>AIndex</code>. InfoFlags Update a path information if necessary. IsEmpty Whether the path is empty, which means its size equals to zero. LastVertex The last vertex of the path. If the very last command of the path is <code>TBLPathCmd.Close</code> then the path will be iterated in reverse order to match the initial vertex of the last figure. Size Path size (number of vertices used). VertexData Path's vertex data (read-only). VertexDataEnd The end of path's vertex data (read-only)."},{"location":"Reference/Blend2D/classes/TBLPath/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor. Finalize Destroys the path. Initialize Creates a default constructed path."},{"location":"Reference/Blend2D/classes/TBLPath/#operators","title":"Operators","text":"Name Description Equal(TBLPath, TBLPath) Returns True if two paths are equal (have the same contents). Equal(TBLPath, Pointer) Used to compare against <code>nil</code> (empty path). NotEqual(TBLPath, TBLPath) Returns True if two paths are not equal (do not have the same contents). NotEqual(TBLPath, Pointer) Used to compare against <code>nil</code> (empty path)."},{"location":"Reference/Blend2D/classes/TBLPath/#methods","title":"Methods","text":"Name Description AddArc(TBLArc, TBLMatrix2D, TBLGeometryDirection) Adds an unclosed arc to the path. AddArc(TBLArc, TBLGeometryDirection) Adds an unclosed arc to the path. AddBox(Double, Double, Double, Double, TBLGeometryDirection) Adds a closed rectangle to the path specified by <code>[AX0, AY0, AX1, AY1]</code>. AddBox(TBLBox, TBLGeometryDirection) Adds a closed rectangle to the path specified by <code>ABox</code>. AddBox(TBLBoxI, TBLGeometryDirection) Adds a closed rectangle to the path specified by <code>ABox</code>. AddBoxArray(PBLBox, NativeInt, TBLMatrix2D, TBLGeometryDirection) Adds an array of closed boxes. AddBoxArray(PBLBox, NativeInt, TBLGeometryDirection) Adds an array of closed boxes. AddBoxArray(TArray&lt;TBLBox&gt;, TBLMatrix2D, TBLGeometryDirection) Adds an array of closed boxes. AddBoxArray(TArray&lt;TBLBox&gt;, TBLGeometryDirection) Adds an array of closed boxes. AddBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLMatrix2D, TBLGeometryDirection) Adds an array of closed boxes. AddBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLGeometryDirection) Adds an array of closed boxes. AddBoxArray(PBLBoxI, NativeInt, TBLMatrix2D, TBLGeometryDirection) Adds an array of closed boxes. AddBoxArray(PBLBoxI, NativeInt, TBLGeometryDirection) Adds an array of closed boxes. AddBoxArray(TArray&lt;TBLBoxI&gt;, TBLMatrix2D, TBLGeometryDirection) Adds an array of closed boxes. AddBoxArray(TArray&lt;TBLBoxI&gt;, TBLGeometryDirection) Adds an array of closed boxes. AddBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLMatrix2D, TBLGeometryDirection) Adds an array of closed boxes. AddBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLGeometryDirection) Adds an array of closed boxes. AddChord(TBLArc, TBLMatrix2D, TBLGeometryDirection) Adds a closed chord to the path. AddChord(TBLArc, TBLGeometryDirection) Adds a closed chord to the path. AddCircle(TBLCircle, TBLMatrix2D, TBLGeometryDirection) Adds a closed circle to the path. AddCircle(TBLCircle, TBLGeometryDirection) Adds a closed circle to the path. AddCubicToSegments(PBLPoint, NativeInt) Adds multiple CubicTo segments to the path. Provides high-performance path building in case that the user knows the segments that will be added to the path in advance. AddCubicToSegments(TArray&lt;TBLPoint&gt;) Adds multiple CubicTo segments to the path. Provides high-performance path building in case that the user knows the segments that will be added to the path in advance. AddEllipse(TBLEllipse, TBLMatrix2D, TBLGeometryDirection) Adds a closed ellipse to the path. AddEllipse(TBLEllipse, TBLGeometryDirection) Adds a closed ellipse to the path. AddGeometry(TBLGeometryType, Pointer, TBLMatrix2D, TBLGeometryDirection) Adds a geometry to the path. AddGeometry(TBLGeometryType, Pointer, TBLGeometryDirection) Adds a geometry to the path. AddLine(TBLLine, TBLMatrix2D, TBLGeometryDirection) Adds an unclosed line to the path. AddLine(TBLLine, TBLGeometryDirection) Adds an unclosed line to the path. AddLineToSegments(PBLPoint, NativeInt) Adds multiple LineTo segments to the path. Provides high-performance path building in case that the user knows the segments that will be added to the path in advance. AddLineToSegments(TArray&lt;TBLPoint&gt;) Adds multiple LineTo segments to the path. Provides high-performance path building in case that the user knows the segments that will be added to the path in advance. AddPath(TBLPath, TBLRange, TBLMatrix2D) Adds other <code>APath</code> transformed by <code>ATransform</code> and sliced by the given <code>ARange</code> to this path. AddPath(TBLPath, TBLMatrix2D) Adds other <code>APath</code> transformed by <code>ATransform</code> to this path. AddPath(TBLPath, TBLRange, TBLPoint) Adds other <code>APath</code> translated by <code>AP</code> and sliced by the given <code>ARange</code> to this path. AddPath(TBLPath, TBLPoint) Adds other <code>APath</code> translated by <code>AP</code> to this path. AddPath(TBLPath, TBLRange) Adds other <code>APath</code> sliced by the given <code>ARange</code> to this path. AddPath(TBLPath) Adds other <code>APath</code> to this path. AddPie(TBLArc, TBLMatrix2D, TBLGeometryDirection) Adds a closed pie to the path. AddPie(TBLArc, TBLGeometryDirection) Adds a closed pie to the path. AddPolygon(PBLPoint, NativeInt, TBLGeometryDirection) Adds a polygon. AddPolygon(PBLPoint, NativeInt, TBLMatrix2D, TBLGeometryDirection) Adds a polygon. AddPolygon(TArray&lt;TBLPoint&gt;, TBLGeometryDirection) Adds a polygon. AddPolygon(TArray&lt;TBLPoint&gt;, TBLMatrix2D, TBLGeometryDirection) Adds a polygon. AddPolygon(TBLArrayView&lt;TBLPoint&gt;, TBLGeometryDirection) Adds a polygon. AddPolygon(TBLArrayView&lt;TBLPoint&gt;, TBLMatrix2D, TBLGeometryDirection) Adds a polygon. AddPolygon(PBLPointI, NativeInt, TBLGeometryDirection) Adds a polygon. AddPolygon(PBLPointI, NativeInt, TBLMatrix2D, TBLGeometryDirection) Adds a polygon. AddPolygon(TArray&lt;TBLPointI&gt;, TBLGeometryDirection) Adds a polygon. AddPolygon(TArray&lt;TBLPointI&gt;, TBLMatrix2D, TBLGeometryDirection) Adds a polygon. AddPolygon(TBLArrayView&lt;TBLPointI&gt;, TBLGeometryDirection) Adds a polygon. AddPolygon(TBLArrayView&lt;TBLPointI&gt;, TBLMatrix2D, TBLGeometryDirection) Adds a polygon. AddPolyline(PBLPoint, NativeInt, TBLGeometryDirection) Adds a polyline. AddPolyline(PBLPoint, NativeInt, TBLMatrix2D, TBLGeometryDirection) Adds a polyline. AddPolyline(TArray&lt;TBLPoint&gt;, TBLGeometryDirection) Adds a polyline. AddPolyline(TArray&lt;TBLPoint&gt;, TBLMatrix2D, TBLGeometryDirection) Adds a polyline. AddPolyline(TBLArrayView&lt;TBLPoint&gt;, TBLGeometryDirection) Adds a polyline. AddPolyline(TBLArrayView&lt;TBLPoint&gt;, TBLMatrix2D, TBLGeometryDirection) Adds a polyline. AddPolyline(PBLPointI, NativeInt, TBLGeometryDirection) Adds a polyline. AddPolyline(PBLPointI, NativeInt, TBLMatrix2D, TBLGeometryDirection) Adds a polyline. AddPolyline(TArray&lt;TBLPointI&gt;, TBLGeometryDirection) Adds a polyline. AddPolyline(TArray&lt;TBLPointI&gt;, TBLMatrix2D, TBLGeometryDirection) Adds a polyline. AddPolyline(TBLArrayView&lt;TBLPointI&gt;, TBLGeometryDirection) Adds a polyline. AddPolyline(TBLArrayView&lt;TBLPointI&gt;, TBLMatrix2D, TBLGeometryDirection) Adds a polyline. AddQuadToSegments(PBLPoint, NativeInt) Adds multiple QuadTo segments to the path. Provides high-performance path building in case that the user knows the segments that will be added to the path in advance. AddQuadToSegments(TArray&lt;TBLPoint&gt;) Adds multiple QuadTo segments to the path. Provides high-performance path building in case that the user knows the segments that will be added to the path in advance. AddRect(Double, Double, Double, Double, TBLGeometryDirection) Adds a closed rectangle to the path specified by <code>[AX, AY, AW, AH]</code>. AddRect(TBLRect, TBLGeometryDirection) Adds a closed rectangle to the path specified by <code>ARect</code>. AddRect(TBLRectI, TBLGeometryDirection) Adds a closed rectangle to the path specified by <code>ARect</code>. AddRectArray(PBLRect, NativeInt, TBLMatrix2D, TBLGeometryDirection) Adds an array of closed rectangles. AddRectArray(PBLRect, NativeInt, TBLGeometryDirection) Adds an array of closed rectangles. AddRectArray(TArray&lt;TBLRect&gt;, TBLMatrix2D, TBLGeometryDirection) Adds an array of closed rectangles. AddRectArray(TArray&lt;TBLRect&gt;, TBLGeometryDirection) Adds an array of closed rectangles. AddRectArray(TBLArrayView&lt;TBLRect&gt;, TBLMatrix2D, TBLGeometryDirection) Adds an array of closed rectangles. AddRectArray(TBLArrayView&lt;TBLRect&gt;, TBLGeometryDirection) Adds an array of closed rectangles. AddRectArray(PBLRectI, NativeInt, TBLMatrix2D, TBLGeometryDirection) Adds an array of closed rectangles. AddRectArray(PBLRectI, NativeInt, TBLGeometryDirection) Adds an array of closed rectangles. AddRectArray(TArray&lt;TBLRectI&gt;, TBLMatrix2D, TBLGeometryDirection) Adds an array of closed rectangles. AddRectArray(TArray&lt;TBLRectI&gt;, TBLGeometryDirection) Adds an array of closed rectangles. AddRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLMatrix2D, TBLGeometryDirection) Adds an array of closed rectangles. AddRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLGeometryDirection) Adds an array of closed rectangles. AddReversedPath(TBLPath, TBLRange, TBLPathReverseMode) Adds other <code>APath</code>, but reversed. AddReversedPath(TBLPath, TBLPathReverseMode) Adds other <code>APath</code>, but reversed. AddRoundRect(TBLRoundRect, TBLMatrix2D, TBLGeometryDirection) Adds a closed rounded rectangle to the path. AddRoundRect(TBLRoundRect, TBLGeometryDirection) Adds a closed rounded rectangle to the path. AddStrokedPath(TBLPath, TBLRange, TBLStrokeOptions, TBLApproximationOptions) Adds a stroke of <code>APath</code> to this path. AddStrokedPath(TBLPath, TBLStrokeOptions, TBLApproximationOptions) Adds a stroke of <code>APath</code> to this path. AddTriangle(TBLTriangle, TBLMatrix2D, TBLGeometryDirection) Adds a closed triangle. AddTriangle(TBLTriangle, TBLGeometryDirection) Adds a closed triangle. ArcQuadrantTo(Double, Double, Double, Double) Adds an arc quadrant (90deg) to the path. The first point <code>[AX1, AY1]</code> specifies the quadrant corner and the last point <code>[AX2, AY2]</code> specifies the end point. ArcQuadrantTo(TBLPoint, TBLPoint) Adds an arc quadrant (90deg) to the path. The first point <code>AP1</code> specifies the quadrant corner and the last point <code>AP2</code> specifies the end point. ArcTo(Double, Double, Double, Double, Double, Double, Boolean) Adds an arc to the path. ArcTo(TBLPoint, TBLPoint, Double, Double, Boolean) Adds an arc to the path. AssignDeep Clear Clears the content of the path. Close Closes the current figure. ConicTo(Double, Double, Double, Double, Double) ConicTo(TBLPoint, TBLPoint, Double) CubicTo(Double, Double, Double, Double, Double, Double) Adds a cubic curve to <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code>, and <code>[AX3, AY3]</code>. CubicTo(TBLPoint, TBLPoint, TBLPoint) Adds a cubic curve to <code>AP1</code>, <code>AP2</code>, and <code>AP3</code>. EllipticArcTo(Double, Double, Double, Boolean, Boolean, Double, Double) Adds an elliptic arc to the path that follows the SVG specification. EllipticArcTo(TBLPoint, Double, Boolean, Boolean, TBLPoint) Adds an elliptic arc to the path that follows the SVG specification. Equals Tests whether this path and the <code>AOther</code> path are equal. FitTo(TBLRange, TBLRect) Fits a part of the path specified by the given <code>ARange</code> into the given <code>ARect</code>. FitTo(TBLRect) Fits the whole path into the given <code>ARect</code>. GetClosestVertex(TBLPoint, Double, Double) GetClosestVertex(TBLPoint, Double) HitTest Hit tests the given point <code>AP</code> by respecting the given <code>AFillRule</code>. LineTo(Double, Double) Adds line to <code>[AX1, AY1]</code>. LineTo(TBLPoint) Adds line to <code>AP1</code>. ModifyOp MoveTo(Double, Double) Moves to <code>[AX0, AY0]</code>. MoveTo(TBLPoint) Moves to <code>AP0</code>. PolyTo(TArray&lt;TBLPoint&gt;) Adds a polyline (LineTo) of the given <code>APoly</code> array. PolyTo(PBLPoint, NativeInt) Adds a polyline (LineTo) of the given <code>APoly</code> array of size <code>ACount</code>. QuadTo(Double, Double, Double, Double) Adds a quadratic curve to <code>[AX1, AY1]</code> and <code>[AX2, AY2]</code>. QuadTo(TBLPoint, TBLPoint) Adds a quadratic curve to <code>AP1</code> and <code>AP2</code>. RemoveRange Reserve Reserves the capacity of the path for at least <code>AMinCapacity</code> vertices and commands. Reset SetVertexAt(NativeInt, TBLPathCmd, Double, Double) Sets vertex at <code>AIndex</code> to <code>ACmd</code> and <code>[AX, AY]</code>. SetVertexAt(NativeInt, TBLPathCmd, TBLPoint) Sets vertex at <code>AIndex</code> to <code>ACmd</code> and <code>APt</code>. Shrink Shrinks the capacity of the path to fit the current usage. SmoothCubicTo(Double, Double, Double, Double) Adds a smooth cubic curve to <code>[AX2, AY2]</code> and <code>[AX3, AY3]</code>, calculating <code>[AX1, AY1]</code> from last points. SmoothCubicTo(TBLPoint, TBLPoint) Adds a smooth cubic curve to <code>AP2</code> and <code>AP3</code>, calculating <code>AP1</code> from last points. SmoothQuadTo(Double, Double) Adds a smooth quadratic curve to <code>[AX2, AY2]</code>, calculating <code>[AX1, AY1]</code> from last points. SmoothQuadTo(TBLPoint) Adds a smooth quadratic curve to <code>AP2</code>, calculating <code>AP1</code> from last points. Swap Transform(TBLRange, TBLMatrix2D) Transforms a part of the path specified by the given <code>ARange</code> by matrix <code>AM</code>. Transform(TBLMatrix2D) Transforms the whole path by matrix <code>AM</code>. Translate(TBLRange, TBLPoint) Translates a part of the path specified by the given <code>ARange</code> by <code>AP</code>. Translate(TBLPoint) Translates the whole path by <code>AP</code>. View Returns a read-only path data as <code>TBLPathView</code>."},{"location":"Reference/Blend2D/classes/TBLPath/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPath/#BoundingBox","title":"BoundingBox","text":"<p>Bounding box of all on-path vertices and curve extrema.</p> <p>The bounding box could be smaller than a bounding box obtained by <code>ControlBox</code> as it's calculated by merging only start/end points and curves at their extrema (not control points). The resulting bounding box represents a visual bounds of the path. </p> <p><code>property BoundingBox: TBLBox read GetBoundingBox</code></p> <p>Type: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#see-also","title":"See Also","text":"<ul> <li>ControlBox</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLPath/#Capacity","title":"Capacity","text":"<p>Path capacity (number of allocated vertices). </p> <p><code>property Capacity: NativeInt read GetCapacity</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#CommandData","title":"CommandData","text":"<p>Path's command data (read-only). </p> <p><code>property CommandData: PByte read GetCommandData</code></p> <p>Type: <code>PByte</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#CommandDataEnd","title":"CommandDataEnd","text":"<p>The end of path's command data (read-only). </p> <p><code>property CommandDataEnd: PByte read GetCommandDataEnd</code></p> <p>Type: <code>PByte</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#ControlBox","title":"ControlBox","text":"<p>Bounding box of all vertices and control points to.</p> <p>Control box is simply bounds of all vertices the path has without further processing. It contains both on-path and off-path points. Consider using <code>BoundingBox</code> if you need a visual bounding box. </p> <p><code>property ControlBox: TBLBox read GetControlBox</code></p> <p>Type: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#see-also_1","title":"See Also","text":"<ul> <li>BoundingBox</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLPath/#FigureRanges","title":"FigureRanges","text":"<p>The ranges describing a figure at the given <code>AIndex</code>. </p> <p><code>property FigureRanges[const AIndex: Integer]: TBLRange read GetFigureRange</code></p> <p>Type: <code>TBLRange</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#InfoFlags","title":"InfoFlags","text":"<p>Update a path information if necessary. </p> <p><code>property InfoFlags: TBLPathFlags read GetInfoFlags</code></p> <p>Type: <code>TBLPathFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#IsEmpty","title":"IsEmpty","text":"<p>Whether the path is empty, which means its size equals to zero. </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#LastVertex","title":"LastVertex","text":"<p>The last vertex of the path. If the very last command of the path is <code>TBLPathCmd.Close</code> then the path will be iterated in reverse order to match the initial vertex of the last figure. </p> <p><code>property LastVertex: TBLPoint read GetLastVertex</code></p> <p>Type: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Size","title":"Size","text":"<p>Path size (number of vertices used). </p> <p><code>property Size: NativeInt read GetSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#VertexData","title":"VertexData","text":"<p>Path's vertex data (read-only). </p> <p><code>property VertexData: PBLPoint read GetVertexData</code></p> <p>Type: <code>PBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#VertexDataEnd","title":"VertexDataEnd","text":"<p>The end of path's vertex data (read-only). </p> <p><code>property VertexDataEnd: PBLPoint read GetVertexDataEnd</code></p> <p>Type: <code>PBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPath/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor.</p> <p>Creates a weak-copy of the <code>ASrc</code> path by increasing it's internal reference counter. This path and <code>ASrc</code> would point to the same data and would be otherwise identical. Any change to <code>ASrc</code> would also affect this path. </p> <p><code>constructor Assign(var ADest: TBLPath; const ASrc: TBLPath); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLPath</code></p> <p><code>ASrc</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the path. </p> <p><code>destructor Finalize(var ADest: TBLPath)</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default constructed path. </p> <p><code>constructor Initialize(out ADest: TBLPath)</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPath/#Equal_0","title":"Equal(TBLPath, TBLPath)","text":"<p>Returns True if two paths are equal (have the same contents). </p> <p><code>class operator Equal(const ALeft, ARight: TBLPath): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPath</code></p> <p><code>ARight</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#see-also_2","title":"See Also","text":"<ul> <li>Equals</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLPath/#Equal_1","title":"Equal(TBLPath, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty path). </p> <p><code>class operator Equal(const ALeft: TBLPath; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPath</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#NotEqual_0","title":"NotEqual(TBLPath, TBLPath)","text":"<p>Returns True if two paths are not equal (do not have the same contents). </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLPath): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPath</code></p> <p><code>ARight</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#see-also_3","title":"See Also","text":"<ul> <li>Equals</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLPath/#NotEqual_1","title":"NotEqual(TBLPath, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty path). </p> <p><code>class operator NotEqual(const ALeft: TBLPath; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPath</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPath/#AddArc_0","title":"AddArc(TBLArc, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an unclosed arc to the path. </p> <p><code>procedure AddArc(const AArc: TBLArc; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_7","title":"Parameters","text":"<p><code>AArc</code>: <code>TBLArc</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddArc_1","title":"AddArc(TBLArc, TBLGeometryDirection)","text":"<p>Adds an unclosed arc to the path. </p> <p><code>procedure AddArc(const AArc: TBLArc; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_8","title":"Parameters","text":"<p><code>AArc</code>: <code>TBLArc</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBox_0","title":"AddBox(Double, Double, Double, Double, TBLGeometryDirection)","text":"<p>Adds a closed rectangle to the path specified by <code>[AX0, AY0, AX1, AY1]</code>. </p> <p><code>procedure AddBox(const AX0, AY0, AX1, AY1: Double; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_10","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_9","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBox_1","title":"AddBox(TBLBox, TBLGeometryDirection)","text":"<p>Adds a closed rectangle to the path specified by <code>ABox</code>. </p> <p><code>procedure AddBox(const ABox: TBLBox; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_11","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_10","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBox</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBox_2","title":"AddBox(TBLBoxI, TBLGeometryDirection)","text":"<p>Adds a closed rectangle to the path specified by <code>ABox</code>. </p> <p><code>procedure AddBox(const ABox: TBLBoxI; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_12","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_11","title":"Parameters","text":"<p><code>ABox</code>: <code>TBLBoxI</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBoxArray_0","title":"AddBoxArray(PBLBox, NativeInt, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an array of closed boxes. </p> <p><code>procedure AddBoxArray(const AArray: PBLBox; const ACount: NativeInt; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_13","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_12","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBoxArray_1","title":"AddBoxArray(PBLBox, NativeInt, TBLGeometryDirection)","text":"<p>Adds an array of closed boxes. </p> <p><code>procedure AddBoxArray(const AArray: PBLBox; const ACount: NativeInt; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_14","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_13","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBox</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBoxArray_2","title":"AddBoxArray(TArray&lt;TBLBox&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an array of closed boxes. </p> <p><code>procedure AddBoxArray(const AArray: TArray&lt;TBLBox&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_15","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_14","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBoxArray_3","title":"AddBoxArray(TArray&lt;TBLBox&gt;, TBLGeometryDirection)","text":"<p>Adds an array of closed boxes. </p> <p><code>procedure AddBoxArray(const AArray: TArray&lt;TBLBox&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_16","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_15","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBox&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBoxArray_4","title":"AddBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an array of closed boxes. </p> <p><code>procedure AddBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_17","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_16","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBoxArray_5","title":"AddBoxArray(TBLArrayView&lt;TBLBox&gt;, TBLGeometryDirection)","text":"<p>Adds an array of closed boxes. </p> <p><code>procedure AddBoxArray(const AArray: TBLArrayView&lt;TBLBox&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_18","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_17","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBox&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBoxArray_6","title":"AddBoxArray(PBLBoxI, NativeInt, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an array of closed boxes. </p> <p><code>procedure AddBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_19","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_18","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBoxArray_7","title":"AddBoxArray(PBLBoxI, NativeInt, TBLGeometryDirection)","text":"<p>Adds an array of closed boxes. </p> <p><code>procedure AddBoxArray(const AArray: PBLBoxI; const ACount: NativeInt; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_20","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_19","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLBoxI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBoxArray_8","title":"AddBoxArray(TArray&lt;TBLBoxI&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an array of closed boxes. </p> <p><code>procedure AddBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_21","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_20","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBoxArray_9","title":"AddBoxArray(TArray&lt;TBLBoxI&gt;, TBLGeometryDirection)","text":"<p>Adds an array of closed boxes. </p> <p><code>procedure AddBoxArray(const AArray: TArray&lt;TBLBoxI&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_22","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_21","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLBoxI&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBoxArray_10","title":"AddBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an array of closed boxes. </p> <p><code>procedure AddBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_23","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_22","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddBoxArray_11","title":"AddBoxArray(TBLArrayView&lt;TBLBoxI&gt;, TBLGeometryDirection)","text":"<p>Adds an array of closed boxes. </p> <p><code>procedure AddBoxArray(const AArray: TBLArrayView&lt;TBLBoxI&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_24","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_23","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLBoxI&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddChord_0","title":"AddChord(TBLArc, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a closed chord to the path. </p> <p><code>procedure AddChord(const AChord: TBLArc; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_25","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_24","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddChord_1","title":"AddChord(TBLArc, TBLGeometryDirection)","text":"<p>Adds a closed chord to the path. </p> <p><code>procedure AddChord(const AChord: TBLArc; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_26","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_25","title":"Parameters","text":"<p><code>AChord</code>: <code>TBLArc</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddCircle_0","title":"AddCircle(TBLCircle, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a closed circle to the path. </p> <p><code>procedure AddCircle(const ACircle: TBLCircle; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_27","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_26","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddCircle_1","title":"AddCircle(TBLCircle, TBLGeometryDirection)","text":"<p>Adds a closed circle to the path. </p> <p><code>procedure AddCircle(const ACircle: TBLCircle; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_28","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_27","title":"Parameters","text":"<p><code>ACircle</code>: <code>TBLCircle</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddCubicToSegments_0","title":"AddCubicToSegments(PBLPoint, NativeInt)","text":"<p>Adds multiple CubicTo segments to the path. Provides high-performance path building in case that the user knows the segments that will be added to the path in advance. </p> <p><code>procedure AddCubicToSegments(const APoints: PBLPoint; const ASegmentCount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_29","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_28","title":"Parameters","text":"<p><code>APoints</code>: <code>PBLPoint</code></p> <p><code>ASegmentCount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#remarks","title":"Remarks","text":"<p>The APoints array contains triples of points (P0, P1, P2). ASegmentCount contains the number of segments (triples), not the number of points. </p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddCubicToSegments_1","title":"AddCubicToSegments(TArray&lt;TBLPoint&gt;)","text":"<p>Adds multiple CubicTo segments to the path. Provides high-performance path building in case that the user knows the segments that will be added to the path in advance. </p> <p><code>procedure AddCubicToSegments(const APoints: TArray&lt;TBLPoint&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_30","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_29","title":"Parameters","text":"<p><code>APoints</code>: <code>TArray&lt;TBLPoint&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#remarks_1","title":"Remarks","text":"<p>The APoints array contains triples of points (P0, P1, P2). Thus the length of the array must be a multiple of 3. </p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddEllipse_0","title":"AddEllipse(TBLEllipse, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a closed ellipse to the path. </p> <p><code>procedure AddEllipse(const AEllipse: TBLEllipse; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_31","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_30","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddEllipse_1","title":"AddEllipse(TBLEllipse, TBLGeometryDirection)","text":"<p>Adds a closed ellipse to the path. </p> <p><code>procedure AddEllipse(const AEllipse: TBLEllipse; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_32","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_31","title":"Parameters","text":"<p><code>AEllipse</code>: <code>TBLEllipse</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddGeometry_0","title":"AddGeometry(TBLGeometryType, Pointer, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a geometry to the path. </p> <p><code>procedure AddGeometry(const AGeometryType: TBLGeometryType; const AGeometryData: Pointer; const AMatrix: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_33","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_32","title":"Parameters","text":"<p><code>AGeometryType</code>: <code>TBLGeometryType</code></p> <p><code>AGeometryData</code>: <code>Pointer</code></p> <p><code>AMatrix</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddGeometry_1","title":"AddGeometry(TBLGeometryType, Pointer, TBLGeometryDirection)","text":"<p>Adds a geometry to the path. </p> <p><code>procedure AddGeometry(const AGeometryType: TBLGeometryType; const AGeometryData: Pointer; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_34","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_33","title":"Parameters","text":"<p><code>AGeometryType</code>: <code>TBLGeometryType</code></p> <p><code>AGeometryData</code>: <code>Pointer</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddLine_0","title":"AddLine(TBLLine, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an unclosed line to the path. </p> <p><code>procedure AddLine(const ALine: TBLLine; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_35","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_34","title":"Parameters","text":"<p><code>ALine</code>: <code>TBLLine</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddLine_1","title":"AddLine(TBLLine, TBLGeometryDirection)","text":"<p>Adds an unclosed line to the path. </p> <p><code>procedure AddLine(const ALine: TBLLine; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_36","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_35","title":"Parameters","text":"<p><code>ALine</code>: <code>TBLLine</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddLineToSegments_0","title":"AddLineToSegments(PBLPoint, NativeInt)","text":"<p>Adds multiple LineTo segments to the path. Provides high-performance path building in case that the user knows the segments that will be added to the path in advance. </p> <p><code>procedure AddLineToSegments(const APoints: PBLPoint; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_37","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_36","title":"Parameters","text":"<p><code>APoints</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddLineToSegments_1","title":"AddLineToSegments(TArray&lt;TBLPoint&gt;)","text":"<p>Adds multiple LineTo segments to the path. Provides high-performance path building in case that the user knows the segments that will be added to the path in advance. </p> <p><code>procedure AddLineToSegments(const APoints: TArray&lt;TBLPoint&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_38","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_37","title":"Parameters","text":"<p><code>APoints</code>: <code>TArray&lt;TBLPoint&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPath_0","title":"AddPath(TBLPath, TBLRange, TBLMatrix2D)","text":"<p>Adds other <code>APath</code> transformed by <code>ATransform</code> and sliced by the given <code>ARange</code> to this path. </p> <p><code>procedure AddPath(const APath: TBLPath; const ARange: TBLRange; const ATransform: TBLMatrix2D); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_39","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_38","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>ARange</code>: <code>TBLRange</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPath_1","title":"AddPath(TBLPath, TBLMatrix2D)","text":"<p>Adds other <code>APath</code> transformed by <code>ATransform</code> to this path. </p> <p><code>procedure AddPath(const APath: TBLPath; const ATransform: TBLMatrix2D); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_40","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_39","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPath_2","title":"AddPath(TBLPath, TBLRange, TBLPoint)","text":"<p>Adds other <code>APath</code> translated by <code>AP</code> and sliced by the given <code>ARange</code> to this path. </p> <p><code>procedure AddPath(const APath: TBLPath; const ARange: TBLRange; const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_41","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_40","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>ARange</code>: <code>TBLRange</code></p> <p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPath_3","title":"AddPath(TBLPath, TBLPoint)","text":"<p>Adds other <code>APath</code> translated by <code>AP</code> to this path. </p> <p><code>procedure AddPath(const APath: TBLPath; const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_42","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_41","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPath_4","title":"AddPath(TBLPath, TBLRange)","text":"<p>Adds other <code>APath</code> sliced by the given <code>ARange</code> to this path. </p> <p><code>procedure AddPath(const APath: TBLPath; const ARange: TBLRange); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_43","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_42","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>ARange</code>: <code>TBLRange</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPath_5","title":"AddPath(TBLPath)","text":"<p>Adds other <code>APath</code> to this path. </p> <p><code>procedure AddPath(const APath: TBLPath); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_44","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_43","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPie_0","title":"AddPie(TBLArc, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a closed pie to the path. </p> <p><code>procedure AddPie(const APie: TBLArc; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_45","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_44","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPie_1","title":"AddPie(TBLArc, TBLGeometryDirection)","text":"<p>Adds a closed pie to the path. </p> <p><code>procedure AddPie(const APie: TBLArc; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_46","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_45","title":"Parameters","text":"<p><code>APie</code>: <code>TBLArc</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolygon_0","title":"AddPolygon(PBLPoint, NativeInt, TBLGeometryDirection)","text":"<p>Adds a polygon. </p> <p><code>procedure AddPolygon(const APoly: PBLPoint; const ACount: NativeInt; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_47","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_46","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolygon_1","title":"AddPolygon(PBLPoint, NativeInt, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a polygon. </p> <p><code>procedure AddPolygon(const APoly: PBLPoint; const ACount: NativeInt; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_48","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_47","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolygon_2","title":"AddPolygon(TArray&lt;TBLPoint&gt;, TBLGeometryDirection)","text":"<p>Adds a polygon. </p> <p><code>procedure AddPolygon(const APoly: TArray&lt;TBLPoint&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_49","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_48","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolygon_3","title":"AddPolygon(TArray&lt;TBLPoint&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a polygon. </p> <p><code>procedure AddPolygon(const APoly: TArray&lt;TBLPoint&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_50","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_49","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolygon_4","title":"AddPolygon(TBLArrayView&lt;TBLPoint&gt;, TBLGeometryDirection)","text":"<p>Adds a polygon. </p> <p><code>procedure AddPolygon(const APoly: TBLArrayView&lt;TBLPoint&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_51","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_50","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolygon_5","title":"AddPolygon(TBLArrayView&lt;TBLPoint&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a polygon. </p> <p><code>procedure AddPolygon(const APoly: TBLArrayView&lt;TBLPoint&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_52","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_51","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolygon_6","title":"AddPolygon(PBLPointI, NativeInt, TBLGeometryDirection)","text":"<p>Adds a polygon. </p> <p><code>procedure AddPolygon(const APoly: PBLPointI; const ACount: NativeInt; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_53","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_52","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolygon_7","title":"AddPolygon(PBLPointI, NativeInt, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a polygon. </p> <p><code>procedure AddPolygon(const APoly: PBLPointI; const ACount: NativeInt; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_54","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_53","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolygon_8","title":"AddPolygon(TArray&lt;TBLPointI&gt;, TBLGeometryDirection)","text":"<p>Adds a polygon. </p> <p><code>procedure AddPolygon(const APoly: TArray&lt;TBLPointI&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_55","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_54","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolygon_9","title":"AddPolygon(TArray&lt;TBLPointI&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a polygon. </p> <p><code>procedure AddPolygon(const APoly: TArray&lt;TBLPointI&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_56","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_55","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolygon_10","title":"AddPolygon(TBLArrayView&lt;TBLPointI&gt;, TBLGeometryDirection)","text":"<p>Adds a polygon. </p> <p><code>procedure AddPolygon(const APoly: TBLArrayView&lt;TBLPointI&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_57","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_56","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolygon_11","title":"AddPolygon(TBLArrayView&lt;TBLPointI&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a polygon. </p> <p><code>procedure AddPolygon(const APoly: TBLArrayView&lt;TBLPointI&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_58","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_57","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolyline_0","title":"AddPolyline(PBLPoint, NativeInt, TBLGeometryDirection)","text":"<p>Adds a polyline. </p> <p><code>procedure AddPolyline(const APoly: PBLPoint; const ACount: NativeInt; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_59","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_58","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolyline_1","title":"AddPolyline(PBLPoint, NativeInt, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a polyline. </p> <p><code>procedure AddPolyline(const APoly: PBLPoint; const ACount: NativeInt; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_60","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_59","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolyline_2","title":"AddPolyline(TArray&lt;TBLPoint&gt;, TBLGeometryDirection)","text":"<p>Adds a polyline. </p> <p><code>procedure AddPolyline(const APoly: TArray&lt;TBLPoint&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_61","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_60","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolyline_3","title":"AddPolyline(TArray&lt;TBLPoint&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a polyline. </p> <p><code>procedure AddPolyline(const APoly: TArray&lt;TBLPoint&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_62","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_61","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolyline_4","title":"AddPolyline(TBLArrayView&lt;TBLPoint&gt;, TBLGeometryDirection)","text":"<p>Adds a polyline. </p> <p><code>procedure AddPolyline(const APoly: TBLArrayView&lt;TBLPoint&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_63","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_62","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolyline_5","title":"AddPolyline(TBLArrayView&lt;TBLPoint&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a polyline. </p> <p><code>procedure AddPolyline(const APoly: TBLArrayView&lt;TBLPoint&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_64","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_63","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPoint&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolyline_6","title":"AddPolyline(PBLPointI, NativeInt, TBLGeometryDirection)","text":"<p>Adds a polyline. </p> <p><code>procedure AddPolyline(const APoly: PBLPointI; const ACount: NativeInt; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_65","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_64","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolyline_7","title":"AddPolyline(PBLPointI, NativeInt, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a polyline. </p> <p><code>procedure AddPolyline(const APoly: PBLPointI; const ACount: NativeInt; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_66","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_65","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPointI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolyline_8","title":"AddPolyline(TArray&lt;TBLPointI&gt;, TBLGeometryDirection)","text":"<p>Adds a polyline. </p> <p><code>procedure AddPolyline(const APoly: TArray&lt;TBLPointI&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_67","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_66","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolyline_9","title":"AddPolyline(TArray&lt;TBLPointI&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a polyline. </p> <p><code>procedure AddPolyline(const APoly: TArray&lt;TBLPointI&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_68","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_67","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPointI&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolyline_10","title":"AddPolyline(TBLArrayView&lt;TBLPointI&gt;, TBLGeometryDirection)","text":"<p>Adds a polyline. </p> <p><code>procedure AddPolyline(const APoly: TBLArrayView&lt;TBLPointI&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_69","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_68","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddPolyline_11","title":"AddPolyline(TBLArrayView&lt;TBLPointI&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a polyline. </p> <p><code>procedure AddPolyline(const APoly: TBLArrayView&lt;TBLPointI&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_70","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_69","title":"Parameters","text":"<p><code>APoly</code>: <code>TBLArrayView&lt;TBLPointI&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddQuadToSegments_0","title":"AddQuadToSegments(PBLPoint, NativeInt)","text":"<p>Adds multiple QuadTo segments to the path. Provides high-performance path building in case that the user knows the segments that will be added to the path in advance. </p> <p><code>procedure AddQuadToSegments(const APoints: PBLPoint; const ASegmentCount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_71","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_70","title":"Parameters","text":"<p><code>APoints</code>: <code>PBLPoint</code></p> <p><code>ASegmentCount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#remarks_2","title":"Remarks","text":"<p>The APoints array contains pairs of points (P0, P1). ASegmentCount contains the number of segments (pairs), not the number of points. </p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddQuadToSegments_1","title":"AddQuadToSegments(TArray&lt;TBLPoint&gt;)","text":"<p>Adds multiple QuadTo segments to the path. Provides high-performance path building in case that the user knows the segments that will be added to the path in advance. </p> <p><code>procedure AddQuadToSegments(const APoints: TArray&lt;TBLPoint&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_72","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_71","title":"Parameters","text":"<p><code>APoints</code>: <code>TArray&lt;TBLPoint&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#remarks_3","title":"Remarks","text":"<p>The APoints array contains pairs of points (P0, P1). Thus the length of the array must be even. </p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRect_0","title":"AddRect(Double, Double, Double, Double, TBLGeometryDirection)","text":"<p>Adds a closed rectangle to the path specified by <code>[AX, AY, AW, AH]</code>. </p> <p><code>procedure AddRect(const AX, AY, AW, AH: Double; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_73","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_72","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRect_1","title":"AddRect(TBLRect, TBLGeometryDirection)","text":"<p>Adds a closed rectangle to the path specified by <code>ARect</code>. </p> <p><code>procedure AddRect(const ARect: TBLRect; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_74","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_73","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRect_2","title":"AddRect(TBLRectI, TBLGeometryDirection)","text":"<p>Adds a closed rectangle to the path specified by <code>ARect</code>. </p> <p><code>procedure AddRect(const ARect: TBLRectI; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_75","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_74","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRectI</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRectArray_0","title":"AddRectArray(PBLRect, NativeInt, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an array of closed rectangles. </p> <p><code>procedure AddRectArray(const AArray: PBLRect; const ACount: NativeInt; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_76","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_75","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRectArray_1","title":"AddRectArray(PBLRect, NativeInt, TBLGeometryDirection)","text":"<p>Adds an array of closed rectangles. </p> <p><code>procedure AddRectArray(const AArray: PBLRect; const ACount: NativeInt; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_77","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_76","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRect</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRectArray_2","title":"AddRectArray(TArray&lt;TBLRect&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an array of closed rectangles. </p> <p><code>procedure AddRectArray(const AArray: TArray&lt;TBLRect&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_78","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_77","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRectArray_3","title":"AddRectArray(TArray&lt;TBLRect&gt;, TBLGeometryDirection)","text":"<p>Adds an array of closed rectangles. </p> <p><code>procedure AddRectArray(const AArray: TArray&lt;TBLRect&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_79","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_78","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRect&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRectArray_4","title":"AddRectArray(TBLArrayView&lt;TBLRect&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an array of closed rectangles. </p> <p><code>procedure AddRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_80","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_79","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRectArray_5","title":"AddRectArray(TBLArrayView&lt;TBLRect&gt;, TBLGeometryDirection)","text":"<p>Adds an array of closed rectangles. </p> <p><code>procedure AddRectArray(const AArray: TBLArrayView&lt;TBLRect&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_81","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_80","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRect&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRectArray_6","title":"AddRectArray(PBLRectI, NativeInt, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an array of closed rectangles. </p> <p><code>procedure AddRectArray(const AArray: PBLRectI; const ACount: NativeInt; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_82","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_81","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRectArray_7","title":"AddRectArray(PBLRectI, NativeInt, TBLGeometryDirection)","text":"<p>Adds an array of closed rectangles. </p> <p><code>procedure AddRectArray(const AArray: PBLRectI; const ACount: NativeInt; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_83","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_82","title":"Parameters","text":"<p><code>AArray</code>: <code>PBLRectI</code></p> <p><code>ACount</code>: <code>NativeInt</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRectArray_8","title":"AddRectArray(TArray&lt;TBLRectI&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an array of closed rectangles. </p> <p><code>procedure AddRectArray(const AArray: TArray&lt;TBLRectI&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_84","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_83","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRectArray_9","title":"AddRectArray(TArray&lt;TBLRectI&gt;, TBLGeometryDirection)","text":"<p>Adds an array of closed rectangles. </p> <p><code>procedure AddRectArray(const AArray: TArray&lt;TBLRectI&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_85","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_84","title":"Parameters","text":"<p><code>AArray</code>: <code>TArray&lt;TBLRectI&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRectArray_10","title":"AddRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds an array of closed rectangles. </p> <p><code>procedure AddRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_86","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_85","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRectArray_11","title":"AddRectArray(TBLArrayView&lt;TBLRectI&gt;, TBLGeometryDirection)","text":"<p>Adds an array of closed rectangles. </p> <p><code>procedure AddRectArray(const AArray: TBLArrayView&lt;TBLRectI&gt;; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_87","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_86","title":"Parameters","text":"<p><code>AArray</code>: <code>TBLArrayView&lt;TBLRectI&gt;</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddReversedPath_0","title":"AddReversedPath(TBLPath, TBLRange, TBLPathReverseMode)","text":"<p>Adds other <code>APath</code>, but reversed. </p> <p><code>procedure AddReversedPath(const APath: TBLPath; const ARange: TBLRange; const AReverseMode: TBLPathReverseMode); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_88","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_87","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>ARange</code>: <code>TBLRange</code></p> <p><code>AReverseMode</code>: <code>TBLPathReverseMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddReversedPath_1","title":"AddReversedPath(TBLPath, TBLPathReverseMode)","text":"<p>Adds other <code>APath</code>, but reversed. </p> <p><code>procedure AddReversedPath(const APath: TBLPath; const AReverseMode: TBLPathReverseMode); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_89","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_88","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AReverseMode</code>: <code>TBLPathReverseMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRoundRect_0","title":"AddRoundRect(TBLRoundRect, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a closed rounded rectangle to the path. </p> <p><code>procedure AddRoundRect(const ARR: TBLRoundRect; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_90","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_89","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddRoundRect_1","title":"AddRoundRect(TBLRoundRect, TBLGeometryDirection)","text":"<p>Adds a closed rounded rectangle to the path. </p> <p><code>procedure AddRoundRect(const ARR: TBLRoundRect; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_91","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_90","title":"Parameters","text":"<p><code>ARR</code>: <code>TBLRoundRect</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddStrokedPath_0","title":"AddStrokedPath(TBLPath, TBLRange, TBLStrokeOptions, TBLApproximationOptions)","text":"<p>Adds a stroke of <code>APath</code> to this path. </p> <p><code>procedure AddStrokedPath(const APath: TBLPath; const ARange: TBLRange; const AStrokeOptions: TBLStrokeOptions; const AApproximationOptions: TBLApproximationOptions); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_92","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_91","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>ARange</code>: <code>TBLRange</code></p> <p><code>AStrokeOptions</code>: <code>TBLStrokeOptions</code></p> <p><code>AApproximationOptions</code>: <code>TBLApproximationOptions</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddStrokedPath_1","title":"AddStrokedPath(TBLPath, TBLStrokeOptions, TBLApproximationOptions)","text":"<p>Adds a stroke of <code>APath</code> to this path. </p> <p><code>procedure AddStrokedPath(const APath: TBLPath; const AStrokeOptions: TBLStrokeOptions; const AApproximationOptions: TBLApproximationOptions); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_93","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_92","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AStrokeOptions</code>: <code>TBLStrokeOptions</code></p> <p><code>AApproximationOptions</code>: <code>TBLApproximationOptions</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddTriangle_0","title":"AddTriangle(TBLTriangle, TBLMatrix2D, TBLGeometryDirection)","text":"<p>Adds a closed triangle. </p> <p><code>procedure AddTriangle(const ATriangle: TBLTriangle; const ATransform: TBLMatrix2D; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_94","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_93","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AddTriangle_1","title":"AddTriangle(TBLTriangle, TBLGeometryDirection)","text":"<p>Adds a closed triangle. </p> <p><code>procedure AddTriangle(const ATriangle: TBLTriangle; const ADir: TBLGeometryDirection = TBLGeometryDirection.CW); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_95","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_94","title":"Parameters","text":"<p><code>ATriangle</code>: <code>TBLTriangle</code></p> <p><code>ADir</code>: <code>TBLGeometryDirection = TBLGeometryDirection.CW</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#ArcQuadrantTo_0","title":"ArcQuadrantTo(Double, Double, Double, Double)","text":"<p>Adds an arc quadrant (90deg) to the path. The first point <code>[AX1, AY1]</code> specifies the quadrant corner and the last point <code>[AX2, AY2]</code> specifies the end point. </p> <p><code>procedure ArcQuadrantTo(const AX1, AY1, AX2, AY2: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_96","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_95","title":"Parameters","text":"<p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#ArcQuadrantTo_1","title":"ArcQuadrantTo(TBLPoint, TBLPoint)","text":"<p>Adds an arc quadrant (90deg) to the path. The first point <code>AP1</code> specifies the quadrant corner and the last point <code>AP2</code> specifies the end point. </p> <p><code>procedure ArcQuadrantTo(const AP1, AP2: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_97","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_96","title":"Parameters","text":"<p><code>AP1</code>: <code>TBLPoint</code></p> <p><code>AP2</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#ArcTo_0","title":"ArcTo(Double, Double, Double, Double, Double, Double, Boolean)","text":"<p>Adds an arc to the path.</p> <p>The center of the arc is specified by <code>[ACX, ACY]</code> and radius by <code>[ARX, ARY]</code>. Both <code>AStart</code> and <code>ASweep</code> angles are in radians. If the last vertex doesn't match the start of the arc then a <code>LineTo</code> would be emitted before adding the arc. Pass <code>True</code> in <code>AForceMoveTo</code> to always emit <code>MoveTo</code> at the beginning of the arc, which starts a new figure. </p> <p><code>procedure ArcTo(const ACX, ACY, ARX, ARY, AStart, ASweep: Double; const AForceMoveTo: Boolean = False); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_98","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_97","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AForceMoveTo</code>: <code>Boolean = False</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#ArcTo_1","title":"ArcTo(TBLPoint, TBLPoint, Double, Double, Boolean)","text":"<p>Adds an arc to the path.</p> <p>The center of the arc is specified by <code>AC</code> and radius by <code>AR</code>. Both <code>AStart</code> and <code>ASweep</code> angles are in radians. If the last vertex doesn't match the start of the arc then a <code>LineTo</code> would be emitted before adding the arc. Pass <code>True</code> in <code>AForceMoveTo</code> to always emit <code>MoveTo</code> at the beginning of the arc, which starts a new figure. </p> <p><code>procedure ArcTo(const AC, AR: TBLPoint; const AStart, ASweep: Double; const AForceMoveTo: Boolean = False); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_99","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_98","title":"Parameters","text":"<p><code>AC</code>: <code>TBLPoint</code></p> <p><code>AR</code>: <code>TBLPoint</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p> <p><code>AForceMoveTo</code>: <code>Boolean = False</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#AssignDeep","title":"AssignDeep(TBLPath)","text":"<p><code>procedure AssignDeep(const AOther: TBLPath); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_99","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Clear","title":"Clear","text":"<p>Clears the content of the path. </p> <p><code>procedure Clear; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_100","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Close","title":"Close","text":"<p>Closes the current figure.</p> <p>Appends <code>TBLPathCmd.Close</code> to the path.</p> <p>Matches  SVG 'Z' path command. </p> <p><code>procedure Close; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_101","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#ConicTo_0","title":"ConicTo(Double, Double, Double, Double, Double)","text":"<p><code>procedure ConicTo(const AX1, AY1, AX2, AY2, AWeight: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_100","title":"Parameters","text":"<p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AWeight</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#ConicTo_1","title":"ConicTo(TBLPoint, TBLPoint, Double)","text":"<p><code>procedure ConicTo(const AP1, AP2: TBLPoint; const AWeight: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_101","title":"Parameters","text":"<p><code>AP1</code>: <code>TBLPoint</code></p> <p><code>AP2</code>: <code>TBLPoint</code></p> <p><code>AWeight</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#CubicTo_0","title":"CubicTo(Double, Double, Double, Double, Double, Double)","text":"<p>Adds a cubic curve to <code>[AX1, AY1]</code>, <code>[AX2, AY2]</code>, and <code>[AX3, AY3]</code>.</p> <p>Appends the following commands to the path: - <code>TBLPathCmd.Cubic[AX1, AY1]</code> - <code>TBLPathCmd.Cubic[AX2, AY2]</code> - <code>TBLPathCmd.On[AX3, AY3]</code></p> <p>Matches  SVG 'C' path command. </p> <p><code>procedure CubicTo(const AX1, AY1, AX2, AY2, AX3, AY3: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_102","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_102","title":"Parameters","text":"<p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AX3</code>: <code>Double</code></p> <p><code>AY3</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#CubicTo_1","title":"CubicTo(TBLPoint, TBLPoint, TBLPoint)","text":"<p>Adds a cubic curve to <code>AP1</code>, <code>AP2</code>, and <code>AP3</code>.</p> <p>Appends the following commands to the path: - <code>TBLPathCmd.Cubic[AP1]</code> - <code>TBLPathCmd.Cubic[AP2]</code> - <code>TBLPathCmd.On[AP3]</code></p> <p>Matches  SVG 'C' path command. </p> <p><code>procedure CubicTo(const AP1, AP2, AP3: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_103","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_103","title":"Parameters","text":"<p><code>AP1</code>: <code>TBLPoint</code></p> <p><code>AP2</code>: <code>TBLPoint</code></p> <p><code>AP3</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#EllipticArcTo_0","title":"EllipticArcTo(Double, Double, Double, Boolean, Boolean, Double, Double)","text":"<p>Adds an elliptic arc to the path that follows the SVG specification.</p> <p>Matches  SVG 'A' path command. </p> <p><code>procedure EllipticArcTo(const ARX, ARY, AXAxisRotation: Double; const ALargeArcFlag, ASweepFlag: Boolean; const AX1, AY1: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_104","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_104","title":"Parameters","text":"<p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AXAxisRotation</code>: <code>Double</code></p> <p><code>ALargeArcFlag</code>: <code>Boolean</code></p> <p><code>ASweepFlag</code>: <code>Boolean</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#EllipticArcTo_1","title":"EllipticArcTo(TBLPoint, Double, Boolean, Boolean, TBLPoint)","text":"<p>Adds an elliptic arc to the path that follows the SVG specification.</p> <p>Matches  SVG 'A' path command. </p> <p><code>procedure EllipticArcTo(const ARP: TBLPoint; const AXAxisRotation: Double; const ALargeArcFlag, ASweepFlag: Boolean; const AP1: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_105","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_105","title":"Parameters","text":"<p><code>ARP</code>: <code>TBLPoint</code></p> <p><code>AXAxisRotation</code>: <code>Double</code></p> <p><code>ALargeArcFlag</code>: <code>Boolean</code></p> <p><code>ASweepFlag</code>: <code>Boolean</code></p> <p><code>AP1</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Equals","title":"Equals(TBLPath)","text":"<p>Tests whether this path and the <code>AOther</code> path are equal.</p> <p>The equality check is deep. The data of both paths is examined and binary compared (thus a slight difference like -0 and +0 would make the equality check to fail). </p> <p><code>function Equals(const AOther: TBLPath): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_106","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#FitTo_0","title":"FitTo(TBLRange, TBLRect)","text":"<p>Fits a part of the path specified by the given <code>ARange</code> into the given <code>ARect</code>. </p> <p><code>procedure FitTo(const ARange: TBLRange; const ARect: TBLRect); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_106","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_107","title":"Parameters","text":"<p><code>ARange</code>: <code>TBLRange</code></p> <p><code>ARect</code>: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#FitTo_1","title":"FitTo(TBLRect)","text":"<p>Fits the whole path into the given <code>ARect</code>. </p> <p><code>procedure FitTo(const ARect: TBLRect); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_107","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_108","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#GetClosestVertex_0","title":"GetClosestVertex(TBLPoint, Double, Double)","text":"<p><code>function GetClosestVertex(const AP: TBLPoint; const AMaxDistance: Double; out ADistanceOut: Double): NativeInt; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_109","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p> <p><code>AMaxDistance</code>: <code>Double</code></p> <p><code>ADistanceOut</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#returns_5","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#GetClosestVertex_1","title":"GetClosestVertex(TBLPoint, Double)","text":"<p><code>function GetClosestVertex(const AP: TBLPoint; const AMaxDistance: Double): NativeInt; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_110","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p> <p><code>AMaxDistance</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#returns_6","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#HitTest","title":"HitTest(TBLPoint, TBLFillRule)","text":"<p>Hit tests the given point <code>AP</code> by respecting the given <code>AFillRule</code>. </p> <p><code>function HitTest(const AP: TBLPoint; const AFillRule: TBLFillRule): TBLHitTest; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_111","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p> <p><code>AFillRule</code>: <code>TBLFillRule</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#returns_7","title":"Returns","text":"<p><code>TBLHitTest</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#LineTo_0","title":"LineTo(Double, Double)","text":"<p>Adds line to <code>[AX1, AY1]</code>.</p> <p>Appends <code>TBLPathCmd.OnPath[AX1, AY1]</code> command to the path. </p> <p><code>procedure LineTo(const AX1, AY1: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_108","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_112","title":"Parameters","text":"<p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#LineTo_1","title":"LineTo(TBLPoint)","text":"<p>Adds line to <code>AP1</code>.</p> <p>Appends <code>TBLPathCmd.OnPath[AP1]</code> command to the path. </p> <p><code>procedure LineTo(const AP1: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_109","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_113","title":"Parameters","text":"<p><code>AP1</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#ModifyOp","title":"ModifyOp(TBLModifyOp, NativeInt, PByte, PBLPoint)","text":"<p><code>procedure ModifyOp(const AOp: TBLModifyOp; const ASize: NativeInt; out ACmdDataOut: PByte; out AVertexDataOut: PBLPoint); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_114","title":"Parameters","text":"<p><code>AOp</code>: <code>TBLModifyOp</code></p> <p><code>ASize</code>: <code>NativeInt</code></p> <p><code>ACmdDataOut</code>: <code>PByte</code></p> <p><code>AVertexDataOut</code>: <code>PBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#MoveTo_0","title":"MoveTo(Double, Double)","text":"<p>Moves to <code>[AX0, AY0]</code>.</p> <p>Appends <code>TBLPathCmd.Move[AX0, AY0]</code> command to the path. </p> <p><code>procedure MoveTo(const AX0, AY0: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_110","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_115","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#MoveTo_1","title":"MoveTo(TBLPoint)","text":"<p>Moves to <code>AP0</code>.</p> <p>Appends <code>TBLPathCmd.Move[AP0]</code> command to the path. </p> <p><code>procedure MoveTo(const AP0: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_111","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_116","title":"Parameters","text":"<p><code>AP0</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#PolyTo_0","title":"PolyTo(TArray&lt;TBLPoint&gt;)","text":"<p>Adds a polyline (LineTo) of the given <code>APoly</code> array.</p> <p>Appends multiple <code>TBLPathCmd.OnPath[AX[I], AY[I]]</code> commands to the path depending on the length of the <code>APoly</code> array. </p> <p><code>procedure PolyTo(const APoly: TArray&lt;TBLPoint&gt;); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_112","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_117","title":"Parameters","text":"<p><code>APoly</code>: <code>TArray&lt;TBLPoint&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#PolyTo_1","title":"PolyTo(PBLPoint, NativeInt)","text":"<p>Adds a polyline (LineTo) of the given <code>APoly</code> array of size <code>ACount</code>.</p> <p>Appends multiple <code>TBLPathCmd.OnPath[AX[I], AY[I]]</code> commands to the path depending on <code>ACount</code> parameter. </p> <p><code>procedure PolyTo(const APoly: PBLPoint; const ACount: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_113","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_118","title":"Parameters","text":"<p><code>APoly</code>: <code>PBLPoint</code></p> <p><code>ACount</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#QuadTo_0","title":"QuadTo(Double, Double, Double, Double)","text":"<p>Adds a quadratic curve to <code>[AX1, AY1]</code> and <code>[AX2, AY2]</code>.</p> <p>Appends the following commands to the path: - <code>TBLPathCmd.Quad[AX1, AY1]</code> - <code>TBLPathCmd.OnPath[AX2, AY2]</code></p> <p>Matches  SVG 'Q' path command. </p> <p><code>procedure QuadTo(const AX1, AY1, AX2, AY2: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_114","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_119","title":"Parameters","text":"<p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#QuadTo_1","title":"QuadTo(TBLPoint, TBLPoint)","text":"<p>Adds a quadratic curve to <code>AP1</code> and <code>AP2</code>.</p> <p>Appends the following commands to the path: - <code>TBLPathCmd.Quad[AP1]</code> - <code>TBLPathCmd.OnPath[AP2]</code></p> <p>Matches  SVG 'Q' path command. </p> <p><code>procedure QuadTo(const AP1, AP2: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_115","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_120","title":"Parameters","text":"<p><code>AP1</code>: <code>TBLPoint</code></p> <p><code>AP2</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#RemoveRange","title":"RemoveRange(TBLRange)","text":"<p><code>procedure RemoveRange(const ARange: TBLRange); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_121","title":"Parameters","text":"<p><code>ARange</code>: <code>TBLRange</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Reserve","title":"Reserve(NativeInt)","text":"<p>Reserves the capacity of the path for at least <code>AMinCapacity</code> vertices and commands. </p> <p><code>procedure Reserve(const AMinCapacity: NativeInt); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_116","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_122","title":"Parameters","text":"<p><code>AMinCapacity</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#SetVertexAt_0","title":"SetVertexAt(NativeInt, TBLPathCmd, Double, Double)","text":"<p>Sets vertex at <code>AIndex</code> to <code>ACmd</code> and <code>[AX, AY]</code>.</p> <p>Pass <code>TBLPathCmd.Preserve</code> in <code>ACmd</code> to preserve the current command. </p> <p><code>procedure SetVertexAt(const AIndex: NativeInt; const ACmd: TBLPathCmd; const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_117","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_123","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>ACmd</code>: <code>TBLPathCmd</code></p> <p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#SetVertexAt_1","title":"SetVertexAt(NativeInt, TBLPathCmd, TBLPoint)","text":"<p>Sets vertex at <code>AIndex</code> to <code>ACmd</code> and <code>APt</code>.</p> <p>Pass <code>TBLPathCmd.Preserve</code> in <code>ACmd</code> to preserve the current command. </p> <p><code>procedure SetVertexAt(const AIndex: NativeInt; const ACmd: TBLPathCmd; const APt: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_118","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_124","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>ACmd</code>: <code>TBLPathCmd</code></p> <p><code>APt</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Shrink","title":"Shrink","text":"<p>Shrinks the capacity of the path to fit the current usage. </p> <p><code>procedure Shrink; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_119","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#SmoothCubicTo_0","title":"SmoothCubicTo(Double, Double, Double, Double)","text":"<p>Adds a smooth cubic curve to <code>[AX2, AY2]</code> and <code>[AX3, AY3]</code>, calculating <code>[AX1, AY1]</code> from last points.</p> <p>Appends the following commands to the path: - <code>TBLPathCmd.Cubic[Calculated]</code> - <code>TBLPathCmd.Cubic[AX2, AY2]</code> - <code>TBLPathCmd.OnPath[AX3, AY3]</code></p> <p>Matches  SVG 'S' path command. </p> <p><code>procedure SmoothCubicTo(const AX2, AY2, AX3, AY3: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_120","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_125","title":"Parameters","text":"<p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p> <p><code>AX3</code>: <code>Double</code></p> <p><code>AY3</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#SmoothCubicTo_1","title":"SmoothCubicTo(TBLPoint, TBLPoint)","text":"<p>Adds a smooth cubic curve to <code>AP2</code> and <code>AP3</code>, calculating <code>AP1</code> from last points.</p> <p>Appends the following commands to the path: - <code>TBLPathCmd.Cubic[Calculated]</code> - <code>TBLPathCmd.Cubic[AP2]</code> - <code>TBLPathCmd.OnPath[AP3]</code></p> <p>Matches  SVG 'S' path command. </p> <p><code>procedure SmoothCubicTo(const AP2, AP3: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_121","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_126","title":"Parameters","text":"<p><code>AP2</code>: <code>TBLPoint</code></p> <p><code>AP3</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#SmoothQuadTo_0","title":"SmoothQuadTo(Double, Double)","text":"<p>Adds a smooth quadratic curve to <code>[AX2, AY2]</code>, calculating <code>[AX1, AY1]</code> from last points.</p> <p>Appends the following commands to the path: - <code>TBLPathCmd.Quad[Calculated]</code> - <code>TBLPathCmd.OnPath[AX2, AY2]</code></p> <p>Matches  SVG 'T' path command. </p> <p><code>procedure SmoothQuadTo(const AX2, AY2: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_122","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_127","title":"Parameters","text":"<p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#SmoothQuadTo_1","title":"SmoothQuadTo(TBLPoint)","text":"<p>Adds a smooth quadratic curve to <code>AP2</code>, calculating <code>AP1</code> from last points.</p> <p>Appends the following commands to the path: - <code>TBLPathCmd.Quad[Calculated]</code> - <code>TBLPathCmd.OnPath[AP2]</code></p> <p>Matches  SVG 'T' path command. </p> <p><code>procedure SmoothQuadTo(const AP2: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_123","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_128","title":"Parameters","text":"<p><code>AP2</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Swap","title":"Swap(TBLPath)","text":"<p><code>procedure Swap(var AOther: TBLPath); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_129","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Transform_0","title":"Transform(TBLRange, TBLMatrix2D)","text":"<p>Transforms a part of the path specified by the given <code>ARange</code> by matrix <code>AM</code>. </p> <p><code>procedure Transform(const ARange: TBLRange; const AM: TBLMatrix2D); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_124","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_130","title":"Parameters","text":"<p><code>ARange</code>: <code>TBLRange</code></p> <p><code>AM</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Transform_1","title":"Transform(TBLMatrix2D)","text":"<p>Transforms the whole path by matrix <code>AM</code>. </p> <p><code>procedure Transform(const AM: TBLMatrix2D); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_125","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_131","title":"Parameters","text":"<p><code>AM</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Translate_0","title":"Translate(TBLRange, TBLPoint)","text":"<p>Translates a part of the path specified by the given <code>ARange</code> by <code>AP</code>. </p> <p><code>procedure Translate(const ARange: TBLRange; const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_126","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_132","title":"Parameters","text":"<p><code>ARange</code>: <code>TBLRange</code></p> <p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#Translate_1","title":"Translate(TBLPoint)","text":"<p>Translates the whole path by <code>AP</code>. </p> <p><code>procedure Translate(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#exceptions_127","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPath/#parameters_133","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#View","title":"View","text":"<p>Returns a read-only path data as <code>TBLPathView</code>. </p> <p><code>function View: TBLPathView; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPath/#returns_8","title":"Returns","text":"<p><code>TBLPathView</code></p>"},{"location":"Reference/Blend2D/classes/TBLPathView/","title":"TBLPathView","text":"<p>2D vector path view provides pointers to vertex and command data along with their size. </p>"},{"location":"Reference/Blend2D/classes/TBLPathView/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPathView = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLPathView/#properties","title":"Properties","text":"Name Description CommandData Size VertexData"},{"location":"Reference/Blend2D/classes/TBLPathView/#methods","title":"Methods","text":"Name Description Reset(PByte, PBLPoint, NativeInt) Reset"},{"location":"Reference/Blend2D/classes/TBLPathView/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPathView/#CommandData","title":"CommandData","text":"<p><code>property CommandData: PByte read FCommandData</code></p> <p>Type: <code>PByte</code></p>"},{"location":"Reference/Blend2D/classes/TBLPathView/#Size","title":"Size","text":"<p><code>property Size: NativeInt read FSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLPathView/#VertexData","title":"VertexData","text":"<p><code>property VertexData: PBLPoint read FVertexData</code></p> <p>Type: <code>PBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPathView/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPathView/#Reset_0","title":"Reset(PByte, PBLPoint, NativeInt)","text":"<p><code>procedure Reset(const ACommandDataIn: PByte; const AVertexDataIn: PBLPoint; const ASizeIn: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPathView/#parameters","title":"Parameters","text":"<p><code>ACommandDataIn</code>: <code>PByte</code></p> <p><code>AVertexDataIn</code>: <code>PBLPoint</code></p> <p><code>ASizeIn</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLPathView/#Reset_1","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/","title":"TBLPattern","text":"<p>Pattern. </p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPattern = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLPattern/#properties","title":"Properties","text":"Name Description Area ExtendMode HasTransform Image Transform TransformKind"},{"location":"Reference/Blend2D/classes/TBLPattern/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor creates a weak copy of <code>ASrc</code>. Create(TBLImage, TBLRectI, TBLExtendMode, TBLMatrix2D) Create(TBLImage, TBLRectI, TBLExtendMode) Create(TBLImage, TBLExtendMode, TBLMatrix2D) Create(TBLImage, TBLExtendMode) Finalize Destroys the pattern. Initialize Creates a default constructed pattern."},{"location":"Reference/Blend2D/classes/TBLPattern/#operators","title":"Operators","text":"Name Description Equal Equality operator, performs the same operation as <code>ALeft.Equals(ARight)</code>. NotEqual Equality operator, performs the same operation as <code>not ALeft.Equals(ARight)</code>."},{"location":"Reference/Blend2D/classes/TBLPattern/#methods","title":"Methods","text":"Name Description ApplyTransform Equals Make(TBLImage, TBLRectI, TBLExtendMode, TBLMatrix2D) Make(TBLImage, TBLRectI, TBLExtendMode) Make(TBLImage, TBLExtendMode, TBLMatrix2D) Make(TBLImage, TBLExtendMode) PostRotate(Double, TBLPointI) PostRotate(Double, TBLPoint) PostRotate(Double, Double, Double) PostRotate(Double) PostScale(TBLPointI) PostScale(TBLPoint) PostScale(Double, Double) PostScale(Double) PostSkew(TBLPoint) PostSkew(Double, Double) PostTransform PostTranslate(TBLPointI) PostTranslate(TBLPoint) PostTranslate(Double, Double) Reset ResetArea Updates the pattern area rectangle to [0, 0, Image.Width, Image.Height]. ResetExtendMode ResetImage Resets pattern image to empty image and clears pattern area rectangle to [0, 0, 0, 0]. ResetTransform Rotate(Double, TBLPointI) Rotate(Double, TBLPoint) Rotate(Double, Double, Double) Rotate(Double) Scale(TBLPointI) Scale(TBLPoint) Scale(Double, Double) Scale(Double) SetImage Skew(TBLPoint) Skew(Double, Double) Swap Translate(TBLPointI) Translate(TBLPoint) Translate(Double, Double)"},{"location":"Reference/Blend2D/classes/TBLPattern/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPattern/#Area","title":"Area","text":"<p><code>property Area: TBLRectI read GetArea write SetArea</code></p> <p>Type: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#ExtendMode","title":"ExtendMode","text":"<p><code>property ExtendMode: TBLExtendMode read GetExtendMode write SetExtendMode</code></p> <p>Type: <code>TBLExtendMode</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#HasTransform","title":"HasTransform","text":"<p><code>property HasTransform: Boolean read GetHasTransform</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Image","title":"Image","text":"<p><code>property Image: TBLImage read GetImage write SetImage</code></p> <p>Type: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Transform","title":"Transform","text":"<p><code>property Transform: TBLMatrix2D read GetTransform write SetTransform</code></p> <p>Type: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#TransformKind","title":"TransformKind","text":"<p><code>property TransformKind: TBLTransformKind read GetTransformKind</code></p> <p>Type: <code>TBLTransformKind</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPattern/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor creates a weak copy of <code>ASrc</code>. </p> <p><code>constructor Assign(var ADest: TBLPattern; const ASrc: TBLPattern); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLPattern</code></p> <p><code>ASrc</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Create_0","title":"<code>Create</code>","text":"<p><code>constructor Create(const AImage: TBLImage; const AArea: TBLRectI; const AExtendMode: TBLExtendMode; const ATransform: TBLMatrix2D); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_1","title":"Parameters","text":"<p><code>AImage</code>: <code>TBLImage</code></p> <p><code>AArea</code>: <code>TBLRectI</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Create_1","title":"<code>Create</code>","text":"<p><code>constructor Create(const AImage: TBLImage; const AArea: TBLRectI; const AExtendMode: TBLExtendMode = TBLExtendMode.Repeating); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_2","title":"Parameters","text":"<p><code>AImage</code>: <code>TBLImage</code></p> <p><code>AArea</code>: <code>TBLRectI</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode = TBLExtendMode.Repeating</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Create_2","title":"<code>Create</code>","text":"<p><code>constructor Create(const AImage: TBLImage; const AExtendMode: TBLExtendMode; const ATransform: TBLMatrix2D); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_3","title":"Parameters","text":"<p><code>AImage</code>: <code>TBLImage</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Create_3","title":"<code>Create</code>","text":"<p><code>constructor Create(const AImage: TBLImage; const AExtendMode: TBLExtendMode = TBLExtendMode.Repeating); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_4","title":"Parameters","text":"<p><code>AImage</code>: <code>TBLImage</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode = TBLExtendMode.Repeating</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the pattern. </p> <p><code>destructor Finalize(var ADest: TBLPattern)</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_5","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default constructed pattern. </p> <p><code>constructor Initialize(out ADest: TBLPattern)</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_6","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPattern/#Equal","title":"Equal(TBLPattern, TBLPattern)","text":"<p>Equality operator, performs the same operation as <code>ALeft.Equals(ARight)</code>. </p> <p><code>class operator Equal(const ALeft, ARight: TBLPattern): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_7","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPattern</code></p> <p><code>ARight</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#NotEqual","title":"NotEqual(TBLPattern, TBLPattern)","text":"<p>Equality operator, performs the same operation as <code>not ALeft.Equals(ARight)</code>. </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLPattern): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_8","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPattern</code></p> <p><code>ARight</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPattern/#ApplyTransform","title":"ApplyTransform(TBLMatrix2D)","text":"<p><code>procedure ApplyTransform(const ATransform: TBLMatrix2D); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_9","title":"Parameters","text":"<p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Equals","title":"Equals(TBLPattern)","text":"<p><code>function Equals(const AOther: TBLPattern): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_10","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Make_0","title":"Make(TBLImage, TBLRectI, TBLExtendMode, TBLMatrix2D)","text":"<p><code>procedure Make(const AImage: TBLImage; const AArea: TBLRectI; const AExtendMode: TBLExtendMode; const ATransform: TBLMatrix2D); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_11","title":"Parameters","text":"<p><code>AImage</code>: <code>TBLImage</code></p> <p><code>AArea</code>: <code>TBLRectI</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Make_1","title":"Make(TBLImage, TBLRectI, TBLExtendMode)","text":"<p><code>procedure Make(const AImage: TBLImage; const AArea: TBLRectI; const AExtendMode: TBLExtendMode = TBLExtendMode.Repeating); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_12","title":"Parameters","text":"<p><code>AImage</code>: <code>TBLImage</code></p> <p><code>AArea</code>: <code>TBLRectI</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode = TBLExtendMode.Repeating</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Make_2","title":"Make(TBLImage, TBLExtendMode, TBLMatrix2D)","text":"<p><code>procedure Make(const AImage: TBLImage; const AExtendMode: TBLExtendMode; const ATransform: TBLMatrix2D); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_13","title":"Parameters","text":"<p><code>AImage</code>: <code>TBLImage</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode</code></p> <p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Make_3","title":"Make(TBLImage, TBLExtendMode)","text":"<p><code>procedure Make(const AImage: TBLImage; const AExtendMode: TBLExtendMode = TBLExtendMode.Repeating); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_14","title":"Parameters","text":"<p><code>AImage</code>: <code>TBLImage</code></p> <p><code>AExtendMode</code>: <code>TBLExtendMode = TBLExtendMode.Repeating</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostRotate_0","title":"PostRotate(Double, TBLPointI)","text":"<p><code>procedure PostRotate(const AAngle: Double; const AOrigin: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_15","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostRotate_1","title":"PostRotate(Double, TBLPoint)","text":"<p><code>procedure PostRotate(const AAngle: Double; const AOrigin: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_16","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostRotate_2","title":"PostRotate(Double, Double, Double)","text":"<p><code>procedure PostRotate(const AAngle, AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_17","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostRotate_3","title":"PostRotate(Double)","text":"<p><code>procedure PostRotate(const AAngle: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_18","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostScale_0","title":"PostScale(TBLPointI)","text":"<p><code>procedure PostScale(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_19","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostScale_1","title":"PostScale(TBLPoint)","text":"<p><code>procedure PostScale(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_20","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostScale_2","title":"PostScale(Double, Double)","text":"<p><code>procedure PostScale(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_21","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostScale_3","title":"PostScale(Double)","text":"<p><code>procedure PostScale(const AXY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_22","title":"Parameters","text":"<p><code>AXY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostSkew_0","title":"PostSkew(TBLPoint)","text":"<p><code>procedure PostSkew(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_23","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostSkew_1","title":"PostSkew(Double, Double)","text":"<p><code>procedure PostSkew(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_24","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostTransform","title":"PostTransform(TBLMatrix2D)","text":"<p><code>procedure PostTransform(const ATransform: TBLMatrix2D); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_25","title":"Parameters","text":"<p><code>ATransform</code>: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostTranslate_0","title":"PostTranslate(TBLPointI)","text":"<p><code>procedure PostTranslate(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_26","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostTranslate_1","title":"PostTranslate(TBLPoint)","text":"<p><code>procedure PostTranslate(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_27","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#PostTranslate_2","title":"PostTranslate(Double, Double)","text":"<p><code>procedure PostTranslate(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_28","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#ResetArea","title":"ResetArea","text":"<p>Updates the pattern area rectangle to [0, 0, Image.Width, Image.Height]. </p> <p><code>procedure ResetArea; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#ResetExtendMode","title":"ResetExtendMode","text":"<p><code>procedure ResetExtendMode; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#ResetImage","title":"ResetImage","text":"<p>Resets pattern image to empty image and clears pattern area rectangle to [0, 0, 0, 0]. </p> <p><code>procedure ResetImage; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#ResetTransform","title":"ResetTransform","text":"<p><code>procedure ResetTransform; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Rotate_0","title":"Rotate(Double, TBLPointI)","text":"<p><code>procedure Rotate(const AAngle: Double; const AOrigin: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_29","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Rotate_1","title":"Rotate(Double, TBLPoint)","text":"<p><code>procedure Rotate(const AAngle: Double; const AOrigin: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_30","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AOrigin</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Rotate_2","title":"Rotate(Double, Double, Double)","text":"<p><code>procedure Rotate(const AAngle, AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_31","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p> <p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Rotate_3","title":"Rotate(Double)","text":"<p><code>procedure Rotate(const AAngle: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_32","title":"Parameters","text":"<p><code>AAngle</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Scale_0","title":"Scale(TBLPointI)","text":"<p><code>procedure Scale(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_33","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Scale_1","title":"Scale(TBLPoint)","text":"<p><code>procedure Scale(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_34","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Scale_2","title":"Scale(Double, Double)","text":"<p><code>procedure Scale(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_35","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Scale_3","title":"Scale(Double)","text":"<p><code>procedure Scale(const AXY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_36","title":"Parameters","text":"<p><code>AXY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#SetImage","title":"SetImage(TBLImage, TBLRectI)","text":"<p><code>procedure SetImage(const AValue: TBLImage; const AArea: TBLRectI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_37","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLImage</code></p> <p><code>AArea</code>: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Skew_0","title":"Skew(TBLPoint)","text":"<p><code>procedure Skew(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_38","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Skew_1","title":"Skew(Double, Double)","text":"<p><code>procedure Skew(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_39","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Swap","title":"Swap(TBLPattern)","text":"<p><code>procedure Swap(var AOther: TBLPattern); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_40","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Translate_0","title":"Translate(TBLPointI)","text":"<p><code>procedure Translate(const AP: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_41","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Translate_1","title":"Translate(TBLPoint)","text":"<p><code>procedure Translate(const AP: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_42","title":"Parameters","text":"<p><code>AP</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#Translate_2","title":"Translate(Double, Double)","text":"<p><code>procedure Translate(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPattern/#parameters_43","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/","title":"TBLPixelConverter","text":"<p>Pixel converter.</p> <p>Provides an interface to convert pixels between various pixel formats. The primary purpose of this record is to allow efficient conversion between pixel formats used natively by Blend2D and pixel formats used elsewhere, for example image codecs or native framebuffers. </p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPixelConverter = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#remarks","title":"Remarks","text":"<p>A default-initialized converter has a valid conversion function that would return fail if invoked. Use <code>IsInitialized</code> to test whether the pixel converter was properly initialized. </p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#properties","title":"Properties","text":"Name Description IsInitialized Whether if the converter is initialized."},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#constructors","title":"Constructors","text":"Name Description Assign Creates a copy of the <code>AOther</code> converter. Finalize Destroys the pixel-converter and releases all resources allocated by it. Initialize Creates a new default-initialized pixel converter."},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#methods","title":"Methods","text":"Name Description ConvertRect(Pointer, NativeInt, Pointer, NativeInt, Integer, Integer, TBLPixelConverterOptions) Converts a rectangular area of pixels from source format to destination. ConvertRect(Pointer, NativeInt, Pointer, NativeInt, Integer, Integer) Converts a rectangular area of pixels from source format to destination. ConvertSpan(Pointer, Pointer, Integer, TBLPixelConverterOptions) Converts a single span of pixels of <code>AWidth</code>. ConvertSpan(Pointer, Pointer, Integer) Converts a single span of pixels of <code>AWidth</code>. Make Creates a new pixel converter that will convert pixels described by MakePlatformConverter Creates a pixel converter appropriate for the current platform. This is useful for platforms where the display format does not match the internal Blend2D format. For example, on macOS, iOS and Android, the red and blue color channels need to be swapped. On Windows, Blend2D's internal format matches the display format and no conversion is needed. Reset Reset the pixel converter."},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#IsInitialized","title":"IsInitialized","text":"<p>Whether if the converter is initialized. </p> <p><code>property IsInitialized: Boolean read GetIsInitialized</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#Assign","title":"<code>Assign</code>","text":"<p>Creates a copy of the <code>AOther</code> converter.</p> <p>If the <code>AOther</code> converter has dynamically allocated resources they will be properly managed (reference counting). Only very specific converters require such resources so this operation should be considered very cheap. </p> <p><code>constructor Assign(var ADest: TBLPixelConverter; const ASrc: TBLPixelConverter); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLPixelConverter</code></p> <p><code>ASrc</code>: <code>TBLPixelConverter</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the pixel-converter and releases all resources allocated by it. </p> <p><code>destructor Finalize(var ADest: TBLPixelConverter)</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLPixelConverter</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a new default-initialized pixel converter. </p> <p><code>constructor Initialize(out ADest: TBLPixelConverter)</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLPixelConverter</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#ConvertRect_0","title":"ConvertRect(Pointer, NativeInt, Pointer, NativeInt, Integer, Integer, TBLPixelConverterOptions)","text":"<p>Converts a rectangular area of pixels from source format to destination. </p> <p><code>procedure ConvertRect(const ADstData: Pointer; const ADstStride: NativeInt; const ASrcData: Pointer; const ASrcStride: NativeInt; const AWidth, AHeight: Integer; const AOptions: TBLPixelConverterOptions); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#parameters_3","title":"Parameters","text":"<p><code>ADstData</code>: <code>Pointer</code></p> <p><code>ADstStride</code>: <code>NativeInt</code></p> <p><code>ASrcData</code>: <code>Pointer</code></p> <p><code>ASrcStride</code>: <code>NativeInt</code></p> <p><code>AWidth</code>: <code>Integer</code></p> <p><code>AHeight</code>: <code>Integer</code></p> <p><code>AOptions</code>: <code>TBLPixelConverterOptions</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#ConvertRect_1","title":"ConvertRect(Pointer, NativeInt, Pointer, NativeInt, Integer, Integer)","text":"<p>Converts a rectangular area of pixels from source format to destination. </p> <p><code>procedure ConvertRect(const ADstData: Pointer; const ADstStride: NativeInt; const ASrcData: Pointer; const ASrcStride: NativeInt; const AWidth, AHeight: Integer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#parameters_4","title":"Parameters","text":"<p><code>ADstData</code>: <code>Pointer</code></p> <p><code>ADstStride</code>: <code>NativeInt</code></p> <p><code>ASrcData</code>: <code>Pointer</code></p> <p><code>ASrcStride</code>: <code>NativeInt</code></p> <p><code>AWidth</code>: <code>Integer</code></p> <p><code>AHeight</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#ConvertSpan_0","title":"ConvertSpan(Pointer, Pointer, Integer, TBLPixelConverterOptions)","text":"<p>Converts a single span of pixels of <code>AWidth</code>. </p> <p><code>procedure ConvertSpan(const ADstData, ASrcData: Pointer; const AWidth: Integer; const AOptions: TBLPixelConverterOptions); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#parameters_5","title":"Parameters","text":"<p><code>ADstData</code>: <code>Pointer</code></p> <p><code>ASrcData</code>: <code>Pointer</code></p> <p><code>AWidth</code>: <code>Integer</code></p> <p><code>AOptions</code>: <code>TBLPixelConverterOptions</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#ConvertSpan_1","title":"ConvertSpan(Pointer, Pointer, Integer)","text":"<p>Converts a single span of pixels of <code>AWidth</code>. </p> <p><code>procedure ConvertSpan(const ADstData, ASrcData: Pointer; const AWidth: Integer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#parameters_6","title":"Parameters","text":"<p><code>ADstData</code>: <code>Pointer</code></p> <p><code>ASrcData</code>: <code>Pointer</code></p> <p><code>AWidth</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#Make","title":"Make(TBLFormatInfo, TBLFormatInfo, TBLPixelConverterCreateFlags)","text":"<p>Creates a new pixel converter that will convert pixels described by</p> <p>Use <code>ACreateFlags</code> to further specify the parameters of the conversion. </p> <p><code>procedure Make(const ADstInfo, ASrcInfo: TBLFormatInfo; const ACreateFlags: TBLPixelConverterCreateFlags = []); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#parameters_7","title":"Parameters","text":"<p><code>ADstInfo</code>: <code>TBLFormatInfo</code></p> <p><code>ASrcInfo</code>: <code>TBLFormatInfo</code></p> <p><code>ACreateFlags</code>: <code>TBLPixelConverterCreateFlags = []</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#remarks_1","title":"Remarks","text":"<p>Destination and source format informattion must be valid, otherwise this method will fail. </p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#MakePlatformConverter","title":"MakePlatformConverter(TBLFormat)","text":"<p>Creates a pixel converter appropriate for the current platform. This is useful for platforms where the display format does not match the internal Blend2D format. For example, on macOS, iOS and Android, the red and blue color channels need to be swapped. On Windows, Blend2D's internal format matches the display format and no conversion is needed.</p> <p>On Windows, it returns a converter that doesn't convert, but just copies the data. However, it is more efficient to not use a pixel converter at all on Windows.</p> <p>On other platforms, it creates a converter that swaps Red and Blue in the given AFormat. </p> <p><code>procedure MakePlatformConverter(const AFormat: TBLFormat)</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#parameters_8","title":"Parameters","text":"<p><code>AFormat</code>: <code>TBLFormat</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#Reset","title":"Reset","text":"<p>Reset the pixel converter. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverter/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverterOptions/","title":"TBLPixelConverterOptions","text":"<p>Pixel conversion options. </p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverterOptions/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPixelConverterOptions = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLPixelConverterOptions/#fields","title":"Fields","text":"Name Description Gap Origin"},{"location":"Reference/Blend2D/classes/TBLPixelConverterOptions/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPixelConverterOptions/#Gap","title":"Gap","text":"<p><code>var Gap: NativeInt</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLPixelConverterOptions/#Origin","title":"Origin","text":"<p><code>var Origin: TBLPointI</code></p> <p>Type: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/","title":"TBLPoint","text":"<p>Point specified as [X, Y] using <code>Double</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPoint = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLPoint/#fields","title":"Fields","text":"Name Description X Y"},{"location":"Reference/Blend2D/classes/TBLPoint/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLPoint/#operators","title":"Operators","text":"Name Description Add(TBLPoint, TBLPoint) Add(Double, TBLPoint) Add(TBLPoint, Double) Divide(TBLPoint, TBLPoint) Divide(Double, TBLPoint) Divide(TBLPoint, Double) Equal Multiply(TBLPoint, TBLPoint) Multiply(Double, TBLPoint) Multiply(TBLPoint, Double) Negative NotEqual Subtract(TBLPoint, TBLPoint) Subtract(Double, TBLPoint) Subtract(TBLPoint, Double)"},{"location":"Reference/Blend2D/classes/TBLPoint/#methods","title":"Methods","text":"Name Description Equals Reset(TBLPoint) Reset(Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLPoint/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPoint/#X","title":"X","text":"<p><code>var X: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Y","title":"Y","text":"<p><code>var Y: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPoint/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX, AY: Double)</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPoint/#Add_0","title":"Add(TBLPoint, TBLPoint)","text":"<p><code>class operator Add(const ALeft, ARight: TBLPoint): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Add_1","title":"Add(Double, TBLPoint)","text":"<p><code>class operator Add(const ALeft: Double; const ARight: TBLPoint): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>Double</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_1","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Add_2","title":"Add(TBLPoint, Double)","text":"<p><code>class operator Add(const ALeft: TBLPoint; const ARight: Double): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_2","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Divide_0","title":"Divide(TBLPoint, TBLPoint)","text":"<p><code>class operator Divide(const ALeft, ARight: TBLPoint): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_3","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Divide_1","title":"Divide(Double, TBLPoint)","text":"<p><code>class operator Divide(const ALeft: Double; const ARight: TBLPoint): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>Double</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_4","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Divide_2","title":"Divide(TBLPoint, Double)","text":"<p><code>class operator Divide(const ALeft: TBLPoint; const ARight: Double): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_5","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Equal","title":"Equal(TBLPoint, TBLPoint)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLPoint): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_7","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_6","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Multiply_0","title":"Multiply(TBLPoint, TBLPoint)","text":"<p><code>class operator Multiply(const ALeft, ARight: TBLPoint): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_8","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_7","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Multiply_1","title":"Multiply(Double, TBLPoint)","text":"<p><code>class operator Multiply(const ALeft: Double; const ARight: TBLPoint): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_9","title":"Parameters","text":"<p><code>ALeft</code>: <code>Double</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_8","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Multiply_2","title":"Multiply(TBLPoint, Double)","text":"<p><code>class operator Multiply(const ALeft: TBLPoint; const ARight: Double): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_10","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_9","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Negative","title":"Negative(TBLPoint)","text":"<p><code>class operator Negative(const AValue: TBLPoint): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_11","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_10","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#NotEqual","title":"NotEqual(TBLPoint, TBLPoint)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLPoint): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_12","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_11","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Subtract_0","title":"Subtract(TBLPoint, TBLPoint)","text":"<p><code>class operator Subtract(const ALeft, ARight: TBLPoint): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_13","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_12","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Subtract_1","title":"Subtract(Double, TBLPoint)","text":"<p><code>class operator Subtract(const ALeft: Double; const ARight: TBLPoint): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_14","title":"Parameters","text":"<p><code>ALeft</code>: <code>Double</code></p> <p><code>ARight</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_13","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Subtract_2","title":"Subtract(TBLPoint, Double)","text":"<p><code>class operator Subtract(const ALeft: TBLPoint; const ARight: Double): TBLPoint; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_15","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPoint</code></p> <p><code>ARight</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_14","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPoint/#Equals","title":"Equals(TBLPoint)","text":"<p><code>function Equals(const AOther: TBLPoint): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_16","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#returns_15","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Reset_0","title":"Reset(TBLPoint)","text":"<p><code>procedure Reset(const AOther: TBLPoint); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_17","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Reset_1","title":"Reset(Double, Double)","text":"<p><code>procedure Reset(const AX, AY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#parameters_18","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLPoint/#Reset_2","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/","title":"TBLPointI","text":"<p>Point specified as [X, Y] using <code>Integer</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPointI = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLPointI/#fields","title":"Fields","text":"Name Description X Y"},{"location":"Reference/Blend2D/classes/TBLPointI/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLPointI/#operators","title":"Operators","text":"Name Description Add(TBLPointI, TBLPointI) Add(Integer, TBLPointI) Add(TBLPointI, Integer) Equal Multiply(TBLPointI, TBLPointI) Multiply(Integer, TBLPointI) Multiply(TBLPointI, Integer) Negative NotEqual Subtract(TBLPointI, TBLPointI) Subtract(Integer, TBLPointI) Subtract(TBLPointI, Integer)"},{"location":"Reference/Blend2D/classes/TBLPointI/#methods","title":"Methods","text":"Name Description Equals Reset(TBLPointI) Reset(Integer, Integer) Reset"},{"location":"Reference/Blend2D/classes/TBLPointI/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPointI/#X","title":"X","text":"<p><code>var X: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Y","title":"Y","text":"<p><code>var Y: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPointI/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX, AY: Integer)</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters","title":"Parameters","text":"<p><code>AX</code>: <code>Integer</code></p> <p><code>AY</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPointI/#Add_0","title":"Add(TBLPointI, TBLPointI)","text":"<p><code>class operator Add(const ALeft, ARight: TBLPointI): TBLPointI; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPointI</code></p> <p><code>ARight</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns","title":"Returns","text":"<p><code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Add_1","title":"Add(Integer, TBLPointI)","text":"<p><code>class operator Add(const ALeft: Integer; const ARight: TBLPointI): TBLPointI; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>Integer</code></p> <p><code>ARight</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns_1","title":"Returns","text":"<p><code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Add_2","title":"Add(TBLPointI, Integer)","text":"<p><code>class operator Add(const ALeft: TBLPointI; const ARight: Integer): TBLPointI; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPointI</code></p> <p><code>ARight</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns_2","title":"Returns","text":"<p><code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Equal","title":"Equal(TBLPointI, TBLPointI)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLPointI): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPointI</code></p> <p><code>ARight</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Multiply_0","title":"Multiply(TBLPointI, TBLPointI)","text":"<p><code>class operator Multiply(const ALeft, ARight: TBLPointI): TBLPointI; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPointI</code></p> <p><code>ARight</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns_4","title":"Returns","text":"<p><code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Multiply_1","title":"Multiply(Integer, TBLPointI)","text":"<p><code>class operator Multiply(const ALeft: Integer; const ARight: TBLPointI): TBLPointI; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>Integer</code></p> <p><code>ARight</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns_5","title":"Returns","text":"<p><code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Multiply_2","title":"Multiply(TBLPointI, Integer)","text":"<p><code>class operator Multiply(const ALeft: TBLPointI; const ARight: Integer): TBLPointI; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_7","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPointI</code></p> <p><code>ARight</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns_6","title":"Returns","text":"<p><code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Negative","title":"Negative(TBLPointI)","text":"<p><code>class operator Negative(const AValue: TBLPointI): TBLPointI; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_8","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns_7","title":"Returns","text":"<p><code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#NotEqual","title":"NotEqual(TBLPointI, TBLPointI)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLPointI): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_9","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPointI</code></p> <p><code>ARight</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns_8","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Subtract_0","title":"Subtract(TBLPointI, TBLPointI)","text":"<p><code>class operator Subtract(const ALeft, ARight: TBLPointI): TBLPointI; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_10","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPointI</code></p> <p><code>ARight</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns_9","title":"Returns","text":"<p><code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Subtract_1","title":"Subtract(Integer, TBLPointI)","text":"<p><code>class operator Subtract(const ALeft: Integer; const ARight: TBLPointI): TBLPointI; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_11","title":"Parameters","text":"<p><code>ALeft</code>: <code>Integer</code></p> <p><code>ARight</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns_10","title":"Returns","text":"<p><code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Subtract_2","title":"Subtract(TBLPointI, Integer)","text":"<p><code>class operator Subtract(const ALeft: TBLPointI; const ARight: Integer): TBLPointI; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_12","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLPointI</code></p> <p><code>ARight</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns_11","title":"Returns","text":"<p><code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLPointI/#Equals","title":"Equals(TBLPointI)","text":"<p><code>function Equals(const AOther: TBLPointI): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_13","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#returns_12","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Reset_0","title":"Reset(TBLPointI)","text":"<p><code>procedure Reset(const AOther: TBLPointI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_14","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Reset_1","title":"Reset(Integer, Integer)","text":"<p><code>procedure Reset(const AX, AY: Integer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#parameters_15","title":"Parameters","text":"<p><code>AX</code>: <code>Integer</code></p> <p><code>AY</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLPointI/#Reset_2","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/","title":"TBLRadialGradientValues","text":"<p>Radial gradient values packed into a structure. </p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRadialGradientValues = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#fields","title":"Fields","text":"Name Description R0 R1 X0 X1 Y0 Y1"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#methods","title":"Methods","text":"Name Description Create Reset(Double, Double, Double, Double, Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#R0","title":"R0","text":"<p><code>var R0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#R1","title":"R1","text":"<p><code>var R1: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#X0","title":"X0","text":"<p><code>var X0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#X1","title":"X1","text":"<p><code>var X1: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#Y0","title":"Y0","text":"<p><code>var Y0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#Y1","title":"Y1","text":"<p><code>var Y1: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX0, AY0, AX1, AY1, AR0: Double; const AR1: Double = 0); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AR0</code>: <code>Double</code></p> <p><code>AR1</code>: <code>Double = 0</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#Create","title":"Create","text":"<p><code>class function Create: TBLRadialGradientValues; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#returns","title":"Returns","text":"<p><code>TBLRadialGradientValues</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#Reset_0","title":"Reset(Double, Double, Double, Double, Double, Double)","text":"<p><code>procedure Reset(const AX0, AY0, AX1, AY1, AR0: Double; const AR1: Double = 0); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#parameters_1","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AR0</code>: <code>Double</code></p> <p><code>AR1</code>: <code>Double = 0</code></p>"},{"location":"Reference/Blend2D/classes/TBLRadialGradientValues/#Reset_1","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/","title":"TBLRandom","text":"<p>Simple pseudo random number generator based on <code>XORSHIFT+</code>, which has 64-bit seed, 128 bits of state, and full period <code>2^128 - 1</code>.</p> <p>Based on a paper by Sebastiano Vigna:  XORSHIFT+. </p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRandom = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRandom/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLRandom/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLRandom/#methods","title":"Methods","text":"Name Description Create Equals Tests whether the random number generator is equivalent to <code>Ather</code>. NextDouble Returns the next pseudo-random <code>Double</code> precision floating point in [0..1) range and advances PRNG state. NextUInt32 Returns the next pseudo-random <code>UInt32</code> value and advances PRNG state. NextUInt64 Returns the next pseudo-random <code>UInt64</code> value and advances PRNG state. Reset Resets the random number generator to the given <code>ASeed</code>."},{"location":"Reference/Blend2D/classes/TBLRandom/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRandom/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const ASeed: UInt64); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#parameters","title":"Parameters","text":"<p><code>ASeed</code>: <code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRandom/#Equal","title":"Equal(TBLRandom, TBLRandom)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLRandom): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRandom</code></p> <p><code>ARight</code>: <code>TBLRandom</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#NotEqual","title":"NotEqual(TBLRandom, TBLRandom)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLRandom): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRandom</code></p> <p><code>ARight</code>: <code>TBLRandom</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRandom/#Create","title":"Create","text":"<p><code>class function Create: TBLRandom; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#returns_2","title":"Returns","text":"<p><code>TBLRandom</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#Equals","title":"Equals(TBLRandom)","text":"<p>Tests whether the random number generator is equivalent to <code>Ather</code>. </p> <p><code>function Equals(const AOther: TBLRandom): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#parameters_3","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRandom</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#remarks","title":"Remarks","text":"<p>It would return True only when its internal state matches <code>AOther</code>'s internal state. </p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#NextDouble","title":"NextDouble","text":"<p>Returns the next pseudo-random <code>Double</code> precision floating point in [0..1) range and advances PRNG state. </p> <p><code>function NextDouble: Double; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#returns_4","title":"Returns","text":"<p><code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#NextUInt32","title":"NextUInt32","text":"<p>Returns the next pseudo-random <code>UInt32</code> value and advances PRNG state. </p> <p><code>function NextUInt32: UInt32; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#returns_5","title":"Returns","text":"<p><code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#NextUInt64","title":"NextUInt64","text":"<p>Returns the next pseudo-random <code>UInt64</code> value and advances PRNG state. </p> <p><code>function NextUInt64: UInt64; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#returns_6","title":"Returns","text":"<p><code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#Reset","title":"Reset(UInt64)","text":"<p>Resets the random number generator to the given <code>ASeed</code>. </p> <p><code>procedure Reset(const ASeed: UInt64 = 0)</code></p>"},{"location":"Reference/Blend2D/classes/TBLRandom/#parameters_4","title":"Parameters","text":"<p><code>ASeed</code>: <code>UInt64 = 0</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/","title":"TBLRange","text":"<p>Provides start and end indexes. It has the same semantics as Slices in other programming languages - range is always within [Start, Stop) internal (Start is inclusive, Stop is exclusive). It's used to specify a range of an operation of indexed containers like TBLString, TBLArray, TBLGradient, TBLPath, etc... </p>"},{"location":"Reference/Blend2D/classes/TBLRange/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRange = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRange/#fields","title":"Fields","text":"Name Description Start Stop"},{"location":"Reference/Blend2D/classes/TBLRange/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLRange/#methods","title":"Methods","text":"Name Description Equals Reset(NativeInt, NativeInt) Reset the range to [AStart, AStop). Reset Reset the range to [0, 0)."},{"location":"Reference/Blend2D/classes/TBLRange/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRange/#Start","title":"Start","text":"<p><code>var Start: NativeInt</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#Stop","title":"Stop","text":"<p><code>var Stop: NativeInt</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRange/#Equal","title":"Equal(TBLRange, TBLRange)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLRange): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#parameters","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRange</code></p> <p><code>ARight</code>: <code>TBLRange</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#NotEqual","title":"NotEqual(TBLRange, TBLRange)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLRange): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRange</code></p> <p><code>ARight</code>: <code>TBLRange</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRange/#Equals","title":"Equals(TBLRange)","text":"<p><code>function Equals(const AOther: TBLRange): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#parameters_2","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRange</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#Reset_0","title":"Reset(NativeInt, NativeInt)","text":"<p>Reset the range to [AStart, AStop). </p> <p><code>procedure Reset(const AStart, AStop: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#parameters_3","title":"Parameters","text":"<p><code>AStart</code>: <code>NativeInt</code></p> <p><code>AStop</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLRange/#Reset_1","title":"Reset","text":"<p>Reset the range to [0, 0). </p> <p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/","title":"TBLRect","text":"<p>Rectangle specified as [X, Y, W, H] using <code>Double</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLRect/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRect = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRect/#fields","title":"Fields","text":"Name Description H W X Y"},{"location":"Reference/Blend2D/classes/TBLRect/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLRect/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLRect/#methods","title":"Methods","text":"Name Description Equals Reset(TBLRect) Reset(Double, Double, Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLRect/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRect/#H","title":"H","text":"<p><code>var H: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#W","title":"W","text":"<p><code>var W: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#X","title":"X","text":"<p><code>var X: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#Y","title":"Y","text":"<p><code>var Y: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRect/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX, AY, AW, AH: Double)</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#parameters","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRect/#Equal","title":"Equal(TBLRect, TBLRect)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLRect): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRect</code></p> <p><code>ARight</code>: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#NotEqual","title":"NotEqual(TBLRect, TBLRect)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLRect): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRect</code></p> <p><code>ARight</code>: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRect/#Equals","title":"Equals(TBLRect)","text":"<p><code>function Equals(const AOther: TBLRect): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#parameters_3","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#Reset_0","title":"Reset(TBLRect)","text":"<p><code>procedure Reset(const AOther: TBLRect); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#parameters_4","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#Reset_1","title":"Reset(Double, Double, Double, Double)","text":"<p><code>procedure Reset(const AX, AY, AW, AH: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#parameters_5","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRect/#Reset_2","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/","title":"TBLRectI","text":"<p>Rectangle specified as [X, Y, W, H] using <code>Integer</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRectI = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRectI/#fields","title":"Fields","text":"Name Description H W X Y"},{"location":"Reference/Blend2D/classes/TBLRectI/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLRectI/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLRectI/#methods","title":"Methods","text":"Name Description Equals Reset(TBLRectI) Reset(Integer, Integer, Integer, Integer) Reset"},{"location":"Reference/Blend2D/classes/TBLRectI/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRectI/#H","title":"H","text":"<p><code>var H: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#W","title":"W","text":"<p><code>var W: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#X","title":"X","text":"<p><code>var X: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#Y","title":"Y","text":"<p><code>var Y: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRectI/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX, AY, AW, AH: Integer)</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#parameters","title":"Parameters","text":"<p><code>AX</code>: <code>Integer</code></p> <p><code>AY</code>: <code>Integer</code></p> <p><code>AW</code>: <code>Integer</code></p> <p><code>AH</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRectI/#Equal","title":"Equal(TBLRectI, TBLRectI)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLRectI): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRectI</code></p> <p><code>ARight</code>: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#NotEqual","title":"NotEqual(TBLRectI, TBLRectI)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLRectI): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRectI</code></p> <p><code>ARight</code>: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRectI/#Equals","title":"Equals(TBLRectI)","text":"<p><code>function Equals(const AOther: TBLRectI): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#parameters_3","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#Reset_0","title":"Reset(TBLRectI)","text":"<p><code>procedure Reset(const AOther: TBLRectI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#parameters_4","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#Reset_1","title":"Reset(Integer, Integer, Integer, Integer)","text":"<p><code>procedure Reset(const AX, AY, AW, AH: Integer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#parameters_5","title":"Parameters","text":"<p><code>AX</code>: <code>Integer</code></p> <p><code>AY</code>: <code>Integer</code></p> <p><code>AW</code>: <code>Integer</code></p> <p><code>AH</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRectI/#Reset_2","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/","title":"TBLRgba","text":"<p>128-bit RGBA color stored as 4 32-bit floating point values in [RGBA] order. This record is compatible with Delphi's <code>TAlphaColorF</code> and can be typecase to and from it. </p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRgba = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRgba/#fields","title":"Fields","text":"Name Description A Alpha component. B Blur component. G Green component. R Red component."},{"location":"Reference/Blend2D/classes/TBLRgba/#properties","title":"Properties","text":"Name Description IsOpaque Whether the color is fully opaque (alpha equals 1.0). IsTransparent Whether the color is fully transparent (alpha equals 0.0)."},{"location":"Reference/Blend2D/classes/TBLRgba/#constructors","title":"Constructors","text":"Name Description Create(TAlphaColorF) Create(TBLRgba64) Create(TBLRgba32) Create(Single, Single, Single, Single)"},{"location":"Reference/Blend2D/classes/TBLRgba/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLRgba/#methods","title":"Methods","text":"Name Description Create Equals(Single, Single, Single, Single) Equals(TBLRgba64) Equals(TBLRgba32) Equals(TBLRgba) Reset(TAlphaColorF) Reset(Single, Single, Single, Single) Reset(TBLRgba64) Reset(TBLRgba32) Reset ToRgba32 ToRgba64"},{"location":"Reference/Blend2D/classes/TBLRgba/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba/#A","title":"A","text":"<p>Alpha component. </p> <p><code>var A: Single</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#B","title":"B","text":"<p>Blur component. </p> <p><code>var B: Single</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#G","title":"G","text":"<p>Green component. </p> <p><code>var G: Single</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#R","title":"R","text":"<p>Red component. </p> <p><code>var R: Single</code></p> <p>Type: <code>Single</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba/#IsOpaque","title":"IsOpaque","text":"<p>Whether the color is fully opaque (alpha equals 1.0). </p> <p><code>property IsOpaque: Boolean read GetIsOpaque</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#IsTransparent","title":"IsTransparent","text":"<p>Whether the color is fully transparent (alpha equals 0.0). </p> <p><code>property IsTransparent: Boolean read GetIsTransparent</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba/#Create_0","title":"<code>Create</code>","text":"<p><code>constructor Create(const AColor: TAlphaColorF); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters","title":"Parameters","text":"<p><code>AColor</code>: <code>TAlphaColorF</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#Create_1","title":"<code>Create</code>","text":"<p><code>constructor Create(const ARgba64: TBLRgba64); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_1","title":"Parameters","text":"<p><code>ARgba64</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#Create_2","title":"<code>Create</code>","text":"<p><code>constructor Create(const ARgba32: TBLRgba32); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_2","title":"Parameters","text":"<p><code>ARgba32</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#Create_3","title":"<code>Create</code>","text":"<p><code>constructor Create(const AR, AG, AB: Single; const AA: Single = 1); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_3","title":"Parameters","text":"<p><code>AR</code>: <code>Single</code></p> <p><code>AG</code>: <code>Single</code></p> <p><code>AB</code>: <code>Single</code></p> <p><code>AA</code>: <code>Single = 1</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba/#Equal","title":"Equal(TBLRgba, TBLRgba)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLRgba): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRgba</code></p> <p><code>ARight</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#NotEqual","title":"NotEqual(TBLRgba, TBLRgba)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLRgba): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRgba</code></p> <p><code>ARight</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba/#Create","title":"Create","text":"<p><code>class function Create: TBLRgba; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#returns_2","title":"Returns","text":"<p><code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#Equals_0","title":"Equals(Single, Single, Single, Single)","text":"<p><code>function Equals(const AR, AG, AB: Single; const AA: Single = 1): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_6","title":"Parameters","text":"<p><code>AR</code>: <code>Single</code></p> <p><code>AG</code>: <code>Single</code></p> <p><code>AB</code>: <code>Single</code></p> <p><code>AA</code>: <code>Single = 1</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#Equals_1","title":"Equals(TBLRgba64)","text":"<p><code>function Equals(const AOther: TBLRgba64): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_7","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#Equals_2","title":"Equals(TBLRgba32)","text":"<p><code>function Equals(const AOther: TBLRgba32): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_8","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#returns_5","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#Equals_3","title":"Equals(TBLRgba)","text":"<p><code>function Equals(const AOther: TBLRgba): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_9","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#returns_6","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#Reset_0","title":"Reset(TAlphaColorF)","text":"<p><code>procedure Reset(const AColor: TAlphaColorF); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_10","title":"Parameters","text":"<p><code>AColor</code>: <code>TAlphaColorF</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#Reset_1","title":"Reset(Single, Single, Single, Single)","text":"<p><code>procedure Reset(const AR, AG, AB: Single; const AA: Single = 1); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_11","title":"Parameters","text":"<p><code>AR</code>: <code>Single</code></p> <p><code>AG</code>: <code>Single</code></p> <p><code>AB</code>: <code>Single</code></p> <p><code>AA</code>: <code>Single = 1</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#Reset_2","title":"Reset(TBLRgba64)","text":"<p><code>procedure Reset(const ARgba64: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_12","title":"Parameters","text":"<p><code>ARgba64</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#Reset_3","title":"Reset(TBLRgba32)","text":"<p><code>procedure Reset(const ARgba32: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#parameters_13","title":"Parameters","text":"<p><code>ARgba32</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#Reset_4","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#ToRgba32","title":"ToRgba32","text":"<p><code>function ToRgba32: TBLRgba32; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#returns_7","title":"Returns","text":"<p><code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#ToRgba64","title":"ToRgba64","text":"<p><code>function ToRgba64: TBLRgba64; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba/#returns_8","title":"Returns","text":"<p><code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/","title":"TBLRgba32","text":"<p>32-bit RGBA color (8-bit per component) stored as <code>$AARRGGBB</code>. This record is compatible with Delphi's <code>TAlphaColor</code> and <code>TAlphaColorRec</code> and can be typecast to and from these. </p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRgba32 = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#fields","title":"Fields","text":"Name Description Value Packed 32-bit RGBA value."},{"location":"Reference/Blend2D/classes/TBLRgba32/#properties","title":"Properties","text":"Name Description A B G IsOpaque Whether the color is fully opaque (alpha equals $FF). IsTransparent Whether the color is fully transparent (alpha equals $00). R"},{"location":"Reference/Blend2D/classes/TBLRgba32/#constructors","title":"Constructors","text":"Name Description Create(TBLRgba64) Create(TAlphaColorRec) Create(Byte, Byte, Byte, Byte) Create(UInt32)"},{"location":"Reference/Blend2D/classes/TBLRgba32/#operators","title":"Operators","text":"Name Description Equal Implicit(TBLRgba32) Implicitly converts from a TBLRgba32 to a packed 32-bit RGBA value. Implicit(TAlphaColorRec) Implicitly converts from a <code>TAlphaColorRec</code> to a TBLRgba32. Implicit(UInt32) Implicitly converts from a packed 32-bit RGBA value (or <code>TAlphaColor</code>) to a TBLRgba32. NotEqual"},{"location":"Reference/Blend2D/classes/TBLRgba32/#methods","title":"Methods","text":"Name Description Create Equals Reset(TBLRgba64) Reset(TAlphaColorRec) Reset(Byte, Byte, Byte, Byte) Reset(UInt32) Reset"},{"location":"Reference/Blend2D/classes/TBLRgba32/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba32/#Value","title":"Value","text":"<p>Packed 32-bit RGBA value. </p> <p><code>var Value: UInt32</code></p> <p>Type: <code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba32/#A","title":"A","text":"<p><code>property A: Byte read GetA write SetA</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#B","title":"B","text":"<p><code>property B: Byte read GetB write SetB</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#G","title":"G","text":"<p><code>property G: Byte read GetG write SetG</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#IsOpaque","title":"IsOpaque","text":"<p>Whether the color is fully opaque (alpha equals $FF). </p> <p><code>property IsOpaque: Boolean read GetIsOpaque</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#IsTransparent","title":"IsTransparent","text":"<p>Whether the color is fully transparent (alpha equals $00). </p> <p><code>property IsTransparent: Boolean read GetIsTransparent</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#R","title":"R","text":"<p><code>property R: Byte read GetR write SetR</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba32/#Create_0","title":"<code>Create</code>","text":"<p><code>constructor Create(const ARgba64: TBLRgba64); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters","title":"Parameters","text":"<p><code>ARgba64</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#Create_1","title":"<code>Create</code>","text":"<p><code>constructor Create(const AColor: TAlphaColorRec); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_1","title":"Parameters","text":"<p><code>AColor</code>: <code>TAlphaColorRec</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#Create_2","title":"<code>Create</code>","text":"<p><code>constructor Create(const AR, AG, AB: Byte; const AA: Byte = $FF); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_2","title":"Parameters","text":"<p><code>AR</code>: <code>Byte</code></p> <p><code>AG</code>: <code>Byte</code></p> <p><code>AB</code>: <code>Byte</code></p> <p><code>AA</code>: <code>Byte = $FF</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#Create_3","title":"<code>Create</code>","text":"<p><code>constructor Create(const ARgba32: UInt32); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_3","title":"Parameters","text":"<p><code>ARgba32</code>: <code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba32/#Equal","title":"Equal(TBLRgba32, TBLRgba32)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLRgba32): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRgba32</code></p> <p><code>ARight</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#Implicit_0","title":"Implicit(TBLRgba32)","text":"<p>Implicitly converts from a TBLRgba32 to a packed 32-bit RGBA value. </p> <p><code>class operator Implicit(const AValue: TBLRgba32): UInt32; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_5","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#returns_1","title":"Returns","text":"<p><code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#Implicit_1","title":"Implicit(TAlphaColorRec)","text":"<p>Implicitly converts from a <code>TAlphaColorRec</code> to a TBLRgba32. </p> <p><code>class operator Implicit(const AValue: TAlphaColorRec): TBLRgba32; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_6","title":"Parameters","text":"<p><code>AValue</code>: <code>TAlphaColorRec</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#returns_2","title":"Returns","text":"<p><code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#Implicit_2","title":"Implicit(UInt32)","text":"<p>Implicitly converts from a packed 32-bit RGBA value (or <code>TAlphaColor</code>) to a TBLRgba32. </p> <p><code>class operator Implicit(const AValue: UInt32): TBLRgba32; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_7","title":"Parameters","text":"<p><code>AValue</code>: <code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#returns_3","title":"Returns","text":"<p><code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#NotEqual","title":"NotEqual(TBLRgba32, TBLRgba32)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLRgba32): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_8","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRgba32</code></p> <p><code>ARight</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba32/#Create","title":"Create","text":"<p><code>class function Create: TBLRgba32; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#returns_5","title":"Returns","text":"<p><code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#Equals","title":"Equals(TBLRgba32)","text":"<p><code>function Equals(const AOther: TBLRgba32): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_9","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#returns_6","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#Reset_0","title":"Reset(TBLRgba64)","text":"<p><code>procedure Reset(const ARgba64: TBLRgba64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_10","title":"Parameters","text":"<p><code>ARgba64</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#Reset_1","title":"Reset(TAlphaColorRec)","text":"<p><code>procedure Reset(const AColor: TAlphaColorRec); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_11","title":"Parameters","text":"<p><code>AColor</code>: <code>TAlphaColorRec</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#Reset_2","title":"Reset(Byte, Byte, Byte, Byte)","text":"<p><code>procedure Reset(const AR, AG, AB: Byte; const AA: Byte = $FF); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_12","title":"Parameters","text":"<p><code>AR</code>: <code>Byte</code></p> <p><code>AG</code>: <code>Byte</code></p> <p><code>AB</code>: <code>Byte</code></p> <p><code>AA</code>: <code>Byte = $FF</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#Reset_3","title":"Reset(UInt32)","text":"<p><code>procedure Reset(const ARgba32: UInt32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#parameters_13","title":"Parameters","text":"<p><code>ARgba32</code>: <code>UInt32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba32/#Reset_4","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/","title":"TBLRgba64","text":"<p>64-bit RGBA color (8-bit per component) stored as <code>$AAAARRRRGGGGBBBB</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRgba64 = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#fields","title":"Fields","text":"Name Description Value Packed 64-bit RGBA value."},{"location":"Reference/Blend2D/classes/TBLRgba64/#properties","title":"Properties","text":"Name Description A B G IsOpaque Whether the color is fully opaque (alpha equals $FFFF). IsTransparent Whether the color is fully transparent (alpha equals $0000). R"},{"location":"Reference/Blend2D/classes/TBLRgba64/#constructors","title":"Constructors","text":"Name Description Create(Word, Word, Word, Word) Create(TBLRgba32) Create(UInt64)"},{"location":"Reference/Blend2D/classes/TBLRgba64/#operators","title":"Operators","text":"Name Description Equal Implicit(TBLRgba64) Implicitly converts from a TBLRgba64 to a packed 64-bit RGBA value. Implicit(UInt64) Implicitly converts from a packed 64-bit RGBA value to a TBLRgba64. NotEqual"},{"location":"Reference/Blend2D/classes/TBLRgba64/#methods","title":"Methods","text":"Name Description Create Equals Reset(Word, Word, Word, Word) Reset(TBLRgba32) Reset(UInt64) Reset"},{"location":"Reference/Blend2D/classes/TBLRgba64/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba64/#Value","title":"Value","text":"<p>Packed 64-bit RGBA value. </p> <p><code>var Value: UInt64</code></p> <p>Type: <code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba64/#A","title":"A","text":"<p><code>property A: Word read GetA write SetA</code></p> <p>Type: <code>Word</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#B","title":"B","text":"<p><code>property B: Word read GetB write SetB</code></p> <p>Type: <code>Word</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#G","title":"G","text":"<p><code>property G: Word read GetG write SetG</code></p> <p>Type: <code>Word</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#IsOpaque","title":"IsOpaque","text":"<p>Whether the color is fully opaque (alpha equals $FFFF). </p> <p><code>property IsOpaque: Boolean read GetIsOpaque</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#IsTransparent","title":"IsTransparent","text":"<p>Whether the color is fully transparent (alpha equals $0000). </p> <p><code>property IsTransparent: Boolean read GetIsTransparent</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#R","title":"R","text":"<p><code>property R: Word read GetR write SetR</code></p> <p>Type: <code>Word</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba64/#Create_0","title":"<code>Create</code>","text":"<p><code>constructor Create(const AR, AG, AB: Word; const AA: Word = $FFFF); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#parameters","title":"Parameters","text":"<p><code>AR</code>: <code>Word</code></p> <p><code>AG</code>: <code>Word</code></p> <p><code>AB</code>: <code>Word</code></p> <p><code>AA</code>: <code>Word = $FFFF</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#Create_1","title":"<code>Create</code>","text":"<p><code>constructor Create(const ARgba32: TBLRgba32); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#parameters_1","title":"Parameters","text":"<p><code>ARgba32</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#Create_2","title":"<code>Create</code>","text":"<p><code>constructor Create(const ARgba64: UInt64); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#parameters_2","title":"Parameters","text":"<p><code>ARgba64</code>: <code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba64/#Equal","title":"Equal(TBLRgba64, TBLRgba64)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLRgba64): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRgba64</code></p> <p><code>ARight</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#Implicit_0","title":"Implicit(TBLRgba64)","text":"<p>Implicitly converts from a TBLRgba64 to a packed 64-bit RGBA value. </p> <p><code>class operator Implicit(const AValue: TBLRgba64): UInt64; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#parameters_4","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#returns_1","title":"Returns","text":"<p><code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#Implicit_1","title":"Implicit(UInt64)","text":"<p>Implicitly converts from a packed 64-bit RGBA value to a TBLRgba64. </p> <p><code>class operator Implicit(const AValue: UInt64): TBLRgba64; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#parameters_5","title":"Parameters","text":"<p><code>AValue</code>: <code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#returns_2","title":"Returns","text":"<p><code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#NotEqual","title":"NotEqual(TBLRgba64, TBLRgba64)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLRgba64): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRgba64</code></p> <p><code>ARight</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRgba64/#Create","title":"Create","text":"<p><code>class function Create: TBLRgba64; overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#returns_4","title":"Returns","text":"<p><code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#Equals","title":"Equals(TBLRgba64)","text":"<p><code>function Equals(const AOther: TBLRgba64): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#parameters_7","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#returns_5","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#Reset_0","title":"Reset(Word, Word, Word, Word)","text":"<p><code>procedure Reset(const AR, AG, AB: Word; const AA: Word = $FFFF); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#parameters_8","title":"Parameters","text":"<p><code>AR</code>: <code>Word</code></p> <p><code>AG</code>: <code>Word</code></p> <p><code>AB</code>: <code>Word</code></p> <p><code>AA</code>: <code>Word = $FFFF</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#Reset_1","title":"Reset(TBLRgba32)","text":"<p><code>procedure Reset(const ARgba32: TBLRgba32); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#parameters_9","title":"Parameters","text":"<p><code>ARgba32</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#Reset_2","title":"Reset(UInt64)","text":"<p><code>procedure Reset(const ARgba64: UInt64); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#parameters_10","title":"Parameters","text":"<p><code>ARgba64</code>: <code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TBLRgba64/#Reset_3","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/","title":"TBLRoundRect","text":"<p>Rounded rectangle specified as [X, Y, W, H, RX, RY] using <code>Double</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRoundRect = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#fields","title":"Fields","text":"Name Description H RX RY W X Y"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#constructors","title":"Constructors","text":"Name Description Create(Double, Double, Double, Double, Double, Double) Create(Double, Double, Double, Double, Double) Create(TBLRect, Double, Double) Create(TBLRect, Double)"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#methods","title":"Methods","text":"Name Description Equals Reset(TBLRoundRect) Reset(Double, Double, Double, Double, Double, Double) Reset(Double, Double, Double, Double, Double) Reset(TBLRect, Double, Double) Reset(TBLRect, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRoundRect/#H","title":"H","text":"<p><code>var H: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#RX","title":"RX","text":"<p><code>var RX: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#RY","title":"RY","text":"<p><code>var RY: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#W","title":"W","text":"<p><code>var W: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#X","title":"X","text":"<p><code>var X: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Y","title":"Y","text":"<p><code>var Y: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Create_0","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX, AY, AW, AH, ARX, ARY: Double); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#parameters","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Create_1","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX, AY, AW, AH, AR: Double); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#parameters_1","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Create_2","title":"<code>Create</code>","text":"<p><code>constructor Create(const ARect: TBLRect; const ARX, ARY: Double); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#parameters_2","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Create_3","title":"<code>Create</code>","text":"<p><code>constructor Create(const ARect: TBLRect; const AR: Double); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#parameters_3","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Equal","title":"Equal(TBLRoundRect, TBLRoundRect)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLRoundRect): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRoundRect</code></p> <p><code>ARight</code>: <code>TBLRoundRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#NotEqual","title":"NotEqual(TBLRoundRect, TBLRoundRect)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLRoundRect): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLRoundRect</code></p> <p><code>ARight</code>: <code>TBLRoundRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Equals","title":"Equals(TBLRoundRect)","text":"<p><code>function Equals(const AOther: TBLRoundRect): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#parameters_6","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRoundRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Reset_0","title":"Reset(TBLRoundRect)","text":"<p><code>procedure Reset(const AOther: TBLRoundRect); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#parameters_7","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRoundRect</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Reset_1","title":"Reset(Double, Double, Double, Double, Double, Double)","text":"<p><code>procedure Reset(const AX, AY, AW, AH, ARX, ARY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#parameters_8","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Reset_2","title":"Reset(Double, Double, Double, Double, Double)","text":"<p><code>procedure Reset(const AX, AY, AW, AH, AR: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#parameters_9","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Reset_3","title":"Reset(TBLRect, Double, Double)","text":"<p><code>procedure Reset(const ARect: TBLRect; const ARX, ARY: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#parameters_10","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Reset_4","title":"Reset(TBLRect, Double)","text":"<p><code>procedure Reset(const ARect: TBLRect; const AR: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#parameters_11","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLRoundRect/#Reset_5","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/","title":"TBLRuntime","text":"<p>Interface to access Blend2D runtime. </p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRuntime = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#methods","title":"Methods","text":"Name Description Cleanup Message(String, const[]) Message(String) QueryBuildInfo QueryResourceInfo QuerySystemInfo"},{"location":"Reference/Blend2D/classes/TBLRuntime/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRuntime/#Cleanup","title":"Cleanup(TBLRuntimeCleanupFlags)","text":"<p><code>class procedure Cleanup(const ACleanupFlags: TBLRuntimeCleanupFlags); inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#parameters","title":"Parameters","text":"<p><code>ACleanupFlags</code>: <code>TBLRuntimeCleanupFlags</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#Message_0","title":"Message(String, const[])","text":"<p><code>class procedure Message(const AMsg: String; const AArgs: array of const); overload; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#parameters_1","title":"Parameters","text":"<p><code>AMsg</code>: <code>String</code></p> <p><code>AArgs</code>: <code>array of const</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#Message_1","title":"Message(String)","text":"<p><code>class procedure Message(const AMsg: String); overload; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#parameters_2","title":"Parameters","text":"<p><code>AMsg</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#QueryBuildInfo","title":"QueryBuildInfo","text":"<p><code>class function QueryBuildInfo: TBLRuntimeBuildInfo; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#returns","title":"Returns","text":"<p><code>TBLRuntimeBuildInfo</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#QueryResourceInfo","title":"QueryResourceInfo","text":"<p><code>class function QueryResourceInfo: TBLRuntimeResourceInfo; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#returns_1","title":"Returns","text":"<p><code>TBLRuntimeResourceInfo</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#QuerySystemInfo","title":"QuerySystemInfo","text":"<p><code>class function QuerySystemInfo: TBLRuntimeSystemInfo; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntime/#returns_2","title":"Returns","text":"<p><code>TBLRuntimeSystemInfo</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/","title":"TBLRuntimeBuildInfo","text":"<p>Blend2D build information. </p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRuntimeBuildInfo = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#properties","title":"Properties","text":"Name Description BaselineCpuFeatures Baseline CPU features. BuildType Blend2D build type. CompilerInfo Identification of the C++ compiler used to build Blend2D. MajorVersion Major version number. MaxImageSize Maximum size of an image (both width and height). MaxThreadCount Maximum number of threads for asynchronous operations, including rendering. MinorVersion Minor version number. PatchVersion Patch version number. SupportedCpuFeatures Supported CPU features."},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#BaselineCpuFeatures","title":"BaselineCpuFeatures","text":"<p>Baseline CPU features.</p> <p>These features describe CPU features that were detected at compile-time. Baseline features are used to compile all source files so they represent the minimum feature-set the target CPU must support to run Blend2D.</p> <p>Official Blend2D builds set baseline at SSE2 on X86 target and NEON on ARM target. Custom builds can set use a different baseline, which can be read through <code>TBLRuntimeBuildInfo</code>. </p> <p><code>property BaselineCpuFeatures: TBLRuntimeCpuFeatures read FBaselineCpuFeatures</code></p> <p>Type: <code>TBLRuntimeCpuFeatures</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#BuildType","title":"BuildType","text":"<p>Blend2D build type. </p> <p><code>property BuildType: TBLRuntimeBuildType read FBuildType</code></p> <p>Type: <code>TBLRuntimeBuildType</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#CompilerInfo","title":"CompilerInfo","text":"<p>Identification of the C++ compiler used to build Blend2D. </p> <p><code>property CompilerInfo: String read GetCompilerInfo</code></p> <p>Type: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#MajorVersion","title":"MajorVersion","text":"<p>Major version number. </p> <p><code>property MajorVersion: Integer read FMajorVersion</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#MaxImageSize","title":"MaxImageSize","text":"<p>Maximum size of an image (both width and height). </p> <p><code>property MaxImageSize: Integer read FMaxImageSize</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#MaxThreadCount","title":"MaxThreadCount","text":"<p>Maximum number of threads for asynchronous operations, including rendering. </p> <p><code>property MaxThreadCount: Integer read FMaxThreadCount</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#MinorVersion","title":"MinorVersion","text":"<p>Minor version number. </p> <p><code>property MinorVersion: Integer read FMinorVersion</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#PatchVersion","title":"PatchVersion","text":"<p>Patch version number. </p> <p><code>property PatchVersion: Integer read FPatchVersion</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#SupportedCpuFeatures","title":"SupportedCpuFeatures","text":"<p>Supported CPU features.</p> <p>These features do not represent the features that the host CPU must support, instead, they represent all features that Blend2D can take advantage of in C++ code that uses instruction intrinsics. For example if AVX2 is part of <code>SupportedCpuFeatures</code> it means that Blend2D can take advantage of it if there is a specialized code-path. </p> <p><code>property SupportedCpuFeatures: TBLRuntimeCpuFeatures read FSupportedCpuFeatures</code></p> <p>Type: <code>TBLRuntimeCpuFeatures</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRuntimeBuildInfo/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeLimits/","title":"TBLRuntimeLimits","text":"<p>Blend2D runtime limits. </p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeLimits/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRuntimeLimits = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRuntimeLimits/#see-also","title":"See Also","text":"<ul> <li>TBLRuntimeBuildInfo</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLRuntimeLimits/#remarks","title":"Remarks","text":"<p>These constants are used across Blend2D, but they are not designed to be ABI stable. New versions of Blend2D can increase certain limits without notice. Use <code>TBLRuntimeBuildInfo</code> to query the limits dynamically. </p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeLimits/#constants","title":"Constants","text":"Name Description MaxImageSize Maximum width and height of an image. MaxThreadCount Maximum number of threads for asynchronous operations (including rendering)."},{"location":"Reference/Blend2D/classes/TBLRuntimeLimits/#constant-descriptions","title":"Constant Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRuntimeLimits/#MaxImageSize","title":"MaxImageSize","text":"<p>Maximum width and height of an image. </p> <p><code>const MaxImageSize = 65535</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeLimits/#MaxThreadCount","title":"MaxThreadCount","text":"<p>Maximum number of threads for asynchronous operations (including rendering). </p> <p><code>const MaxThreadCount = 32</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/","title":"TBLRuntimeResourceInfo","text":"<p>Provides information about resources allocated by Blend2D. </p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRuntimeResourceInfo = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#properties","title":"Properties","text":"Name Description DynamicPipelineCount Count of dynamic pipelines created and cached. VMBlockCount Number of blocks of virtual memory allocated. VMOverhead Overhead required to manage virtual memory allocations. VMReserved Virtual memory reserved (allocated internally). VMUsed Virtual memory used at this time. ZMBlockCount Number of blocks of zeroed memory allocated. ZMOverhead Overhead required to manage zeroed memory allocations. ZMReserved Zeroed memory reserved (allocated internally). ZMUsed Zeroed memory used at this time."},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#DynamicPipelineCount","title":"DynamicPipelineCount","text":"<p>Count of dynamic pipelines created and cached. </p> <p><code>property DynamicPipelineCount: NativeInt read GetDynamicPipelineCount</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#VMBlockCount","title":"VMBlockCount","text":"<p>Number of blocks of virtual memory allocated. </p> <p><code>property VMBlockCount: NativeInt read GetVMBlockCount</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#VMOverhead","title":"VMOverhead","text":"<p>Overhead required to manage virtual memory allocations. </p> <p><code>property VMOverhead: NativeInt read GetVMOverhead</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#VMReserved","title":"VMReserved","text":"<p>Virtual memory reserved (allocated internally). </p> <p><code>property VMReserved: NativeInt read GetVMReserved</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#VMUsed","title":"VMUsed","text":"<p>Virtual memory used at this time. </p> <p><code>property VMUsed: NativeInt read GetVMUsed</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#ZMBlockCount","title":"ZMBlockCount","text":"<p>Number of blocks of zeroed memory allocated. </p> <p><code>property ZMBlockCount: NativeInt read GetZMBlockCount</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#ZMOverhead","title":"ZMOverhead","text":"<p>Overhead required to manage zeroed memory allocations. </p> <p><code>property ZMOverhead: NativeInt read GetZMOverhead</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#ZMReserved","title":"ZMReserved","text":"<p>Zeroed memory reserved (allocated internally). </p> <p><code>property ZMReserved: NativeInt read GetZMReserved</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#ZMUsed","title":"ZMUsed","text":"<p>Zeroed memory used at this time. </p> <p><code>property ZMUsed: NativeInt read GetZMUsed</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRuntimeResourceInfo/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/","title":"TBLRuntimeSystemInfo","text":"<p>System information queried by the runtime. </p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRuntimeSystemInfo = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#properties","title":"Properties","text":"Name Description AllocationGranularity Allocation granularity of virtual memory (includes thread's stack). CoreCount Number of cores of the host CPU/CPUs. CpuArch Host CPU architecture. CpuBrand Host CPU brand string or empty string if not detected properly. CpuFeatures Host CPU features. CpuVendor Host CPU vendor string such 'AMD', 'APPLE', 'INTEL', 'SAMSUNG', etc... ThreadCount Number of threads of the host CPU/CPUs. ThreadStackSize Minimum stack size of a worker thread used by Blend2D."},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#AllocationGranularity","title":"AllocationGranularity","text":"<p>Allocation granularity of virtual memory (includes thread's stack). </p> <p><code>property AllocationGranularity: Integer read FAllocationGranularity</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#CoreCount","title":"CoreCount","text":"<p>Number of cores of the host CPU/CPUs. </p> <p><code>property CoreCount: Integer read FCoreCount</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#CpuArch","title":"CpuArch","text":"<p>Host CPU architecture. </p> <p><code>property CpuArch: TBLRuntimeCpuArch read FCpuArch</code></p> <p>Type: <code>TBLRuntimeCpuArch</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#CpuBrand","title":"CpuBrand","text":"<p>Host CPU brand string or empty string if not detected properly. </p> <p><code>property CpuBrand: String read GetCpuBrand</code></p> <p>Type: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#CpuFeatures","title":"CpuFeatures","text":"<p>Host CPU features. </p> <p><code>property CpuFeatures: TBLRuntimeCpuFeatures read FCpuFeatures</code></p> <p>Type: <code>TBLRuntimeCpuFeatures</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#CpuVendor","title":"CpuVendor","text":"<p>Host CPU vendor string such 'AMD', 'APPLE', 'INTEL', 'SAMSUNG', etc... </p> <p><code>property CpuVendor: String read GetCpuVendor</code></p> <p>Type: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#ThreadCount","title":"ThreadCount","text":"<p>Number of threads of the host CPU/CPUs. </p> <p><code>property ThreadCount: Integer read FThreadCount</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#ThreadStackSize","title":"ThreadStackSize","text":"<p>Minimum stack size of a worker thread used by Blend2D. </p> <p><code>property ThreadStackSize: Integer read FThreadStackSize</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLRuntimeSystemInfo/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/","title":"TBLSize","text":"<p>Size specified as [W, H] using <code>Double</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLSize/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLSize = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLSize/#fields","title":"Fields","text":"Name Description H W"},{"location":"Reference/Blend2D/classes/TBLSize/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLSize/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLSize/#methods","title":"Methods","text":"Name Description Equals Reset(TBLSize) Reset(Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLSize/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLSize/#H","title":"H","text":"<p><code>var H: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#W","title":"W","text":"<p><code>var W: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLSize/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AW, AH: Double)</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#parameters","title":"Parameters","text":"<p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLSize/#Equal","title":"Equal(TBLSize, TBLSize)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLSize): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLSize</code></p> <p><code>ARight</code>: <code>TBLSize</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#NotEqual","title":"NotEqual(TBLSize, TBLSize)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLSize): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLSize</code></p> <p><code>ARight</code>: <code>TBLSize</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLSize/#Equals","title":"Equals(TBLSize)","text":"<p><code>function Equals(const AOther: TBLSize): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#parameters_3","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLSize</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#Reset_0","title":"Reset(TBLSize)","text":"<p><code>procedure Reset(const AOther: TBLSize); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#parameters_4","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLSize</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#Reset_1","title":"Reset(Double, Double)","text":"<p><code>procedure Reset(const AW, AH: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#parameters_5","title":"Parameters","text":"<p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLSize/#Reset_2","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/","title":"TBLSizeI","text":"<p>Size specified as [W, H] using <code>Integer</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLSizeI = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#fields","title":"Fields","text":"Name Description H W"},{"location":"Reference/Blend2D/classes/TBLSizeI/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLSizeI/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLSizeI/#methods","title":"Methods","text":"Name Description Equals Reset(TBLSizeI) Reset(Integer, Integer) Reset"},{"location":"Reference/Blend2D/classes/TBLSizeI/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLSizeI/#H","title":"H","text":"<p><code>var H: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#W","title":"W","text":"<p><code>var W: Integer</code></p> <p>Type: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLSizeI/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AW, AH: Integer)</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#parameters","title":"Parameters","text":"<p><code>AW</code>: <code>Integer</code></p> <p><code>AH</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLSizeI/#Equal","title":"Equal(TBLSizeI, TBLSizeI)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLSizeI): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLSizeI</code></p> <p><code>ARight</code>: <code>TBLSizeI</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#NotEqual","title":"NotEqual(TBLSizeI, TBLSizeI)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLSizeI): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLSizeI</code></p> <p><code>ARight</code>: <code>TBLSizeI</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLSizeI/#Equals","title":"Equals(TBLSizeI)","text":"<p><code>function Equals(const AOther: TBLSizeI): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#parameters_3","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLSizeI</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#Reset_0","title":"Reset(TBLSizeI)","text":"<p><code>procedure Reset(const AOther: TBLSizeI); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#parameters_4","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLSizeI</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#Reset_1","title":"Reset(Integer, Integer)","text":"<p><code>procedure Reset(const AW, AH: Integer); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#parameters_5","title":"Parameters","text":"<p><code>AW</code>: <code>Integer</code></p> <p><code>AH</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLSizeI/#Reset_2","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/","title":"TBLString","text":"<p>Byte string.</p> <p>Blend2D always uses UTF-8 encoding in public APIs so all strings are assumed UTF-8 by default. However, <code>TBLString</code> doesn't guarantee any assumptions about the encoding of the data it holds. It can hold arbitrary byte sequence and act as a raw byte-string when this functionality is desired. </p>"},{"location":"Reference/Blend2D/classes/TBLString/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLString = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLString/#remarks","title":"Remarks","text":"<p>Most Blend2D API's use <code>TBLString</code> instead of Delphi's built-in String (UnicodeString) type since <code>TBLString</code> can be more efficient for short strings. If you use the same string multiple times, it's more efficient to keep a <code>TBLString</code> value around instead recreating them or using regular strings, to avoid Unicode-to-UTF8 conversions. </p>"},{"location":"Reference/Blend2D/classes/TBLString/#properties","title":"Properties","text":"Name Description Capacity The capacity of the string [in bytes or number of UTF8 characters]. Chars The characters at the given <code>AIndex</code> (0-based). Data Pointer to the data of the string. IsEmpty Whether the string is empty. Size The size of the string [in bytes or number of UTF8 characters]."},{"location":"Reference/Blend2D/classes/TBLString/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor. Create(UTF8String) Constructor that creates a string from a Delphi UTF8String. Create(String) Constructor that creates a string from a Delphi (Unicode) String. Create(PUTF8Char, NativeInt) Constructor that creates a string from the given UTF8 data specified by <code>AStr</code> and <code>ASize</code>. If <code>ASize</code> is -1 the string is assumed to be null terminated. Create(TBLStringView) Constructor that creates a string from the given string <code>AView</code>. Finalize Destroys the string. Initialize Creates an empty string."},{"location":"Reference/Blend2D/classes/TBLString/#operators","title":"Operators","text":"Name Description Equal(TBLString, String) Equal(TBLString, UTF8String) Equal(TBLString, PUTF8Char) Equal(TBLString, TBLStringView) Equal(TBLString, TBLString) Returns True if two strings are equal (have the same contents). Equal(TBLString, Pointer) Used to compare against <code>nil</code> (empty string). GreaterThan(TBLString, String) GreaterThan(TBLString, UTF8String) GreaterThan(TBLString, PUTF8Char) GreaterThan(TBLString, TBLStringView) GreaterThan(TBLString, TBLString) GreaterThanOrEqual(TBLString, String) GreaterThanOrEqual(TBLString, UTF8String) GreaterThanOrEqual(TBLString, PUTF8Char) GreaterThanOrEqual(TBLString, TBLStringView) GreaterThanOrEqual(TBLString, TBLString) Implicit(UTF8String) Implicitly convers a Delphi UTF8String to a TBLString. Implicit(String) Implicitly convers a Delphi (Unicode) String to a TBLString. LessThan(TBLString, String) LessThan(TBLString, UTF8String) LessThan(TBLString, PUTF8Char) LessThan(TBLString, TBLStringView) LessThan(TBLString, TBLString) LessThanOrEqual(TBLString, String) LessThanOrEqual(TBLString, UTF8String) LessThanOrEqual(TBLString, PUTF8Char) LessThanOrEqual(TBLString, TBLStringView) LessThanOrEqual(TBLString, TBLString) NotEqual(TBLString, String) NotEqual(TBLString, UTF8String) NotEqual(TBLString, PUTF8Char) NotEqual(TBLString, TBLStringView) NotEqual(TBLString, TBLString) Returns True if two strings are not equal (do not have the same contents). NotEqual(TBLString, Pointer) Used to compare against <code>nil</code> (empty string)."},{"location":"Reference/Blend2D/classes/TBLString/#methods","title":"Methods","text":"Name Description Append(String) Append(UTF8String) Append(PUTF8Char, NativeInt) Append(TBLStringView) Append(TBLString) Append(UTF8Char, NativeInt) AppendFormat Assign(PUTF8Char, NativeInt) Replaces the string by <code>AStr</code> data of the given length <code>ASize</code>. Assign(TBLStringView) Replaces the string by the content described by the given string <code>AView</code>. Assign(UTF8Char, NativeInt) Replaces the content of the string by <code>AChar</code> character or multiple characters if <code>ACount</code> is greater than one. AssignDeep Copy assignment, but creates a deep copy of the <code>AOther</code> string instead of weak copy. AssignFormat Replaces the content of the string by a result of calling <code>Format(AFmt, AArgs)</code>. At Returns a character at the given <code>AIndex</code>. Clear Clears the content of the string without releasing its dynamically allocated data, if possible. Compare(String) Compares this string with other string data and returns either <code>-1</code>, <code>0</code>, or <code>1</code>. Compare(UTF8String) Compares this string with other string data and returns either <code>-1</code>, <code>0</code>, or <code>1</code>. Compare(PUTF8Char, NativeInt) Compares this string with other string data and returns either <code>-1</code>, <code>0</code>, or <code>1</code>. Compare(TBLStringView) Compares this string with other string <code>AView</code> and returns either <code>-1</code>, <code>0</code>, or <code>1</code>. Compare(TBLString) Compares this string with <code>AOther</code> and returns either <code>-1</code>, <code>0</code>, or <code>1</code>. Equals(String) Returns whether this string and the given Unicode string data <code>AStr</code> are equal. Equals(UTF8String) Returns whether this string and the given UTF8 string data <code>AStr</code> are equal. Equals(PUTF8Char, NativeInt) Returns whether this string and the given string data <code>AStr</code> of length <code>ASize</code> are equal. Equals(TBLStringView) Returns whether this string and other string <code>AView</code> are equal. Equals(TBLString) Returns whether this string and <code>AOther</code> are equal (i.e. their contents match). IndexOf(UTF8Char, NativeInt) Returns the index at which a given character <code>AChar</code> can be found in the string starting from <code>AFromIndex</code>, or -1 if not present. IndexOf(UTF8Char) Returns the first index at which a given character <code>AChar</code> can be found in the string, or -1 if not present. Insert(NativeInt, String) Insert(NativeInt, UTF8String) Insert(NativeInt, PUTF8Char, NativeInt) Insert(NativeInt, TBLStringView) Insert(NativeInt, TBLString) Insert(NativeInt, UTF8Char, NativeInt) InsertOp LastIndexOf(UTF8Char, NativeInt) Returns the index at which a given character <code>AChar</code> can be found in the string starting from <code>AFromIndex</code> and ending at <code>0</code>, or -1 if not present. LastIndexOf(UTF8Char) Returns the last index at which a given character <code>AChar</code> can be found in the string, or -1 if not present. MakeMutable Makes the string mutable. ModifyOp Prepend(String) Prepend(UTF8String) Prepend(PUTF8Char, NativeInt) Prepend(TBLStringView) Prepend(TBLString) Prepend(UTF8Char, NativeInt) Remove(TBLRange) Remove(NativeInt) Reserve Reserves at least <code>AMinSize</code> bytes (UTF8 characters) in the string for further manipulation (most probably appending). Reset Clears the content of the string and releases its data. Resize Resizes the string to <code>ASize</code> and fills the additional data by <code>AFill</code> pattern. Shrink Shrinks the capacity of the string to match the actual content. Swap Swaps the content of this string with the <code>AOther</code> string. ToString Converts to a Delphi string Truncate Truncates the string length to <code>ASize</code>. View Returns the content of the string as <code>TBLStringView</code>."},{"location":"Reference/Blend2D/classes/TBLString/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLString/#Capacity","title":"Capacity","text":"<p>The capacity of the string [in bytes or number of UTF8 characters]. </p> <p><code>property Capacity: NativeInt read GetCapacity</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Chars","title":"Chars","text":"<p>The characters at the given <code>AIndex</code> (0-based). </p> <p><code>property Chars[const AIndex: NativeInt]: UTF8Char read GetChar; default</code></p> <p>Type: <code>UTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#remarks_1","title":"Remarks","text":"<p>This is the same as calling <code>At(AIndex)</code>. Index must be valid and cannot be out of bounds - there is an assertion. </p>"},{"location":"Reference/Blend2D/classes/TBLString/#Data","title":"Data","text":"<p>Pointer to the data of the string. </p> <p><code>property Data: PUTF8Char read GetData</code></p> <p>Type: <code>PUTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#IsEmpty","title":"IsEmpty","text":"<p>Whether the string is empty. </p> <p><code>property IsEmpty: Boolean read GetIsEmpty</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Size","title":"Size","text":"<p>The size of the string [in bytes or number of UTF8 characters]. </p> <p><code>property Size: NativeInt read GetSize</code></p> <p>Type: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLString/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor.</p> <p>Performs weak copy of the data held by the <code>ASrc</code> string. </p> <p><code>constructor Assign(var ADest: TBLString; const ASrc: TBLString); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLString</code></p> <p><code>ASrc</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#Create_0","title":"<code>Create</code>","text":"<p>Constructor that creates a string from a Delphi UTF8String. </p> <p><code>constructor Create(const AStr: UTF8String); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_1","title":"Parameters","text":"<p><code>AStr</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#Create_1","title":"<code>Create</code>","text":"<p>Constructor that creates a string from a Delphi (Unicode) String. </p> <p><code>constructor Create(const AStr: String); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_2","title":"Parameters","text":"<p><code>AStr</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#remarks_2","title":"Remarks","text":"<p>This involves a Unicode-to-UTF8 conversion. </p>"},{"location":"Reference/Blend2D/classes/TBLString/#Create_2","title":"<code>Create</code>","text":"<p>Constructor that creates a string from the given UTF8 data specified by <code>AStr</code> and <code>ASize</code>. If <code>ASize</code> is -1 the string is assumed to be null terminated.</p> <p>This is a convenience function that doesn't provide error handling. If size exceeds small string capacity and dynamic allocation failed then a default empty string would be constructed. </p> <p><code>constructor Create(const AStr: PUTF8Char; const ASize: NativeInt = -1); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_3","title":"Parameters","text":"<p><code>AStr</code>: <code>PUTF8Char</code></p> <p><code>ASize</code>: <code>NativeInt = -1</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#Create_3","title":"<code>Create</code>","text":"<p>Constructor that creates a string from the given string <code>AView</code>. </p> <p><code>constructor Create(const AView: TBLStringView); overload</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_4","title":"Parameters","text":"<p><code>AView</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the string. </p> <p><code>destructor Finalize(var ADest: TBLString)</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_5","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates an empty string. </p> <p><code>constructor Initialize(out ADest: TBLString)</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_6","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLString/#Equal_0","title":"Equal(TBLString, String)","text":"<p><code>class operator Equal(const ALeft: TBLString; const ARight: String): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_7","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Equal_1","title":"Equal(TBLString, UTF8String)","text":"<p><code>class operator Equal(const ALeft: TBLString; const ARight: UTF8String): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_8","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Equal_2","title":"Equal(TBLString, PUTF8Char)","text":"<p><code>class operator Equal(const ALeft: TBLString; const ARight: PUTF8Char): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_9","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>PUTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Equal_3","title":"Equal(TBLString, TBLStringView)","text":"<p><code>class operator Equal(const ALeft: TBLString; const ARight: TBLStringView): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_10","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Equal_4","title":"Equal(TBLString, TBLString)","text":"<p>Returns True if two strings are equal (have the same contents). </p> <p><code>class operator Equal(const ALeft, ARight: TBLString): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_11","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Equal_5","title":"Equal(TBLString, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty string). </p> <p><code>class operator Equal(const ALeft: TBLString; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_12","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_5","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#GreaterThan_0","title":"GreaterThan(TBLString, String)","text":"<p><code>class operator GreaterThan(const ALeft: TBLString; const ARight: String): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_13","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_6","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#GreaterThan_1","title":"GreaterThan(TBLString, UTF8String)","text":"<p><code>class operator GreaterThan(const ALeft: TBLString; const ARight: UTF8String): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_14","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_7","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#GreaterThan_2","title":"GreaterThan(TBLString, PUTF8Char)","text":"<p><code>class operator GreaterThan(const ALeft: TBLString; const ARight: PUTF8Char): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_15","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>PUTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_8","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#GreaterThan_3","title":"GreaterThan(TBLString, TBLStringView)","text":"<p><code>class operator GreaterThan(const ALeft: TBLString; const ARight: TBLStringView): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_16","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_9","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#GreaterThan_4","title":"GreaterThan(TBLString, TBLString)","text":"<p><code>class operator GreaterThan(const ALeft, ARight: TBLString): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_17","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_10","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#GreaterThanOrEqual_0","title":"GreaterThanOrEqual(TBLString, String)","text":"<p><code>class operator GreaterThanOrEqual(const ALeft: TBLString; const ARight: String): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_18","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_11","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#GreaterThanOrEqual_1","title":"GreaterThanOrEqual(TBLString, UTF8String)","text":"<p><code>class operator GreaterThanOrEqual(const ALeft: TBLString; const ARight: UTF8String): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_19","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_12","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#GreaterThanOrEqual_2","title":"GreaterThanOrEqual(TBLString, PUTF8Char)","text":"<p><code>class operator GreaterThanOrEqual(const ALeft: TBLString; const ARight: PUTF8Char): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_20","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>PUTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_13","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#GreaterThanOrEqual_3","title":"GreaterThanOrEqual(TBLString, TBLStringView)","text":"<p><code>class operator GreaterThanOrEqual(const ALeft: TBLString; const ARight: TBLStringView): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_21","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_14","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#GreaterThanOrEqual_4","title":"GreaterThanOrEqual(TBLString, TBLString)","text":"<p><code>class operator GreaterThanOrEqual(const ALeft, ARight: TBLString): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_22","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_15","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Implicit_0","title":"Implicit(UTF8String)","text":"<p>Implicitly convers a Delphi UTF8String to a TBLString. </p> <p><code>class operator Implicit(const AStr: UTF8String): TBLString; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_23","title":"Parameters","text":"<p><code>AStr</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_16","title":"Returns","text":"<p><code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#Implicit_1","title":"Implicit(String)","text":"<p>Implicitly convers a Delphi (Unicode) String to a TBLString. </p> <p><code>class operator Implicit(const AStr: String): TBLString; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_24","title":"Parameters","text":"<p><code>AStr</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_17","title":"Returns","text":"<p><code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#remarks_3","title":"Remarks","text":"<p>This involves a Unicode-to-UTF8 conversion. </p>"},{"location":"Reference/Blend2D/classes/TBLString/#LessThan_0","title":"LessThan(TBLString, String)","text":"<p><code>class operator LessThan(const ALeft: TBLString; const ARight: String): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_25","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_18","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#LessThan_1","title":"LessThan(TBLString, UTF8String)","text":"<p><code>class operator LessThan(const ALeft: TBLString; const ARight: UTF8String): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_26","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_19","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#LessThan_2","title":"LessThan(TBLString, PUTF8Char)","text":"<p><code>class operator LessThan(const ALeft: TBLString; const ARight: PUTF8Char): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_27","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>PUTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_20","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#LessThan_3","title":"LessThan(TBLString, TBLStringView)","text":"<p><code>class operator LessThan(const ALeft: TBLString; const ARight: TBLStringView): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_28","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_21","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#LessThan_4","title":"LessThan(TBLString, TBLString)","text":"<p><code>class operator LessThan(const ALeft, ARight: TBLString): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_29","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_22","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#LessThanOrEqual_0","title":"LessThanOrEqual(TBLString, String)","text":"<p><code>class operator LessThanOrEqual(const ALeft: TBLString; const ARight: String): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_30","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_23","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#LessThanOrEqual_1","title":"LessThanOrEqual(TBLString, UTF8String)","text":"<p><code>class operator LessThanOrEqual(const ALeft: TBLString; const ARight: UTF8String): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_31","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_24","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#LessThanOrEqual_2","title":"LessThanOrEqual(TBLString, PUTF8Char)","text":"<p><code>class operator LessThanOrEqual(const ALeft: TBLString; const ARight: PUTF8Char): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_32","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>PUTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_25","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#LessThanOrEqual_3","title":"LessThanOrEqual(TBLString, TBLStringView)","text":"<p><code>class operator LessThanOrEqual(const ALeft: TBLString; const ARight: TBLStringView): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_33","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_26","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#LessThanOrEqual_4","title":"LessThanOrEqual(TBLString, TBLString)","text":"<p><code>class operator LessThanOrEqual(const ALeft, ARight: TBLString): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_34","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_27","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#NotEqual_0","title":"NotEqual(TBLString, String)","text":"<p><code>class operator NotEqual(const ALeft: TBLString; const ARight: String): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_35","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_28","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#NotEqual_1","title":"NotEqual(TBLString, UTF8String)","text":"<p><code>class operator NotEqual(const ALeft: TBLString; const ARight: UTF8String): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_36","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_29","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#NotEqual_2","title":"NotEqual(TBLString, PUTF8Char)","text":"<p><code>class operator NotEqual(const ALeft: TBLString; const ARight: PUTF8Char): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_37","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>PUTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_30","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#NotEqual_3","title":"NotEqual(TBLString, TBLStringView)","text":"<p><code>class operator NotEqual(const ALeft: TBLString; const ARight: TBLStringView): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_38","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_31","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#NotEqual_4","title":"NotEqual(TBLString, TBLString)","text":"<p>Returns True if two strings are not equal (do not have the same contents). </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLString): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_39","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_32","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#NotEqual_5","title":"NotEqual(TBLString, Pointer)","text":"<p>Used to compare against <code>nil</code> (empty string). </p> <p><code>class operator NotEqual(const ALeft: TBLString; const ARight: Pointer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_40","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLString</code></p> <p><code>ARight</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_33","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLString/#Append_0","title":"Append(String)","text":"<p><code>procedure Append(const AStr: String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_41","title":"Parameters","text":"<p><code>AStr</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Append_1","title":"Append(UTF8String)","text":"<p><code>procedure Append(const AStr: UTF8String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_42","title":"Parameters","text":"<p><code>AStr</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Append_2","title":"Append(PUTF8Char, NativeInt)","text":"<p><code>procedure Append(const AStr: PUTF8Char; const ASize: NativeInt = -1); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_43","title":"Parameters","text":"<p><code>AStr</code>: <code>PUTF8Char</code></p> <p><code>ASize</code>: <code>NativeInt = -1</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Append_3","title":"Append(TBLStringView)","text":"<p><code>procedure Append(const AView: TBLStringView); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_44","title":"Parameters","text":"<p><code>AView</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Append_4","title":"Append(TBLString)","text":"<p><code>procedure Append(const AOther: TBLString); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_45","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Append_5","title":"Append(UTF8Char, NativeInt)","text":"<p><code>procedure Append(const AChar: UTF8Char; const ACount: NativeInt = 1); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_46","title":"Parameters","text":"<p><code>AChar</code>: <code>UTF8Char</code></p> <p><code>ACount</code>: <code>NativeInt = 1</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#AppendFormat","title":"AppendFormat(String, const[])","text":"<p><code>procedure AppendFormat(const AFmt: String; const AArgs: array of const)</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_47","title":"Parameters","text":"<p><code>AFmt</code>: <code>String</code></p> <p><code>AArgs</code>: <code>array of const</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Assign_0","title":"Assign(PUTF8Char, NativeInt)","text":"<p>Replaces the string by <code>AStr</code> data of the given length <code>ASize</code>. </p> <p><code>procedure Assign(const AStr: PUTF8Char; const ASize: NativeInt = -1); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_48","title":"Parameters","text":"<p><code>AStr</code>: <code>PUTF8Char</code></p> <p><code>ASize</code>: <code>NativeInt = -1</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#remarks_4","title":"Remarks","text":"<p>The implementation assumes null terminated string if <code>ASize</code> equals to <code>-1</code>. </p>"},{"location":"Reference/Blend2D/classes/TBLString/#Assign_1","title":"Assign(TBLStringView)","text":"<p>Replaces the string by the content described by the given string <code>AView</code>. </p> <p><code>procedure Assign(const AView: TBLStringView); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_10","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_49","title":"Parameters","text":"<p><code>AView</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Assign_2","title":"Assign(UTF8Char, NativeInt)","text":"<p>Replaces the content of the string by <code>AChar</code> character or multiple characters if <code>ACount</code> is greater than one. </p> <p><code>procedure Assign(const AChar: UTF8Char; const ACount: NativeInt = 1); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_11","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_50","title":"Parameters","text":"<p><code>AChar</code>: <code>UTF8Char</code></p> <p><code>ACount</code>: <code>NativeInt = 1</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#AssignDeep","title":"AssignDeep(TBLString)","text":"<p>Copy assignment, but creates a deep copy of the <code>AOther</code> string instead of weak copy. </p> <p><code>procedure AssignDeep(const AOther: TBLString); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_12","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_51","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#AssignFormat","title":"AssignFormat(String, const[])","text":"<p>Replaces the content of the string by a result of calling <code>Format(AFmt, AArgs)</code>. </p> <p><code>procedure AssignFormat(const AFmt: String; const AArgs: array of const)</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_13","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_52","title":"Parameters","text":"<p><code>AFmt</code>: <code>String</code></p> <p><code>AArgs</code>: <code>array of const</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#remarks_5","title":"Remarks","text":"<p>This involves a Unicode-to-UTF8 conversion. </p>"},{"location":"Reference/Blend2D/classes/TBLString/#At","title":"At(NativeInt)","text":"<p>Returns a character at the given <code>AIndex</code>. </p> <p><code>function At(const AIndex: NativeInt): UTF8Char; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_53","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_34","title":"Returns","text":"<p><code>UTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#remarks_6","title":"Remarks","text":"<p>Index must be valid and cannot be out of bounds - there is an assertion. </p>"},{"location":"Reference/Blend2D/classes/TBLString/#Clear","title":"Clear","text":"<p>Clears the content of the string without releasing its dynamically allocated data, if possible. </p> <p><code>procedure Clear; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_14","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#Compare_0","title":"Compare(String)","text":"<p>Compares this string with other string data and returns either <code>-1</code>, <code>0</code>, or <code>1</code>. </p> <p><code>function Compare(const AOther: String): Integer; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_54","title":"Parameters","text":"<p><code>AOther</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_35","title":"Returns","text":"<p><code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#remarks_7","title":"Remarks","text":"<p>This involves a Unicode-to-UTF8 conversion of AOther. </p>"},{"location":"Reference/Blend2D/classes/TBLString/#Compare_1","title":"Compare(UTF8String)","text":"<p>Compares this string with other string data and returns either <code>-1</code>, <code>0</code>, or <code>1</code>. </p> <p><code>function Compare(const AOther: UTF8String): Integer; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_55","title":"Parameters","text":"<p><code>AOther</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_36","title":"Returns","text":"<p><code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Compare_2","title":"Compare(PUTF8Char, NativeInt)","text":"<p>Compares this string with other string data and returns either <code>-1</code>, <code>0</code>, or <code>1</code>. </p> <p><code>function Compare(const AOther: PUTF8Char; const ASize: NativeInt = -1): Integer; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_56","title":"Parameters","text":"<p><code>AOther</code>: <code>PUTF8Char</code></p> <p><code>ASize</code>: <code>NativeInt = -1</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_37","title":"Returns","text":"<p><code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Compare_3","title":"Compare(TBLStringView)","text":"<p>Compares this string with other string <code>AView</code> and returns either <code>-1</code>, <code>0</code>, or <code>1</code>. </p> <p><code>function Compare(const AOther: TBLStringView): Integer; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_57","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_38","title":"Returns","text":"<p><code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Compare_4","title":"Compare(TBLString)","text":"<p>Compares this string with <code>AOther</code> and returns either <code>-1</code>, <code>0</code>, or <code>1</code>. </p> <p><code>function Compare(const AOther: TBLString): Integer; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_58","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_39","title":"Returns","text":"<p><code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Equals_0","title":"Equals(String)","text":"<p>Returns whether this string and the given Unicode string data <code>AStr</code> are equal. </p> <p><code>function Equals(const AOther: String): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_59","title":"Parameters","text":"<p><code>AOther</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_40","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#remarks_8","title":"Remarks","text":"<p>This involves a Unicode-to-UTF8 conversion of AOther. </p>"},{"location":"Reference/Blend2D/classes/TBLString/#Equals_1","title":"Equals(UTF8String)","text":"<p>Returns whether this string and the given UTF8 string data <code>AStr</code> are equal. </p> <p><code>function Equals(const AOther: UTF8String): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_60","title":"Parameters","text":"<p><code>AOther</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_41","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Equals_2","title":"Equals(PUTF8Char, NativeInt)","text":"<p>Returns whether this string and the given string data <code>AStr</code> of length <code>ASize</code> are equal. </p> <p><code>function Equals(const AOther: PUTF8Char; const ASize: NativeInt = -1): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_61","title":"Parameters","text":"<p><code>AOther</code>: <code>PUTF8Char</code></p> <p><code>ASize</code>: <code>NativeInt = -1</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_42","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Equals_3","title":"Equals(TBLStringView)","text":"<p>Returns whether this string and other string <code>AView</code> are equal. </p> <p><code>function Equals(const AOther: TBLStringView): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_62","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_43","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Equals_4","title":"Equals(TBLString)","text":"<p>Returns whether this string and <code>AOther</code> are equal (i.e. their contents match). </p> <p><code>function Equals(const AOther: TBLString): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_63","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_44","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#IndexOf_0","title":"IndexOf(UTF8Char, NativeInt)","text":"<p>Returns the index at which a given character <code>AChar</code> can be found in the string starting from <code>AFromIndex</code>, or -1 if not present. </p> <p><code>function IndexOf(const AChar: UTF8Char; const AFromIndex: NativeInt): NativeInt; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_64","title":"Parameters","text":"<p><code>AChar</code>: <code>UTF8Char</code></p> <p><code>AFromIndex</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_45","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#IndexOf_1","title":"IndexOf(UTF8Char)","text":"<p>Returns the first index at which a given character <code>AChar</code> can be found in the string, or -1 if not present. </p> <p><code>function IndexOf(const AChar: UTF8Char): NativeInt; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_65","title":"Parameters","text":"<p><code>AChar</code>: <code>UTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_46","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Insert_0","title":"Insert(NativeInt, String)","text":"<p><code>procedure Insert(const AIndex: NativeInt; const AStr: String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_66","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AStr</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Insert_1","title":"Insert(NativeInt, UTF8String)","text":"<p><code>procedure Insert(const AIndex: NativeInt; const AStr: UTF8String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_67","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AStr</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Insert_2","title":"Insert(NativeInt, PUTF8Char, NativeInt)","text":"<p><code>procedure Insert(const AIndex: NativeInt; const AStr: PUTF8Char; const ASize: NativeInt = -1); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_68","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AStr</code>: <code>PUTF8Char</code></p> <p><code>ASize</code>: <code>NativeInt = -1</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Insert_3","title":"Insert(NativeInt, TBLStringView)","text":"<p><code>procedure Insert(const AIndex: NativeInt; const AView: TBLStringView); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_69","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AView</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Insert_4","title":"Insert(NativeInt, TBLString)","text":"<p><code>procedure Insert(const AIndex: NativeInt; const AOther: TBLString); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_70","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AOther</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Insert_5","title":"Insert(NativeInt, UTF8Char, NativeInt)","text":"<p><code>procedure Insert(const AIndex: NativeInt; const AChar: UTF8Char; const ACount: NativeInt = 1); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_71","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>AChar</code>: <code>UTF8Char</code></p> <p><code>ACount</code>: <code>NativeInt = 1</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#InsertOp","title":"InsertOp(NativeInt, NativeInt)","text":"<p><code>function InsertOp(const AIndex, ASize: NativeInt): PUTF8Char; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_72","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_47","title":"Returns","text":"<p><code>PUTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#LastIndexOf_0","title":"LastIndexOf(UTF8Char, NativeInt)","text":"<p>Returns the index at which a given character <code>AChar</code> can be found in the string starting from <code>AFromIndex</code> and ending at <code>0</code>, or -1 if not present. </p> <p><code>function LastIndexOf(const AChar: UTF8Char; const AFromIndex: NativeInt): NativeInt; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_73","title":"Parameters","text":"<p><code>AChar</code>: <code>UTF8Char</code></p> <p><code>AFromIndex</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_48","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#LastIndexOf_1","title":"LastIndexOf(UTF8Char)","text":"<p>Returns the last index at which a given character <code>AChar</code> can be found in the string, or -1 if not present. </p> <p><code>function LastIndexOf(const AChar: UTF8Char): NativeInt; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_74","title":"Parameters","text":"<p><code>AChar</code>: <code>UTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_49","title":"Returns","text":"<p><code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#MakeMutable","title":"MakeMutable","text":"<p>Makes the string mutable.</p> <p>This operation checks whether the string is mutable and if not it makes a deep copy of its content so it can be modified. Please note that you can only modify the content that is defined by its length property. Even if the string had higher capacity before <code>MakeMutable</code> it's not guaranteed that the possible new data would match that capacity.</p> <p>If you want to make the string mutable for the purpose of appending or making other modifications please consider using <code>ModifyOp</code> and <code>InsertOp</code> instead. </p> <p><code>function MakeMutable: PUTF8Char; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_15","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_50","title":"Returns","text":"<p><code>PUTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#see-also","title":"See Also","text":"<ul> <li>ModifyOp</li> <li>InsertOp</li> </ul>"},{"location":"Reference/Blend2D/classes/TBLString/#ModifyOp","title":"ModifyOp(TBLModifyOp, NativeInt)","text":"<p><code>function ModifyOp(const AOp: TBLModifyOp; const ASize: NativeInt): PUTF8Char; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_75","title":"Parameters","text":"<p><code>AOp</code>: <code>TBLModifyOp</code></p> <p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_51","title":"Returns","text":"<p><code>PUTF8Char</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Prepend_0","title":"Prepend(String)","text":"<p><code>procedure Prepend(const AStr: String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_76","title":"Parameters","text":"<p><code>AStr</code>: <code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Prepend_1","title":"Prepend(UTF8String)","text":"<p><code>procedure Prepend(const AStr: UTF8String); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_77","title":"Parameters","text":"<p><code>AStr</code>: <code>UTF8String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Prepend_2","title":"Prepend(PUTF8Char, NativeInt)","text":"<p><code>procedure Prepend(const AStr: PUTF8Char; const ASize: NativeInt = -1); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_78","title":"Parameters","text":"<p><code>AStr</code>: <code>PUTF8Char</code></p> <p><code>ASize</code>: <code>NativeInt = -1</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Prepend_3","title":"Prepend(TBLStringView)","text":"<p><code>procedure Prepend(const AView: TBLStringView); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_79","title":"Parameters","text":"<p><code>AView</code>: <code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Prepend_4","title":"Prepend(TBLString)","text":"<p><code>procedure Prepend(const AOther: TBLString); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_80","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Prepend_5","title":"Prepend(UTF8Char, NativeInt)","text":"<p><code>procedure Prepend(const AChar: UTF8Char; const ACount: NativeInt = 1); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_81","title":"Parameters","text":"<p><code>AChar</code>: <code>UTF8Char</code></p> <p><code>ACount</code>: <code>NativeInt = 1</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Remove_0","title":"Remove(TBLRange)","text":"<p><code>procedure Remove(const ARange: TBLRange); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_82","title":"Parameters","text":"<p><code>ARange</code>: <code>TBLRange</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Remove_1","title":"Remove(NativeInt)","text":"<p><code>procedure Remove(const AIndex: NativeInt); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_83","title":"Parameters","text":"<p><code>AIndex</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Reserve","title":"Reserve(NativeInt)","text":"<p>Reserves at least <code>AMinSize</code> bytes (UTF8 characters) in the string for further manipulation (most probably appending). </p> <p><code>procedure Reserve(const AMinSize: NativeInt); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_16","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_84","title":"Parameters","text":"<p><code>AMinSize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Reset","title":"Reset","text":"<p>Clears the content of the string and releases its data.</p> <p>After reset the string content matches a default constructed string. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_17","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#Resize","title":"Resize(NativeInt, UTF8Char)","text":"<p>Resizes the string to <code>ASize</code> and fills the additional data by <code>AFill</code> pattern. </p> <p><code>procedure Resize(const ASize: NativeInt; const AFill: UTF8Char = #0); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_18","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_85","title":"Parameters","text":"<p><code>ASize</code>: <code>NativeInt</code></p> <p><code>AFill</code>: <code>UTF8Char = #0</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Shrink","title":"Shrink","text":"<p>Shrinks the capacity of the string to match the actual content. </p> <p><code>procedure Shrink; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_19","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#Swap","title":"Swap(TBLString)","text":"<p>Swaps the content of this string with the <code>AOther</code> string. </p> <p><code>procedure Swap(var AOther: TBLString); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_86","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#ToString","title":"ToString","text":"<p>Converts to a Delphi string </p> <p><code>function ToString: String; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_52","title":"Returns","text":"<p><code>String</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#Truncate","title":"Truncate(NativeInt)","text":"<p>Truncates the string length to <code>ASize</code>.</p> <p>It does nothing if the the string length is less than <code>ASize</code>. </p> <p><code>procedure Truncate(const ASize: NativeInt); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#exceptions_20","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLString/#parameters_87","title":"Parameters","text":"<p><code>ASize</code>: <code>NativeInt</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#View","title":"View","text":"<p>Returns the content of the string as <code>TBLStringView</code>. </p> <p><code>function View: TBLStringView; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLString/#returns_53","title":"Returns","text":"<p><code>TBLStringView</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/","title":"TBLStrokeOptions","text":"<p>Stroke options. </p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLStrokeOptions = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#properties","title":"Properties","text":"Name Description Caps DashArray DashOffset EndCap Join MiterLimit StartCap TransformOrder Width"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor. Finalize Destroys the stroke options object. Initialize Creates a default constructed stroke options object."},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#methods","title":"Methods","text":"Name Description Equals Reset SetCaps"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#Caps","title":"Caps","text":"<p><code>property Caps[const AIndex: TBLStrokeCapPosition]: TBLStrokeCap read GetCap write SetCap</code></p> <p>Type: <code>TBLStrokeCap</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#DashArray","title":"DashArray","text":"<p><code>property DashArray: TBLArray&lt;Double&gt; read FDashArray write FDashArray</code></p> <p>Type: <code>TBLArray&lt;Double&gt;</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#DashOffset","title":"DashOffset","text":"<p><code>property DashOffset: Double read FDashOffset write FDashOffset</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#EndCap","title":"EndCap","text":"<p><code>property EndCap: TBLStrokeCap read GetEndCap write SetEndCap</code></p> <p>Type: <code>TBLStrokeCap</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#Join","title":"Join","text":"<p><code>property Join: TBLStrokeJoin read GetJoin write SetJoin</code></p> <p>Type: <code>TBLStrokeJoin</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#MiterLimit","title":"MiterLimit","text":"<p><code>property MiterLimit: Double read FMiterLimit write FMiterLimit</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#StartCap","title":"StartCap","text":"<p><code>property StartCap: TBLStrokeCap read GetStartCap write SetStartCap</code></p> <p>Type: <code>TBLStrokeCap</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#TransformOrder","title":"TransformOrder","text":"<p><code>property TransformOrder: TBLStrokeTransformOrder read GetTransformOrder write SetTransformOrder</code></p> <p>Type: <code>TBLStrokeTransformOrder</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#Width","title":"Width","text":"<p><code>property Width: Double read FWidth write FWidth</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor.</p> <p>Creates a weak-copy of the <code>ASrc</code>. </p> <p><code>constructor Assign(var ADest: TBLStrokeOptions; const ASrc: TBLStrokeOptions); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLStrokeOptions</code></p> <p><code>ASrc</code>: <code>TBLStrokeOptions</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the stroke options object. </p> <p><code>destructor Finalize(var ADest: TBLStrokeOptions)</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLStrokeOptions</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default constructed stroke options object. </p> <p><code>constructor Initialize(out ADest: TBLStrokeOptions)</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLStrokeOptions</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#Equal","title":"Equal(TBLStrokeOptions, TBLStrokeOptions)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLStrokeOptions): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLStrokeOptions</code></p> <p><code>ARight</code>: <code>TBLStrokeOptions</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#NotEqual","title":"NotEqual(TBLStrokeOptions, TBLStrokeOptions)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLStrokeOptions): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLStrokeOptions</code></p> <p><code>ARight</code>: <code>TBLStrokeOptions</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#Equals","title":"Equals(TBLStrokeOptions)","text":"<p><code>function Equals(const AOther: TBLStrokeOptions): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#parameters_5","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLStrokeOptions</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#SetCaps","title":"SetCaps(TBLStrokeCap)","text":"<p><code>procedure SetCaps(const ACap: TBLStrokeCap); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLStrokeOptions/#parameters_6","title":"Parameters","text":"<p><code>ACap</code>: <code>TBLStrokeCap</code></p>"},{"location":"Reference/Blend2D/classes/TBLTextMetrics/","title":"TBLTextMetrics","text":"<p>Text metrics. </p>"},{"location":"Reference/Blend2D/classes/TBLTextMetrics/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLTextMetrics = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLTextMetrics/#properties","title":"Properties","text":"Name Description Advance BoundingBox LeadingBearing TrailingBearing"},{"location":"Reference/Blend2D/classes/TBLTextMetrics/#methods","title":"Methods","text":"Name Description Reset"},{"location":"Reference/Blend2D/classes/TBLTextMetrics/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLTextMetrics/#Advance","title":"Advance","text":"<p><code>property Advance: TBLPoint read FAdvance</code></p> <p>Type: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLTextMetrics/#BoundingBox","title":"BoundingBox","text":"<p><code>property BoundingBox: TBLBox read FBoundingBox</code></p> <p>Type: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/classes/TBLTextMetrics/#LeadingBearing","title":"LeadingBearing","text":"<p><code>property LeadingBearing: TBLPoint read FLeadingBearing</code></p> <p>Type: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLTextMetrics/#TrailingBearing","title":"TrailingBearing","text":"<p><code>property TrailingBearing: TBLPoint read FTrailingBearing</code></p> <p>Type: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/classes/TBLTextMetrics/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLTextMetrics/#Reset","title":"Reset","text":"<p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/","title":"TBLTriangle","text":"<p>Triangle data specified as [X0, Y0, X1, Y1, X2, Y2] using <code>Double</code> as a storage type. </p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLTriangle = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#fields","title":"Fields","text":"Name Description X0 X1 X2 Y0 Y1 Y2"},{"location":"Reference/Blend2D/classes/TBLTriangle/#constructors","title":"Constructors","text":"Name Description Create"},{"location":"Reference/Blend2D/classes/TBLTriangle/#operators","title":"Operators","text":"Name Description Equal NotEqual"},{"location":"Reference/Blend2D/classes/TBLTriangle/#methods","title":"Methods","text":"Name Description Equals Reset(TBLTriangle) Reset(Double, Double, Double, Double, Double, Double) Reset"},{"location":"Reference/Blend2D/classes/TBLTriangle/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLTriangle/#X0","title":"X0","text":"<p><code>var X0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#X1","title":"X1","text":"<p><code>var X1: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#X2","title":"X2","text":"<p><code>var X2: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#Y0","title":"Y0","text":"<p><code>var Y0: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#Y1","title":"Y1","text":"<p><code>var Y1: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#Y2","title":"Y2","text":"<p><code>var Y2: Double</code></p> <p>Type: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLTriangle/#Create","title":"<code>Create</code>","text":"<p><code>constructor Create(const AX0, AY0, AX1, AY1, AX2, AY2: Double)</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLTriangle/#Equal","title":"Equal(TBLTriangle, TBLTriangle)","text":"<p><code>class operator Equal(const ALeft, ARight: TBLTriangle): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#parameters_1","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLTriangle</code></p> <p><code>ARight</code>: <code>TBLTriangle</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#NotEqual","title":"NotEqual(TBLTriangle, TBLTriangle)","text":"<p><code>class operator NotEqual(const ALeft, ARight: TBLTriangle): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#parameters_2","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLTriangle</code></p> <p><code>ARight</code>: <code>TBLTriangle</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLTriangle/#Equals","title":"Equals(TBLTriangle)","text":"<p><code>function Equals(const AOther: TBLTriangle): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#parameters_3","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLTriangle</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#Reset_0","title":"Reset(TBLTriangle)","text":"<p><code>procedure Reset(const AOther: TBLTriangle); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#parameters_4","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLTriangle</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#Reset_1","title":"Reset(Double, Double, Double, Double, Double, Double)","text":"<p><code>procedure Reset(const AX0, AY0, AX1, AY1, AX2, AY2: Double); overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#parameters_5","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLTriangle/#Reset_2","title":"Reset","text":"<p><code>procedure Reset; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/","title":"TBLVar","text":"<p>Blend2D variant. </p>"},{"location":"Reference/Blend2D/classes/TBLVar/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLVar = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TBLVar/#properties","title":"Properties","text":"Name Description IsArray Whether this <code>TBLVar</code> instance represents a `TBLArray IsBitArray Whether this <code>TBLVar</code> instance represents <code>TBLBitArray</code>. IsBoolean Whether this <code>TBLVar</code> instance represents a boxed <code>Boolean</code> value. IsContext Whether this <code>TBLVar</code> instance represents <code>TBLContext</code>. IsDouble Whether this <code>TBLVar</code> instance represents a boxed <code>Double</code> value. IsFont Whether this <code>TBLVar</code> instance represents <code>TBLFont</code>. IsFontData Whether this <code>TBLVar</code> instance represents <code>TBLFontData</code>. IsFontFace Whether this <code>TBLVar</code> instance represents <code>TBLFontFace</code>. IsFontManager Whether this <code>TBLVar</code> instance represents <code>TBLFontManager</code>. IsGradient Whether this <code>TBLVar</code> instance represents <code>TBLGradient</code>. IsImage Whether this <code>TBLVar</code> instance represents <code>TBLImage</code>. IsImageCodec Whether this <code>TBLVar</code> instance represents <code>TBLImageCodec</code>. IsImageDecoder Whether this <code>TBLVar</code> instance represents <code>TBLImageDecoder</code>. IsImageEncoder Whether this <code>TBLVar</code> instance represents <code>TBLImageEncoder</code>. IsInt64 Whether this <code>TBLVar</code> instance represents a boxed <code>Int64</code> value. IsNull Whether this <code>TBLVar</code> instance represents a null value. IsPath Whether this <code>TBLVar</code> instance represents <code>TBLPath</code>. IsPattern Whether this <code>TBLVar</code> instance represents <code>TBLPattern</code>. IsRgba Whether this <code>TBLVar</code> instance represents boxed <code>TBLRgba</code>. IsRgba32 Whether this <code>TBLVar</code> instance represents boxed <code>TBLRgba32</code>. IsRgba64 Whether this <code>TBLVar</code> instance represents boxed <code>TBLRgba64</code>. IsString Whether this <code>TBLVar</code> instance represents <code>TBLString</code>. IsStyle Whether this <code>TBLVar</code> instance is a style that can be used with the rendering context. IsUInt64 Whether this <code>TBLVar</code> instance represents a boxed <code>UIn64</code> value. Null ObjectType The type of the underlying object."},{"location":"Reference/Blend2D/classes/TBLVar/#constructors","title":"Constructors","text":"Name Description Assign Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> variant. Finalize Destroys the variant. Initialize Creates a default initialized variant."},{"location":"Reference/Blend2D/classes/TBLVar/#operators","title":"Operators","text":"Name Description Equal(TBLVar, TBLString) Equal(TBLVar, TBLPattern) Equal(TBLVar, TBLPath) Equal(TBLVar, TBLImageEncoder) Equal(TBLVar, TBLImageDecoder) Equal(TBLVar, TBLImageCodec) Equal(TBLVar, TBLImage) Equal(TBLVar, TBLGradient) Equal(TBLVar, TBLFontManager) Equal(TBLVar, TBLFontFace) Equal(TBLVar, TBLFontData) Equal(TBLVar, TBLFont) Equal(TBLVar, TBLBitArray) Equal(TBLVar, TBLRgba64) Equal(TBLVar, TBLRgba32) Equal(TBLVar, TBLRgba) Equal(TBLVar, Double) Equal(TBLVar, UInt64) Equal(TBLVar, Int64) Equal(TBLVar, Cardinal) Equal(TBLVar, Integer) Equal(TBLVar, Boolean) Equal(TBLVar, TBLVar) Returns True if two variants are equal (have the same contents). Implicit(TBLString) Implicit(TBLPattern) Implicit(TBLPath) Implicit(TBLImageEncoder) Implicit(TBLImageDecoder) Implicit(TBLImageCodec) Implicit(TBLImage) Implicit(TBLGradient) Implicit(TBLFontManager) Implicit(TBLFontFace) Implicit(TBLFontData) Implicit(TBLFont) Implicit(TBLBitArray) Implicit(TBLRgba64) Implicit(TBLRgba32) Implicit(TBLRgba) Implicit(Double) Implicit(UInt64) Implicit(Int64) Implicit(Cardinal) Implicit(Integer) Implicit(Boolean) NotEqual(TBLVar, TBLString) NotEqual(TBLVar, TBLPattern) NotEqual(TBLVar, TBLPath) NotEqual(TBLVar, TBLImageEncoder) NotEqual(TBLVar, TBLImageDecoder) NotEqual(TBLVar, TBLImageCodec) NotEqual(TBLVar, TBLImage) NotEqual(TBLVar, TBLGradient) NotEqual(TBLVar, TBLFontManager) NotEqual(TBLVar, TBLFontFace) NotEqual(TBLVar, TBLFontData) NotEqual(TBLVar, TBLFont) NotEqual(TBLVar, TBLBitArray) NotEqual(TBLVar, TBLRgba64) NotEqual(TBLVar, TBLRgba32) NotEqual(TBLVar, TBLRgba) NotEqual(TBLVar, Double) NotEqual(TBLVar, UInt64) NotEqual(TBLVar, Int64) NotEqual(TBLVar, Cardinal) NotEqual(TBLVar, Integer) NotEqual(TBLVar, Boolean) NotEqual(TBLVar, TBLVar) Returns True if two variants are not equal (do not have the same contents)."},{"location":"Reference/Blend2D/classes/TBLVar/#methods","title":"Methods","text":"Name Description Equals(TBLString) Equals(TBLPattern) Equals(TBLPath) Equals(TBLImageEncoder) Equals(TBLImageDecoder) Equals(TBLImageCodec) Equals(TBLImage) Equals(TBLGradient) Equals(TBLFontManager) Equals(TBLFontFace) Equals(TBLFontData) Equals(TBLFont) Equals(TBLBitArray) Equals(TBLRgba64) Equals(TBLRgba32) Equals(TBLRgba) Equals(Double) Equals(UInt64) Equals(Int64) Equals(Cardinal) Equals(Integer) Equals(Boolean) Equals(TBLVar) Tests whether this and <code>AOther</code> variants are equal. Reset Resets the variant to a default constructed state. StrictEquals Swap Swaps the underlying representation of this variant with the <code>AOther</code> variant. ToBoolean Converts this value to <code>Boolean</code>. ToCardinal Converts this value to <code>Cardinal</code>. ToDouble Converts this value to <code>Double</code>. ToInt64 Converts this value to <code>Int64</code>. ToInteger Converts this value to <code>Integer</code>. ToRgba Converts this value to <code>TBLRgba</code>. ToRgba32 Converts this value to <code>TBLRgba32</code>. ToRgba64 Converts this value to <code>TBLRgba64</code>. ToUInt64 Converts this value to <code>UInt64</code>."},{"location":"Reference/Blend2D/classes/TBLVar/#property-descriptions","title":"Property Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLVar/#IsArray","title":"IsArray","text":"<p>Whether this <code>TBLVar</code> instance represents a <code>TBLArray&lt;t&gt;</code> storing any supported type. Raised on failure.</p> <p><code>property IsArray: Boolean read GetIsArray</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsBitArray","title":"IsBitArray","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLBitArray</code>. </p> <p><code>property IsBitArray: Boolean read GetIsBitArray</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsBoolean","title":"IsBoolean","text":"<p>Whether this <code>TBLVar</code> instance represents a boxed <code>Boolean</code> value. </p> <p><code>property IsBoolean: Boolean read GetIsBoolean</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_1","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsContext","title":"IsContext","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLContext</code>. </p> <p><code>property IsContext: Boolean read GetIsContext</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_2","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsDouble","title":"IsDouble","text":"<p>Whether this <code>TBLVar</code> instance represents a boxed <code>Double</code> value. </p> <p><code>property IsDouble: Boolean read GetIsDouble</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_3","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsFont","title":"IsFont","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLFont</code>. </p> <p><code>property IsFont: Boolean read GetIsFont</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_4","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsFontData","title":"IsFontData","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLFontData</code>. </p> <p><code>property IsFontData: Boolean read GetIsFontData</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_5","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsFontFace","title":"IsFontFace","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLFontFace</code>. </p> <p><code>property IsFontFace: Boolean read GetIsFontFace</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_6","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsFontManager","title":"IsFontManager","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLFontManager</code>. </p> <p><code>property IsFontManager: Boolean read GetIsFontManager</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_7","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsGradient","title":"IsGradient","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLGradient</code>. </p> <p><code>property IsGradient: Boolean read GetIsGradient</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_8","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsImage","title":"IsImage","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLImage</code>. </p> <p><code>property IsImage: Boolean read GetIsImage</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_9","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsImageCodec","title":"IsImageCodec","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLImageCodec</code>. </p> <p><code>property IsImageCodec: Boolean read GetIsImageCodec</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_10","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsImageDecoder","title":"IsImageDecoder","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLImageDecoder</code>. </p> <p><code>property IsImageDecoder: Boolean read GetIsImageDecoder</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_11","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsImageEncoder","title":"IsImageEncoder","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLImageEncoder</code>. </p> <p><code>property IsImageEncoder: Boolean read GetIsImageEncoder</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_12","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsInt64","title":"IsInt64","text":"<p>Whether this <code>TBLVar</code> instance represents a boxed <code>Int64</code> value. </p> <p><code>property IsInt64: Boolean read GetIsInt64</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_13","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsNull","title":"IsNull","text":"<p>Whether this <code>TBLVar</code> instance represents a null value. </p> <p><code>property IsNull: Boolean read GetIsNull</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_14","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsPath","title":"IsPath","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLPath</code>. </p> <p><code>property IsPath: Boolean read GetIsPath</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_15","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsPattern","title":"IsPattern","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLPattern</code>. </p> <p><code>property IsPattern: Boolean read GetIsPattern</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_16","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsRgba","title":"IsRgba","text":"<p>Whether this <code>TBLVar</code> instance represents boxed <code>TBLRgba</code>. </p> <p><code>property IsRgba: Boolean read GetIsRgba</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_17","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsRgba32","title":"IsRgba32","text":"<p>Whether this <code>TBLVar</code> instance represents boxed <code>TBLRgba32</code>. </p> <p><code>property IsRgba32: Boolean read GetIsRgba32</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_18","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsRgba64","title":"IsRgba64","text":"<p>Whether this <code>TBLVar</code> instance represents boxed <code>TBLRgba64</code>. </p> <p><code>property IsRgba64: Boolean read GetIsRgba64</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_19","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsString","title":"IsString","text":"<p>Whether this <code>TBLVar</code> instance represents <code>TBLString</code>. </p> <p><code>property IsString: Boolean read GetIsString</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_20","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsStyle","title":"IsStyle","text":"<p>Whether this <code>TBLVar</code> instance is a style that can be used with the rendering context. </p> <p><code>property IsStyle: Boolean read GetIsStyle</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_21","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#IsUInt64","title":"IsUInt64","text":"<p>Whether this <code>TBLVar</code> instance represents a boxed <code>UIn64</code> value. </p> <p><code>property IsUInt64: Boolean read GetIsUInt64</code></p> <p>Type: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_22","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Null","title":"Null","text":"<p><code>class property Null: TBLVar read GetNull</code></p> <p>Type: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#ObjectType","title":"ObjectType","text":"<p>The type of the underlying object. </p> <p><code>property ObjectType: TBLObjectType read GetObjectType</code></p> <p>Type: <code>TBLObjectType</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_23","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#constructor-descriptions","title":"Constructor Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLVar/#Assign","title":"<code>Assign</code>","text":"<p>Copy constructor makes a weak copy of the underlying representation of the <code>ASrc</code> variant. </p> <p><code>constructor Assign(var ADest: TBLVar; const ASrc: TBLVar); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLVar</code></p> <p><code>ASrc</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_24","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Finalize","title":"<code>Finalize</code>","text":"<p>Destroys the variant. </p> <p><code>destructor Finalize(var ADest: TBLVar)</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_1","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_25","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Initialize","title":"<code>Initialize</code>","text":"<p>Creates a default initialized variant. </p> <p><code>constructor Initialize(out ADest: TBLVar)</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_2","title":"Parameters","text":"<p><code>ADest</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_26","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#operator-descriptions","title":"Operator Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_0","title":"Equal(TBLVar, TBLString)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLString): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_3","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_1","title":"Equal(TBLVar, TBLPattern)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLPattern): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_4","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_1","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_2","title":"Equal(TBLVar, TBLPath)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLPath): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_5","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_2","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_3","title":"Equal(TBLVar, TBLImageEncoder)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLImageEncoder): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_6","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLImageEncoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_3","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_4","title":"Equal(TBLVar, TBLImageDecoder)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLImageDecoder): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_7","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLImageDecoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_4","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_5","title":"Equal(TBLVar, TBLImageCodec)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLImageCodec): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_8","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_5","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_6","title":"Equal(TBLVar, TBLImage)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLImage): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_9","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_6","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_7","title":"Equal(TBLVar, TBLGradient)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLGradient): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_10","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_7","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_8","title":"Equal(TBLVar, TBLFontManager)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLFontManager): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_11","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLFontManager</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_8","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_9","title":"Equal(TBLVar, TBLFontFace)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLFontFace): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_12","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_9","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_10","title":"Equal(TBLVar, TBLFontData)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLFontData): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_13","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLFontData</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_10","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_11","title":"Equal(TBLVar, TBLFont)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLFont): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_14","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLFont</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_11","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_12","title":"Equal(TBLVar, TBLBitArray)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLBitArray): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_15","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_12","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_13","title":"Equal(TBLVar, TBLRgba64)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLRgba64): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_16","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_13","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_14","title":"Equal(TBLVar, TBLRgba32)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLRgba32): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_17","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_14","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_15","title":"Equal(TBLVar, TBLRgba)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: TBLRgba): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_18","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_15","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_16","title":"Equal(TBLVar, Double)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: Double): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_19","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_16","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_17","title":"Equal(TBLVar, UInt64)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: UInt64): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_20","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_17","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_18","title":"Equal(TBLVar, Int64)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: Int64): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_21","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_18","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_19","title":"Equal(TBLVar, Cardinal)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: Cardinal): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_22","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_19","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_20","title":"Equal(TBLVar, Integer)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: Integer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_23","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_20","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_21","title":"Equal(TBLVar, Boolean)","text":"<p><code>class operator Equal(const ALeft: TBLVar; const ARight: Boolean): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_24","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_21","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equal_22","title":"Equal(TBLVar, TBLVar)","text":"<p>Returns True if two variants are equal (have the same contents). </p> <p><code>class operator Equal(const ALeft, ARight: TBLVar): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_25","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_22","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_0","title":"Implicit(TBLString)","text":"<p><code>class operator Implicit(const AValue: TBLString): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_26","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_23","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_1","title":"Implicit(TBLPattern)","text":"<p><code>class operator Implicit(const AValue: TBLPattern): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_27","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_24","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_2","title":"Implicit(TBLPath)","text":"<p><code>class operator Implicit(const AValue: TBLPath): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_28","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_25","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_3","title":"Implicit(TBLImageEncoder)","text":"<p><code>class operator Implicit(const AValue: TBLImageEncoder): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_29","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLImageEncoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_26","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_4","title":"Implicit(TBLImageDecoder)","text":"<p><code>class operator Implicit(const AValue: TBLImageDecoder): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_30","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLImageDecoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_27","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_5","title":"Implicit(TBLImageCodec)","text":"<p><code>class operator Implicit(const AValue: TBLImageCodec): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_31","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_28","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_6","title":"Implicit(TBLImage)","text":"<p><code>class operator Implicit(const AValue: TBLImage): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_32","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_29","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_7","title":"Implicit(TBLGradient)","text":"<p><code>class operator Implicit(const AValue: TBLGradient): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_33","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_30","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_8","title":"Implicit(TBLFontManager)","text":"<p><code>class operator Implicit(const AValue: TBLFontManager): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_34","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLFontManager</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_31","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_9","title":"Implicit(TBLFontFace)","text":"<p><code>class operator Implicit(const AValue: TBLFontFace): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_35","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_32","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_10","title":"Implicit(TBLFontData)","text":"<p><code>class operator Implicit(const AValue: TBLFontData): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_36","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLFontData</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_33","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_11","title":"Implicit(TBLFont)","text":"<p><code>class operator Implicit(const AValue: TBLFont): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_37","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLFont</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_34","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_12","title":"Implicit(TBLBitArray)","text":"<p><code>class operator Implicit(const AValue: TBLBitArray): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_38","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_35","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_13","title":"Implicit(TBLRgba64)","text":"<p><code>class operator Implicit(const AValue: TBLRgba64): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_39","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_36","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_14","title":"Implicit(TBLRgba32)","text":"<p><code>class operator Implicit(const AValue: TBLRgba32): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_40","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_37","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_15","title":"Implicit(TBLRgba)","text":"<p><code>class operator Implicit(const AValue: TBLRgba): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_41","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_38","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_16","title":"Implicit(Double)","text":"<p><code>class operator Implicit(const AValue: Double): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_42","title":"Parameters","text":"<p><code>AValue</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_39","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_17","title":"Implicit(UInt64)","text":"<p><code>class operator Implicit(const AValue: UInt64): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_43","title":"Parameters","text":"<p><code>AValue</code>: <code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_40","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_18","title":"Implicit(Int64)","text":"<p><code>class operator Implicit(const AValue: Int64): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_44","title":"Parameters","text":"<p><code>AValue</code>: <code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_41","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_19","title":"Implicit(Cardinal)","text":"<p><code>class operator Implicit(const AValue: Cardinal): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_45","title":"Parameters","text":"<p><code>AValue</code>: <code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_42","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_20","title":"Implicit(Integer)","text":"<p><code>class operator Implicit(const AValue: Integer): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_46","title":"Parameters","text":"<p><code>AValue</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_43","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Implicit_21","title":"Implicit(Boolean)","text":"<p><code>class operator Implicit(const AValue: Boolean): TBLVar; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_47","title":"Parameters","text":"<p><code>AValue</code>: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_44","title":"Returns","text":"<p><code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_0","title":"NotEqual(TBLVar, TBLString)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLString): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_48","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_45","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_1","title":"NotEqual(TBLVar, TBLPattern)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLPattern): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_49","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_46","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_2","title":"NotEqual(TBLVar, TBLPath)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLPath): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_50","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_47","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_3","title":"NotEqual(TBLVar, TBLImageEncoder)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLImageEncoder): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_51","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLImageEncoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_48","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_4","title":"NotEqual(TBLVar, TBLImageDecoder)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLImageDecoder): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_52","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLImageDecoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_49","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_5","title":"NotEqual(TBLVar, TBLImageCodec)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLImageCodec): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_53","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_50","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_6","title":"NotEqual(TBLVar, TBLImage)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLImage): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_54","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_51","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_7","title":"NotEqual(TBLVar, TBLGradient)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLGradient): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_55","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_52","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_8","title":"NotEqual(TBLVar, TBLFontManager)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLFontManager): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_56","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLFontManager</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_53","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_9","title":"NotEqual(TBLVar, TBLFontFace)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLFontFace): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_57","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_54","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_10","title":"NotEqual(TBLVar, TBLFontData)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLFontData): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_58","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLFontData</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_55","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_11","title":"NotEqual(TBLVar, TBLFont)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLFont): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_59","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLFont</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_56","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_12","title":"NotEqual(TBLVar, TBLBitArray)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLBitArray): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_60","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_57","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_13","title":"NotEqual(TBLVar, TBLRgba64)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLRgba64): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_61","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_58","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_14","title":"NotEqual(TBLVar, TBLRgba32)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLRgba32): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_62","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_59","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_15","title":"NotEqual(TBLVar, TBLRgba)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: TBLRgba): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_63","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_60","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_16","title":"NotEqual(TBLVar, Double)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: Double): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_64","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_61","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_17","title":"NotEqual(TBLVar, UInt64)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: UInt64): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_65","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_62","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_18","title":"NotEqual(TBLVar, Int64)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: Int64): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_66","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_63","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_19","title":"NotEqual(TBLVar, Cardinal)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: Cardinal): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_67","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_64","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_20","title":"NotEqual(TBLVar, Integer)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: Integer): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_68","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_65","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_21","title":"NotEqual(TBLVar, Boolean)","text":"<p><code>class operator NotEqual(const ALeft: TBLVar; const ARight: Boolean): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_69","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_66","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#NotEqual_22","title":"NotEqual(TBLVar, TBLVar)","text":"<p>Returns True if two variants are not equal (do not have the same contents). </p> <p><code>class operator NotEqual(const ALeft, ARight: TBLVar): Boolean; inline; static</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_70","title":"Parameters","text":"<p><code>ALeft</code>: <code>TBLVar</code></p> <p><code>ARight</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_67","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_0","title":"Equals(TBLString)","text":"<p><code>function Equals(const AOther: TBLString): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_71","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLString</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_68","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_1","title":"Equals(TBLPattern)","text":"<p><code>function Equals(const AOther: TBLPattern): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_72","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLPattern</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_69","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_2","title":"Equals(TBLPath)","text":"<p><code>function Equals(const AOther: TBLPath): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_73","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLPath</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_70","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_3","title":"Equals(TBLImageEncoder)","text":"<p><code>function Equals(const AOther: TBLImageEncoder): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_74","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImageEncoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_71","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_4","title":"Equals(TBLImageDecoder)","text":"<p><code>function Equals(const AOther: TBLImageDecoder): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_75","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImageDecoder</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_72","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_5","title":"Equals(TBLImageCodec)","text":"<p><code>function Equals(const AOther: TBLImageCodec): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_76","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImageCodec</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_73","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_6","title":"Equals(TBLImage)","text":"<p><code>function Equals(const AOther: TBLImage): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_77","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLImage</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_74","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_7","title":"Equals(TBLGradient)","text":"<p><code>function Equals(const AOther: TBLGradient): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_78","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLGradient</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_75","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_8","title":"Equals(TBLFontManager)","text":"<p><code>function Equals(const AOther: TBLFontManager): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_79","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontManager</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_76","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_9","title":"Equals(TBLFontFace)","text":"<p><code>function Equals(const AOther: TBLFontFace): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_80","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontFace</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_77","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_10","title":"Equals(TBLFontData)","text":"<p><code>function Equals(const AOther: TBLFontData): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_81","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFontData</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_78","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_11","title":"Equals(TBLFont)","text":"<p><code>function Equals(const AOther: TBLFont): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_82","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLFont</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_79","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_12","title":"Equals(TBLBitArray)","text":"<p><code>function Equals(const AOther: TBLBitArray): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_83","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLBitArray</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_80","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_13","title":"Equals(TBLRgba64)","text":"<p><code>function Equals(const AOther: TBLRgba64): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_84","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_81","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_14","title":"Equals(TBLRgba32)","text":"<p><code>function Equals(const AOther: TBLRgba32): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_85","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_82","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_15","title":"Equals(TBLRgba)","text":"<p><code>function Equals(const AOther: TBLRgba): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_86","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_83","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_16","title":"Equals(Double)","text":"<p><code>function Equals(const AOther: Double): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_87","title":"Parameters","text":"<p><code>AOther</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_84","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_17","title":"Equals(UInt64)","text":"<p><code>function Equals(const AOther: UInt64): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_88","title":"Parameters","text":"<p><code>AOther</code>: <code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_85","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_18","title":"Equals(Int64)","text":"<p><code>function Equals(const AOther: Int64): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_89","title":"Parameters","text":"<p><code>AOther</code>: <code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_86","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_19","title":"Equals(Cardinal)","text":"<p><code>function Equals(const AOther: Cardinal): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_90","title":"Parameters","text":"<p><code>AOther</code>: <code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_87","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_20","title":"Equals(Integer)","text":"<p><code>function Equals(const AOther: Integer): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_91","title":"Parameters","text":"<p><code>AOther</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_88","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_21","title":"Equals(Boolean)","text":"<p><code>function Equals(const AOther: Boolean): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_92","title":"Parameters","text":"<p><code>AOther</code>: <code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_89","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Equals_22","title":"Equals(TBLVar)","text":"<p>Tests whether this and <code>AOther</code> variants are equal. </p> <p><code>function Equals(const AOther: TBLVar): Boolean; overload; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_93","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_90","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Reset","title":"Reset","text":"<p>Resets the variant to a default constructed state. </p> <p><code>procedure Reset; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_27","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#StrictEquals","title":"StrictEquals(TBLVar)","text":"<p><code>function StrictEquals(const AOther: TBLVar): Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_94","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_91","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#Swap","title":"Swap(TBLVar)","text":"<p>Swaps the underlying representation of this variant with the <code>AOther</code> variant. </p> <p><code>procedure Swap(var AOther: TBLVar); inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#parameters_95","title":"Parameters","text":"<p><code>AOther</code>: <code>TBLVar</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#ToBoolean","title":"ToBoolean","text":"<p>Converts this value to <code>Boolean</code>. </p> <p><code>function ToBoolean: Boolean; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_28","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_92","title":"Returns","text":"<p><code>Boolean</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#ToCardinal","title":"ToCardinal","text":"<p>Converts this value to <code>Cardinal</code>. </p> <p><code>function ToCardinal: Cardinal; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_29","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_93","title":"Returns","text":"<p><code>Cardinal</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#ToDouble","title":"ToDouble","text":"<p>Converts this value to <code>Double</code>. </p> <p><code>function ToDouble: Double; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_30","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_94","title":"Returns","text":"<p><code>Double</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#ToInt64","title":"ToInt64","text":"<p>Converts this value to <code>Int64</code>. </p> <p><code>function ToInt64: Int64; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_31","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_95","title":"Returns","text":"<p><code>Int64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#ToInteger","title":"ToInteger","text":"<p>Converts this value to <code>Integer</code>. </p> <p><code>function ToInteger: Integer; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_32","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_96","title":"Returns","text":"<p><code>Integer</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#ToRgba","title":"ToRgba","text":"<p>Converts this value to <code>TBLRgba</code>. </p> <p><code>function ToRgba: TBLRgba; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_33","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_97","title":"Returns","text":"<p><code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#ToRgba32","title":"ToRgba32","text":"<p>Converts this value to <code>TBLRgba32</code>. </p> <p><code>function ToRgba32: TBLRgba32; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_34","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_98","title":"Returns","text":"<p><code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#ToRgba64","title":"ToRgba64","text":"<p>Converts this value to <code>TBLRgba64</code>. </p> <p><code>function ToRgba64: TBLRgba64; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_35","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_99","title":"Returns","text":"<p><code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#ToUInt64","title":"ToUInt64","text":"<p>Converts this value to <code>UInt64</code>. </p> <p><code>function ToUInt64: UInt64; inline</code></p>"},{"location":"Reference/Blend2D/classes/TBLVar/#exceptions_36","title":"Exceptions","text":"<p><code>EBlend2DError</code>: Raised on failure.</p>"},{"location":"Reference/Blend2D/classes/TBLVar/#returns_100","title":"Returns","text":"<p><code>UInt64</code></p>"},{"location":"Reference/Blend2D/classes/TDecorative/","title":"TBLFontPanose.TDecorative","text":""},{"location":"Reference/Blend2D/classes/TDecorative/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TDecorative = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TDecorative/#fields","title":"Fields","text":"Name Description Aspect CharacterRange Contrast DecorativeClass FamilyKind Lining SerifVariant Topology Treatment Weight"},{"location":"Reference/Blend2D/classes/TDecorative/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TDecorative/#Aspect","title":"Aspect","text":"<p><code>var Aspect: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TDecorative/#CharacterRange","title":"CharacterRange","text":"<p><code>var CharacterRange: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TDecorative/#Contrast","title":"Contrast","text":"<p><code>var Contrast: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TDecorative/#DecorativeClass","title":"DecorativeClass","text":"<p><code>var DecorativeClass: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TDecorative/#FamilyKind","title":"FamilyKind","text":"<p><code>var FamilyKind: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TDecorative/#Lining","title":"Lining","text":"<p><code>var Lining: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TDecorative/#SerifVariant","title":"SerifVariant","text":"<p><code>var SerifVariant: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TDecorative/#Topology","title":"Topology","text":"<p><code>var Topology: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TDecorative/#Treatment","title":"Treatment","text":"<p><code>var Treatment: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TDecorative/#Weight","title":"Weight","text":"<p><code>var Weight: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TScript/","title":"TBLFontPanose.TScript","text":""},{"location":"Reference/Blend2D/classes/TScript/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TScript = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TScript/#fields","title":"Fields","text":"Name Description AspectRatio Contrast FamilyKind Finals Form Spacing ToolKind Topology Weight XAscent"},{"location":"Reference/Blend2D/classes/TScript/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TScript/#AspectRatio","title":"AspectRatio","text":"<p><code>var AspectRatio: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TScript/#Contrast","title":"Contrast","text":"<p><code>var Contrast: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TScript/#FamilyKind","title":"FamilyKind","text":"<p><code>var FamilyKind: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TScript/#Finals","title":"Finals","text":"<p><code>var Finals: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TScript/#Form","title":"Form","text":"<p><code>var Form: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TScript/#Spacing","title":"Spacing","text":"<p><code>var Spacing: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TScript/#ToolKind","title":"ToolKind","text":"<p><code>var ToolKind: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TScript/#Topology","title":"Topology","text":"<p><code>var Topology: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TScript/#Weight","title":"Weight","text":"<p><code>var Weight: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TScript/#XAscent","title":"XAscent","text":"<p><code>var XAscent: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TSymbol/","title":"TBLFontPanose.TSymbol","text":""},{"location":"Reference/Blend2D/classes/TSymbol/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TSymbol = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TSymbol/#fields","title":"Fields","text":"Name Description AspectRatio119 AspectRatio157 AspectRatio163 AspectRatio211 AspectRatio94 AspectRatioAndContrast FamilyKind Spacing SymbolKind Weight"},{"location":"Reference/Blend2D/classes/TSymbol/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TSymbol/#AspectRatio119","title":"AspectRatio119","text":"<p><code>var AspectRatio119: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TSymbol/#AspectRatio157","title":"AspectRatio157","text":"<p><code>var AspectRatio157: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TSymbol/#AspectRatio163","title":"AspectRatio163","text":"<p><code>var AspectRatio163: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TSymbol/#AspectRatio211","title":"AspectRatio211","text":"<p><code>var AspectRatio211: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TSymbol/#AspectRatio94","title":"AspectRatio94","text":"<p><code>var AspectRatio94: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TSymbol/#AspectRatioAndContrast","title":"AspectRatioAndContrast","text":"<p><code>var AspectRatioAndContrast: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TSymbol/#FamilyKind","title":"FamilyKind","text":"<p><code>var FamilyKind: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TSymbol/#Spacing","title":"Spacing","text":"<p><code>var Spacing: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TSymbol/#SymbolKind","title":"SymbolKind","text":"<p><code>var SymbolKind: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TSymbol/#Weight","title":"Weight","text":"<p><code>var Weight: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TText/","title":"TBLFontPanose.TText","text":""},{"location":"Reference/Blend2D/classes/TText/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TText = record ... end;\n</code></pre>"},{"location":"Reference/Blend2D/classes/TText/#fields","title":"Fields","text":"Name Description ArmStyle Contrast FamilyKind Letterform Midline Proportion SerifStyle StrokeVariation Weight XHeight"},{"location":"Reference/Blend2D/classes/TText/#field-descriptions","title":"Field Descriptions","text":""},{"location":"Reference/Blend2D/classes/TText/#ArmStyle","title":"ArmStyle","text":"<p><code>var ArmStyle: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TText/#Contrast","title":"Contrast","text":"<p><code>var Contrast: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TText/#FamilyKind","title":"FamilyKind","text":"<p><code>var FamilyKind: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TText/#Letterform","title":"Letterform","text":"<p><code>var Letterform: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TText/#Midline","title":"Midline","text":"<p><code>var Midline: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TText/#Proportion","title":"Proportion","text":"<p><code>var Proportion: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TText/#SerifStyle","title":"SerifStyle","text":"<p><code>var SerifStyle: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TText/#StrokeVariation","title":"StrokeVariation","text":"<p><code>var StrokeVariation: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TText/#Weight","title":"Weight","text":"<p><code>var Weight: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/classes/TText/#XHeight","title":"XHeight","text":"<p><code>var XHeight: Byte</code></p> <p>Type: <code>Byte</code></p>"},{"location":"Reference/Blend2D/routines/BLAbs_0/","title":"BLAbs","text":""},{"location":"Reference/Blend2D/routines/BLAbs_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLAbs(const AValue: TBLPoint): TBLPoint; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLAbs_0/#parameters","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLAbs_0/#returns","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLAbs_1/","title":"BLAbs","text":""},{"location":"Reference/Blend2D/routines/BLAbs_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLAbs(const AValue: TBLSize): TBLSize; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLAbs_1/#parameters","title":"Parameters","text":"<p><code>AValue</code>: <code>TBLSize</code></p>"},{"location":"Reference/Blend2D/routines/BLAbs_1/#returns","title":"Returns","text":"<p><code>TBLSize</code></p>"},{"location":"Reference/Blend2D/routines/BLArc/","title":"BLArc","text":""},{"location":"Reference/Blend2D/routines/BLArc/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLArc(const ACX, ACY, ARX, ARY, AStart, ASweep: Double): TBLArc; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLArc/#parameters","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p> <p><code>AStart</code>: <code>Double</code></p> <p><code>ASweep</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLArc/#returns","title":"Returns","text":"<p><code>TBLArc</code></p>"},{"location":"Reference/Blend2D/routines/BLBox/","title":"BLBox","text":""},{"location":"Reference/Blend2D/routines/BLBox/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLBox(const AX0, AY0, AX1, AY1: Double): TBLBox; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLBox/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLBox/#returns","title":"Returns","text":"<p><code>TBLBox</code></p>"},{"location":"Reference/Blend2D/routines/BLBoxI/","title":"BLBoxI","text":""},{"location":"Reference/Blend2D/routines/BLBoxI/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLBoxI(const AX0, AY0, AX1, AY1: Integer): TBLBoxI; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLBoxI/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Integer</code></p> <p><code>AY0</code>: <code>Integer</code></p> <p><code>AX1</code>: <code>Integer</code></p> <p><code>AY1</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/routines/BLBoxI/#returns","title":"Returns","text":"<p><code>TBLBoxI</code></p>"},{"location":"Reference/Blend2D/routines/BLCircle/","title":"BLCircle","text":""},{"location":"Reference/Blend2D/routines/BLCircle/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLCircle(const ACX, ACY, AR: Double): TBLCircle; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLCircle/#parameters","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLCircle/#returns","title":"Returns","text":"<p><code>TBLCircle</code></p>"},{"location":"Reference/Blend2D/routines/BLClamp/","title":"BLClamp","text":""},{"location":"Reference/Blend2D/routines/BLClamp/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLClamp(const AA: TBLPoint; const AB, AC: Double): TBLPoint; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLClamp/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLPoint</code></p> <p><code>AB</code>: <code>Double</code></p> <p><code>AC</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLClamp/#returns","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLConicGradientValues_0/","title":"BLConicGradientValues","text":""},{"location":"Reference/Blend2D/routines/BLConicGradientValues_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLConicGradientValues(const AX0, AY0, AAngle: Double; \n  const ARepeat: Double = 1): TBLConicGradientValues; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLConicGradientValues_0/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AAngle</code>: <code>Double</code></p> <p><code>ARepeat</code>: <code>Double = 1</code></p>"},{"location":"Reference/Blend2D/routines/BLConicGradientValues_0/#returns","title":"Returns","text":"<p><code>TBLConicGradientValues</code></p>"},{"location":"Reference/Blend2D/routines/BLConicGradientValues_1/","title":"BLConicGradientValues","text":""},{"location":"Reference/Blend2D/routines/BLConicGradientValues_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLConicGradientValues: TBLConicGradientValues; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLConicGradientValues_1/#returns","title":"Returns","text":"<p><code>TBLConicGradientValues</code></p>"},{"location":"Reference/Blend2D/routines/BLEllipse_0/","title":"BLEllipse","text":""},{"location":"Reference/Blend2D/routines/BLEllipse_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLEllipse(const ACX, ACY, ARX, ARY: Double): TBLEllipse; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLEllipse_0/#parameters","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLEllipse_0/#returns","title":"Returns","text":"<p><code>TBLEllipse</code></p>"},{"location":"Reference/Blend2D/routines/BLEllipse_1/","title":"BLEllipse","text":""},{"location":"Reference/Blend2D/routines/BLEllipse_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLEllipse(const ACX, ACY, AR: Double): TBLEllipse; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLEllipse_1/#parameters","title":"Parameters","text":"<p><code>ACX</code>: <code>Double</code></p> <p><code>ACY</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLEllipse_1/#returns","title":"Returns","text":"<p><code>TBLEllipse</code></p>"},{"location":"Reference/Blend2D/routines/BLGetLastError/","title":"BLGetLastError","text":"<p>Retrieves the last Blend2D error, or <code>TBLResult.Success</code> if there was none. </p>"},{"location":"Reference/Blend2D/routines/BLGetLastError/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLGetLastError: TBLResult\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLGetLastError/#returns","title":"Returns","text":"<p><code>TBLResult</code></p>"},{"location":"Reference/Blend2D/routines/BLGetLastError/#see-also","title":"See Also","text":"<ul> <li>TBLResult</li> <li>BLSetGetLastErrorHandler</li> </ul>"},{"location":"Reference/Blend2D/routines/BLGetLastError/#remarks","title":"Remarks","text":"<p>After this call, the last error is reset to <code>TBLResult.Success</code>.</p> <p>This function should only be used when <code>BLSetGetLastErrorHandler</code> has been called. Otherwise, it always returns <code>TBLResult.Success</code>.</p> <p>This function is not thread-safe. If Blend2D is used from multiple threads, the returned value can be from any thread. </p>"},{"location":"Reference/Blend2D/routines/BLGradientStop_0/","title":"BLGradientStop","text":""},{"location":"Reference/Blend2D/routines/BLGradientStop_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLGradientStop(const AOffset: Double; const AColor: TAlphaColor): TBLGradientStop; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLGradientStop_0/#parameters","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>AColor</code>: <code>TAlphaColor</code></p>"},{"location":"Reference/Blend2D/routines/BLGradientStop_0/#returns","title":"Returns","text":"<p><code>TBLGradientStop</code></p>"},{"location":"Reference/Blend2D/routines/BLGradientStop_1/","title":"BLGradientStop","text":""},{"location":"Reference/Blend2D/routines/BLGradientStop_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLGradientStop(const AOffset: Double; const ARgba64: TBLRgba64): TBLGradientStop; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLGradientStop_1/#parameters","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>ARgba64</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/routines/BLGradientStop_1/#returns","title":"Returns","text":"<p><code>TBLGradientStop</code></p>"},{"location":"Reference/Blend2D/routines/BLGradientStop_2/","title":"BLGradientStop","text":""},{"location":"Reference/Blend2D/routines/BLGradientStop_2/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLGradientStop(const AOffset: Double; const ARgba32: TBLRgba32): TBLGradientStop; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLGradientStop_2/#parameters","title":"Parameters","text":"<p><code>AOffset</code>: <code>Double</code></p> <p><code>ARgba32</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/routines/BLGradientStop_2/#returns","title":"Returns","text":"<p><code>TBLGradientStop</code></p>"},{"location":"Reference/Blend2D/routines/BLGradientStop_3/","title":"BLGradientStop","text":""},{"location":"Reference/Blend2D/routines/BLGradientStop_3/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLGradientStop: TBLGradientStop; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLGradientStop_3/#returns","title":"Returns","text":"<p><code>TBLGradientStop</code></p>"},{"location":"Reference/Blend2D/routines/BLLine_0/","title":"BLLine","text":""},{"location":"Reference/Blend2D/routines/BLLine_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLLine(const AX0, AY0, AX1, AY1: Double): TBLLine; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLLine_0/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLLine_0/#returns","title":"Returns","text":"<p><code>TBLLine</code></p>"},{"location":"Reference/Blend2D/routines/BLLine_1/","title":"BLLine","text":""},{"location":"Reference/Blend2D/routines/BLLine_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLLine(const AP0, AP1: TBLPoint): TBLLine; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLLine_1/#parameters","title":"Parameters","text":"<p><code>AP0</code>: <code>TBLPoint</code></p> <p><code>AP1</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLLine_1/#returns","title":"Returns","text":"<p><code>TBLLine</code></p>"},{"location":"Reference/Blend2D/routines/BLLinearGradientValues_0/","title":"BLLinearGradientValues","text":""},{"location":"Reference/Blend2D/routines/BLLinearGradientValues_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLLinearGradientValues: TBLLinearGradientValues; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLLinearGradientValues_0/#returns","title":"Returns","text":"<p><code>TBLLinearGradientValues</code></p>"},{"location":"Reference/Blend2D/routines/BLLinearGradientValues_1/","title":"BLLinearGradientValues","text":""},{"location":"Reference/Blend2D/routines/BLLinearGradientValues_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLLinearGradientValues(const AX0, AY0, AX1, \n  AY1: Double): TBLLinearGradientValues; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLLinearGradientValues_1/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLLinearGradientValues_1/#returns","title":"Returns","text":"<p><code>TBLLinearGradientValues</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_0/","title":"BLMax","text":""},{"location":"Reference/Blend2D/routines/BLMax_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMax(const AA, AB: TBLRgba32): TBLRgba32; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMax_0/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLRgba32</code></p> <p><code>AB</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_0/#returns","title":"Returns","text":"<p><code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_1/","title":"BLMax","text":""},{"location":"Reference/Blend2D/routines/BLMax_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMax(const AA, AB: TBLRgba): TBLRgba; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMax_1/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLRgba</code></p> <p><code>AB</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_1/#returns","title":"Returns","text":"<p><code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_2/","title":"BLMax","text":""},{"location":"Reference/Blend2D/routines/BLMax_2/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMax(const AA: Double; const AB: TBLPoint): TBLPoint; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMax_2/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>Double</code></p> <p><code>AB</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_2/#returns","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_3/","title":"BLMax","text":""},{"location":"Reference/Blend2D/routines/BLMax_3/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMax(const AA: TBLPoint; const AB: Double): TBLPoint; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMax_3/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLPoint</code></p> <p><code>AB</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_3/#returns","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_4/","title":"BLMax","text":""},{"location":"Reference/Blend2D/routines/BLMax_4/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMax(const AA, AB: TBLPoint): TBLPoint; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMax_4/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLPoint</code></p> <p><code>AB</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_4/#returns","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_5/","title":"BLMax","text":""},{"location":"Reference/Blend2D/routines/BLMax_5/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMax(const AA, AB: TBLSize): TBLSize; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMax_5/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLSize</code></p> <p><code>AB</code>: <code>TBLSize</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_5/#returns","title":"Returns","text":"<p><code>TBLSize</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_6/","title":"BLMax","text":""},{"location":"Reference/Blend2D/routines/BLMax_6/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMax(const AA, AB: TBLRgba64): TBLRgba64; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMax_6/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLRgba64</code></p> <p><code>AB</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/routines/BLMax_6/#returns","title":"Returns","text":"<p><code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_0/","title":"BLMin","text":""},{"location":"Reference/Blend2D/routines/BLMin_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMin(const AA, AB: TBLRgba64): TBLRgba64; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMin_0/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLRgba64</code></p> <p><code>AB</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_0/#returns","title":"Returns","text":"<p><code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_1/","title":"BLMin","text":""},{"location":"Reference/Blend2D/routines/BLMin_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMin(const AA, AB: TBLRgba32): TBLRgba32; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMin_1/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLRgba32</code></p> <p><code>AB</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_1/#returns","title":"Returns","text":"<p><code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_2/","title":"BLMin","text":""},{"location":"Reference/Blend2D/routines/BLMin_2/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMin(const AA, AB: TBLRgba): TBLRgba; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMin_2/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLRgba</code></p> <p><code>AB</code>: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_2/#returns","title":"Returns","text":"<p><code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_3/","title":"BLMin","text":""},{"location":"Reference/Blend2D/routines/BLMin_3/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMin(const AA: TBLPoint; const AB: Double): TBLPoint; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMin_3/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLPoint</code></p> <p><code>AB</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_3/#returns","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_4/","title":"BLMin","text":""},{"location":"Reference/Blend2D/routines/BLMin_4/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMin(const AA: Double; const AB: TBLPoint): TBLPoint; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMin_4/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>Double</code></p> <p><code>AB</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_4/#returns","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_5/","title":"BLMin","text":""},{"location":"Reference/Blend2D/routines/BLMin_5/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMin(const AA, AB: TBLSize): TBLSize; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMin_5/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLSize</code></p> <p><code>AB</code>: <code>TBLSize</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_5/#returns","title":"Returns","text":"<p><code>TBLSize</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_6/","title":"BLMin","text":""},{"location":"Reference/Blend2D/routines/BLMin_6/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLMin(const AA, AB: TBLPoint): TBLPoint; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLMin_6/#parameters","title":"Parameters","text":"<p><code>AA</code>: <code>TBLPoint</code></p> <p><code>AB</code>: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLMin_6/#returns","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLPoint/","title":"BLPoint","text":""},{"location":"Reference/Blend2D/routines/BLPoint/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLPoint(const AX, AY: Double): TBLPoint; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLPoint/#parameters","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLPoint/#returns","title":"Returns","text":"<p><code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/routines/BLPointI/","title":"BLPointI","text":""},{"location":"Reference/Blend2D/routines/BLPointI/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLPointI(const AX, AY: Integer): TBLPointI; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLPointI/#parameters","title":"Parameters","text":"<p><code>AX</code>: <code>Integer</code></p> <p><code>AY</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/routines/BLPointI/#returns","title":"Returns","text":"<p><code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/routines/BLRadialGradientValues_0/","title":"BLRadialGradientValues","text":""},{"location":"Reference/Blend2D/routines/BLRadialGradientValues_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRadialGradientValues: TBLRadialGradientValues; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRadialGradientValues_0/#returns","title":"Returns","text":"<p><code>TBLRadialGradientValues</code></p>"},{"location":"Reference/Blend2D/routines/BLRadialGradientValues_1/","title":"BLRadialGradientValues","text":""},{"location":"Reference/Blend2D/routines/BLRadialGradientValues_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRadialGradientValues(const AX0, AY0, AX1, \n  AY1, AR0: Double; const AR1: Double = 0): TBLRadialGradientValues; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRadialGradientValues_1/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AR0</code>: <code>Double</code></p> <p><code>AR1</code>: <code>Double = 0</code></p>"},{"location":"Reference/Blend2D/routines/BLRadialGradientValues_1/#returns","title":"Returns","text":"<p><code>TBLRadialGradientValues</code></p>"},{"location":"Reference/Blend2D/routines/BLRect/","title":"BLRect","text":""},{"location":"Reference/Blend2D/routines/BLRect/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRect(const AX, AY, AW, AH: Double): TBLRect; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRect/#parameters","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLRect/#returns","title":"Returns","text":"<p><code>TBLRect</code></p>"},{"location":"Reference/Blend2D/routines/BLRectI/","title":"BLRectI","text":""},{"location":"Reference/Blend2D/routines/BLRectI/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRectI(const AX, AY, AW, AH: Integer): TBLRectI; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRectI/#parameters","title":"Parameters","text":"<p><code>AX</code>: <code>Integer</code></p> <p><code>AY</code>: <code>Integer</code></p> <p><code>AW</code>: <code>Integer</code></p> <p><code>AH</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/routines/BLRectI/#returns","title":"Returns","text":"<p><code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba32_0/","title":"BLRgba32","text":""},{"location":"Reference/Blend2D/routines/BLRgba32_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba32(const ARgba32: UInt32): TBLRgba32; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba32_0/#parameters","title":"Parameters","text":"<p><code>ARgba32</code>: <code>UInt32</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba32_0/#returns","title":"Returns","text":"<p><code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba32_1/","title":"BLRgba32","text":""},{"location":"Reference/Blend2D/routines/BLRgba32_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba32: TBLRgba32; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba32_1/#returns","title":"Returns","text":"<p><code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba32_2/","title":"BLRgba32","text":""},{"location":"Reference/Blend2D/routines/BLRgba32_2/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba32(const AColor: TAlphaColorRec): TBLRgba32; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba32_2/#parameters","title":"Parameters","text":"<p><code>AColor</code>: <code>TAlphaColorRec</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba32_2/#returns","title":"Returns","text":"<p><code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba32_3/","title":"BLRgba32","text":""},{"location":"Reference/Blend2D/routines/BLRgba32_3/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba32(const AR, AG, AB: Byte; const AA: Byte = $FF): TBLRgba32; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba32_3/#parameters","title":"Parameters","text":"<p><code>AR</code>: <code>Byte</code></p> <p><code>AG</code>: <code>Byte</code></p> <p><code>AB</code>: <code>Byte</code></p> <p><code>AA</code>: <code>Byte = $FF</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba32_3/#returns","title":"Returns","text":"<p><code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba32_4/","title":"BLRgba32","text":""},{"location":"Reference/Blend2D/routines/BLRgba32_4/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba32(const ARgba64: TBLRgba64): TBLRgba32; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba32_4/#parameters","title":"Parameters","text":"<p><code>ARgba64</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba32_4/#returns","title":"Returns","text":"<p><code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba64_0/","title":"BLRgba64","text":""},{"location":"Reference/Blend2D/routines/BLRgba64_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba64: TBLRgba64; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba64_0/#returns","title":"Returns","text":"<p><code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba64_1/","title":"BLRgba64","text":""},{"location":"Reference/Blend2D/routines/BLRgba64_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba64(const ARgba64: UInt64): TBLRgba64; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba64_1/#parameters","title":"Parameters","text":"<p><code>ARgba64</code>: <code>UInt64</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba64_1/#returns","title":"Returns","text":"<p><code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba64_2/","title":"BLRgba64","text":""},{"location":"Reference/Blend2D/routines/BLRgba64_2/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba64(const AR, AG, AB: Word; const AA: Word = $FFFF): TBLRgba64; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba64_2/#parameters","title":"Parameters","text":"<p><code>AR</code>: <code>Word</code></p> <p><code>AG</code>: <code>Word</code></p> <p><code>AB</code>: <code>Word</code></p> <p><code>AA</code>: <code>Word = $FFFF</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba64_2/#returns","title":"Returns","text":"<p><code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba64_3/","title":"BLRgba64","text":""},{"location":"Reference/Blend2D/routines/BLRgba64_3/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba64(const ARgba32: TBLRgba32): TBLRgba64; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba64_3/#parameters","title":"Parameters","text":"<p><code>ARgba32</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba64_3/#returns","title":"Returns","text":"<p><code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba_0/","title":"BLRgba","text":""},{"location":"Reference/Blend2D/routines/BLRgba_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba(const ARgba32: TBLRgba32): TBLRgba; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba_0/#parameters","title":"Parameters","text":"<p><code>ARgba32</code>: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba_0/#returns","title":"Returns","text":"<p><code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba_1/","title":"BLRgba","text":""},{"location":"Reference/Blend2D/routines/BLRgba_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba(const AColor: TAlphaColorF): TBLRgba; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba_1/#parameters","title":"Parameters","text":"<p><code>AColor</code>: <code>TAlphaColorF</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba_1/#returns","title":"Returns","text":"<p><code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba_2/","title":"BLRgba","text":""},{"location":"Reference/Blend2D/routines/BLRgba_2/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba(const AR, AG, AB: Single; const AA: Single = 1): TBLRgba; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba_2/#parameters","title":"Parameters","text":"<p><code>AR</code>: <code>Single</code></p> <p><code>AG</code>: <code>Single</code></p> <p><code>AB</code>: <code>Single</code></p> <p><code>AA</code>: <code>Single = 1</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba_2/#returns","title":"Returns","text":"<p><code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba_3/","title":"BLRgba","text":""},{"location":"Reference/Blend2D/routines/BLRgba_3/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba(const ARgba64: TBLRgba64): TBLRgba; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba_3/#parameters","title":"Parameters","text":"<p><code>ARgba64</code>: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba_3/#returns","title":"Returns","text":"<p><code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/routines/BLRgba_4/","title":"BLRgba","text":""},{"location":"Reference/Blend2D/routines/BLRgba_4/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRgba: TBLRgba; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRgba_4/#returns","title":"Returns","text":"<p><code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/routines/BLRoundRect_0/","title":"BLRoundRect","text":""},{"location":"Reference/Blend2D/routines/BLRoundRect_0/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRoundRect(const AX, AY, AW, AH, AR: Double): TBLRoundRect; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRoundRect_0/#parameters","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLRoundRect_0/#returns","title":"Returns","text":"<p><code>TBLRoundRect</code></p>"},{"location":"Reference/Blend2D/routines/BLRoundRect_1/","title":"BLRoundRect","text":""},{"location":"Reference/Blend2D/routines/BLRoundRect_1/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRoundRect(const ARect: TBLRect; const ARX, \n  ARY: Double): TBLRoundRect; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRoundRect_1/#parameters","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLRoundRect_1/#returns","title":"Returns","text":"<p><code>TBLRoundRect</code></p>"},{"location":"Reference/Blend2D/routines/BLRoundRect_2/","title":"BLRoundRect","text":""},{"location":"Reference/Blend2D/routines/BLRoundRect_2/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRoundRect(const ARect: TBLRect; const AR: Double): TBLRoundRect; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRoundRect_2/#parameters","title":"Parameters","text":"<p><code>ARect</code>: <code>TBLRect</code></p> <p><code>AR</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLRoundRect_2/#returns","title":"Returns","text":"<p><code>TBLRoundRect</code></p>"},{"location":"Reference/Blend2D/routines/BLRoundRect_3/","title":"BLRoundRect","text":""},{"location":"Reference/Blend2D/routines/BLRoundRect_3/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLRoundRect(const AX, AY, AW, AH, ARX, ARY: Double): TBLRoundRect; overload; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLRoundRect_3/#parameters","title":"Parameters","text":"<p><code>AX</code>: <code>Double</code></p> <p><code>AY</code>: <code>Double</code></p> <p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p> <p><code>ARX</code>: <code>Double</code></p> <p><code>ARY</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLRoundRect_3/#returns","title":"Returns","text":"<p><code>TBLRoundRect</code></p>"},{"location":"Reference/Blend2D/routines/BLSetErrorHandler/","title":"BLSetErrorHandler","text":"<p>Sets a Blend2D error handler. </p>"},{"location":"Reference/Blend2D/routines/BLSetErrorHandler/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>procedure BLSetErrorHandler(const AHandler: TBLErrorHandler; \n  const AUserData: Pointer)\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLSetErrorHandler/#parameters","title":"Parameters","text":"<p><code>AHandler</code>: <code>TBLErrorHandler</code> : The error handler that is called when a Blend2D error occurs.</p> <p><code>AUserData</code>: <code>Pointer</code> : Any data you want to pass to the handler.</p>"},{"location":"Reference/Blend2D/routines/BLSetErrorHandler/#see-also","title":"See Also","text":"<ul> <li>EBlend2DError</li> <li>BLSetExceptionErrorHandler</li> <li>BLSetGetLastErrorHandler</li> <li>BLGetLastError</li> </ul>"},{"location":"Reference/Blend2D/routines/BLSetErrorHandler/#remarks","title":"Remarks","text":"<p>The default error handler raises an exception of type <code>EBlend2DError</code>. You can disable error handling completely by setting AHandler to nil. In that case, there is no way to know if and when an error occured.</p> <p>The following procedures can be used to set some default error handlers: * <code>BLSetExceptionErrorHandler</code>: sets the error handler to a procedure that raises an exception when a Blend2D error occurs. This is the default behavior. * <code>BLSetGetLastErrorHandler</code>: sets the error handler to a procedure that sets a global error variable when a Blend2D error occurs. You can then use <code>BLGetLastError</code> to retrieve this error code. </p>"},{"location":"Reference/Blend2D/routines/BLSetExceptionErrorHandler/","title":"BLSetExceptionErrorHandler","text":"<p>Sets the error handler to a procedure that raises an exception when a Blend2D error occurs. This is the default behavior. </p>"},{"location":"Reference/Blend2D/routines/BLSetExceptionErrorHandler/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>procedure BLSetExceptionErrorHandler\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLSetGetLastErrorHandler/","title":"BLSetGetLastErrorHandler","text":"<p>Sets the error handler to a procedure that sets a global error variable when a Blend2D error occurs. You can then use <code>BLGetLastError</code> to retrieve this error code. </p>"},{"location":"Reference/Blend2D/routines/BLSetGetLastErrorHandler/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>procedure BLSetGetLastErrorHandler\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLSetGetLastErrorHandler/#see-also","title":"See Also","text":"<ul> <li>BLGetLastError</li> </ul>"},{"location":"Reference/Blend2D/routines/BLSize/","title":"BLSize","text":""},{"location":"Reference/Blend2D/routines/BLSize/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLSize(const AW, AH: Double): TBLSize; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLSize/#parameters","title":"Parameters","text":"<p><code>AW</code>: <code>Double</code></p> <p><code>AH</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLSize/#returns","title":"Returns","text":"<p><code>TBLSize</code></p>"},{"location":"Reference/Blend2D/routines/BLSizeI/","title":"BLSizeI","text":""},{"location":"Reference/Blend2D/routines/BLSizeI/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLSizeI(const AW, AH: Integer): TBLSizeI; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLSizeI/#parameters","title":"Parameters","text":"<p><code>AW</code>: <code>Integer</code></p> <p><code>AH</code>: <code>Integer</code></p>"},{"location":"Reference/Blend2D/routines/BLSizeI/#returns","title":"Returns","text":"<p><code>TBLSizeI</code></p>"},{"location":"Reference/Blend2D/routines/BLTriangle/","title":"BLTriangle","text":""},{"location":"Reference/Blend2D/routines/BLTriangle/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>function BLTriangle(const AX0, AY0, AX1, AY1, AX2, \n  AY2: Double): TBLTriangle; inline\n</code></pre>"},{"location":"Reference/Blend2D/routines/BLTriangle/#parameters","title":"Parameters","text":"<p><code>AX0</code>: <code>Double</code></p> <p><code>AY0</code>: <code>Double</code></p> <p><code>AX1</code>: <code>Double</code></p> <p><code>AY1</code>: <code>Double</code></p> <p><code>AX2</code>: <code>Double</code></p> <p><code>AY2</code>: <code>Double</code></p>"},{"location":"Reference/Blend2D/routines/BLTriangle/#returns","title":"Returns","text":"<p><code>TBLTriangle</code></p>"},{"location":"Reference/Blend2D/types/PBLApproximationOptions/","title":"PBLApproximationOptions","text":""},{"location":"Reference/Blend2D/types/PBLApproximationOptions/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLApproximationOptions = ^TBLApproximationOptions\n</code></pre> <p>Base type: <code>TBLApproximationOptions</code></p>"},{"location":"Reference/Blend2D/types/PBLArc/","title":"PBLArc","text":""},{"location":"Reference/Blend2D/types/PBLArc/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLArc = ^TBLArc\n</code></pre> <p>Base type: <code>TBLArc</code></p>"},{"location":"Reference/Blend2D/types/PBLBox/","title":"PBLBox","text":""},{"location":"Reference/Blend2D/types/PBLBox/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLBox = ^TBLBox\n</code></pre> <p>Base type: <code>TBLBox</code></p>"},{"location":"Reference/Blend2D/types/PBLBoxI/","title":"PBLBoxI","text":""},{"location":"Reference/Blend2D/types/PBLBoxI/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLBoxI = ^TBLBoxI\n</code></pre> <p>Base type: <code>TBLBoxI</code></p>"},{"location":"Reference/Blend2D/types/PBLCircle/","title":"PBLCircle","text":""},{"location":"Reference/Blend2D/types/PBLCircle/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLCircle = ^TBLCircle\n</code></pre> <p>Base type: <code>TBLCircle</code></p>"},{"location":"Reference/Blend2D/types/PBLConicGradientValues/","title":"PBLConicGradientValues","text":""},{"location":"Reference/Blend2D/types/PBLConicGradientValues/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLConicGradientValues = ^TBLConicGradientValues\n</code></pre> <p>Base type: <code>TBLConicGradientValues</code></p>"},{"location":"Reference/Blend2D/types/PBLContextCookie/","title":"PBLContextCookie","text":""},{"location":"Reference/Blend2D/types/PBLContextCookie/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLContextCookie = ^TBLContextCookie\n</code></pre> <p>Base type: <code>TBLContextCookie</code></p>"},{"location":"Reference/Blend2D/types/PBLContextCreateInfo/","title":"PBLContextCreateInfo","text":""},{"location":"Reference/Blend2D/types/PBLContextCreateInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLContextCreateInfo = ^TBLContextCreateInfo\n</code></pre> <p>Base type: <code>TBLContextCreateInfo</code></p>"},{"location":"Reference/Blend2D/types/PBLContextHints/","title":"PBLContextHints","text":""},{"location":"Reference/Blend2D/types/PBLContextHints/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLContextHints = ^TBLContextHints\n</code></pre> <p>Base type: <code>TBLContextHints</code></p>"},{"location":"Reference/Blend2D/types/PBLEllipse/","title":"PBLEllipse","text":""},{"location":"Reference/Blend2D/types/PBLEllipse/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLEllipse = ^TBLEllipse\n</code></pre> <p>Base type: <code>TBLEllipse</code></p>"},{"location":"Reference/Blend2D/types/PBLFileInfo/","title":"PBLFileInfo","text":""},{"location":"Reference/Blend2D/types/PBLFileInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFileInfo = ^TBLFileInfo\n</code></pre> <p>Base type: <code>TBLFileInfo</code></p>"},{"location":"Reference/Blend2D/types/PBLFontDesignMetrics/","title":"PBLFontDesignMetrics","text":""},{"location":"Reference/Blend2D/types/PBLFontDesignMetrics/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFontDesignMetrics = ^TBLFontDesignMetrics\n</code></pre> <p>Base type: <code>TBLFontDesignMetrics</code></p>"},{"location":"Reference/Blend2D/types/PBLFontFaceInfo/","title":"PBLFontFaceInfo","text":""},{"location":"Reference/Blend2D/types/PBLFontFaceInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFontFaceInfo = ^TBLFontFaceInfo\n</code></pre> <p>Base type: <code>TBLFontFaceInfo</code></p>"},{"location":"Reference/Blend2D/types/PBLFontFeatureItem/","title":"PBLFontFeatureItem","text":""},{"location":"Reference/Blend2D/types/PBLFontFeatureItem/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFontFeatureItem = ^TBLFontFeatureItem\n</code></pre> <p>Base type: <code>TBLFontFeatureItem</code></p>"},{"location":"Reference/Blend2D/types/PBLFontFeatureSettingsView/","title":"PBLFontFeatureSettingsView","text":""},{"location":"Reference/Blend2D/types/PBLFontFeatureSettingsView/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFontFeatureSettingsView = ^TBLFontFeatureSettingsView\n</code></pre> <p>Base type: <code>TBLFontFeatureSettingsView</code></p>"},{"location":"Reference/Blend2D/types/PBLFontMatrix/","title":"PBLFontMatrix","text":""},{"location":"Reference/Blend2D/types/PBLFontMatrix/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFontMatrix = ^TBLFontMatrix\n</code></pre> <p>Base type: <code>TBLFontMatrix</code></p>"},{"location":"Reference/Blend2D/types/PBLFontMetrics/","title":"PBLFontMetrics","text":""},{"location":"Reference/Blend2D/types/PBLFontMetrics/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFontMetrics = ^TBLFontMetrics\n</code></pre> <p>Base type: <code>TBLFontMetrics</code></p>"},{"location":"Reference/Blend2D/types/PBLFontPanose/","title":"PBLFontPanose","text":""},{"location":"Reference/Blend2D/types/PBLFontPanose/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFontPanose = ^TBLFontPanose\n</code></pre> <p>Base type: <code>TBLFontPanose</code></p>"},{"location":"Reference/Blend2D/types/PBLFontQueryProperties/","title":"PBLFontQueryProperties","text":""},{"location":"Reference/Blend2D/types/PBLFontQueryProperties/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFontQueryProperties = ^TBLFontQueryProperties\n</code></pre> <p>Base type: <code>TBLFontQueryProperties</code></p>"},{"location":"Reference/Blend2D/types/PBLFontTable/","title":"PBLFontTable","text":""},{"location":"Reference/Blend2D/types/PBLFontTable/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFontTable = ^TBLFontTable\n</code></pre> <p>Base type: <code>TBLFontTable</code></p>"},{"location":"Reference/Blend2D/types/PBLFontUnicodeCoverage/","title":"PBLFontUnicodeCoverage","text":""},{"location":"Reference/Blend2D/types/PBLFontUnicodeCoverage/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFontUnicodeCoverage = ^TBLFontUnicodeCoverage\n</code></pre> <p>Base type: <code>TBLFontUnicodeCoverage</code></p>"},{"location":"Reference/Blend2D/types/PBLFontVariationItem/","title":"PBLFontVariationItem","text":""},{"location":"Reference/Blend2D/types/PBLFontVariationItem/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFontVariationItem = ^TBLFontVariationItem\n</code></pre> <p>Base type: <code>TBLFontVariationItem</code></p>"},{"location":"Reference/Blend2D/types/PBLFontVariationSettingsView/","title":"PBLFontVariationSettingsView","text":""},{"location":"Reference/Blend2D/types/PBLFontVariationSettingsView/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFontVariationSettingsView = ^TBLFontVariationSettingsView\n</code></pre> <p>Base type: <code>TBLFontVariationSettingsView</code></p>"},{"location":"Reference/Blend2D/types/PBLFormatInfo/","title":"PBLFormatInfo","text":""},{"location":"Reference/Blend2D/types/PBLFormatInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLFormatInfo = ^TBLFormatInfo\n</code></pre> <p>Base type: <code>TBLFormatInfo</code></p>"},{"location":"Reference/Blend2D/types/PBLGlyphId/","title":"PBLGlyphId","text":""},{"location":"Reference/Blend2D/types/PBLGlyphId/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLGlyphId = ^TBLGlyphId\n</code></pre> <p>Base type: <code>TBLGlyphId</code></p>"},{"location":"Reference/Blend2D/types/PBLGlyphInfo/","title":"PBLGlyphInfo","text":""},{"location":"Reference/Blend2D/types/PBLGlyphInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLGlyphInfo = ^TBLGlyphInfo\n</code></pre> <p>Base type: <code>TBLGlyphInfo</code></p>"},{"location":"Reference/Blend2D/types/PBLGlyphMappingState/","title":"PBLGlyphMappingState","text":""},{"location":"Reference/Blend2D/types/PBLGlyphMappingState/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLGlyphMappingState = ^TBLGlyphMappingState\n</code></pre> <p>Base type: <code>TBLGlyphMappingState</code></p>"},{"location":"Reference/Blend2D/types/PBLGlyphPlacement/","title":"PBLGlyphPlacement","text":""},{"location":"Reference/Blend2D/types/PBLGlyphPlacement/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLGlyphPlacement = ^TBLGlyphPlacement\n</code></pre> <p>Base type: <code>TBLGlyphPlacement</code></p>"},{"location":"Reference/Blend2D/types/PBLGlyphRun/","title":"PBLGlyphRun","text":""},{"location":"Reference/Blend2D/types/PBLGlyphRun/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLGlyphRun = ^TBLGlyphRun\n</code></pre> <p>Base type: <code>TBLGlyphRun</code></p>"},{"location":"Reference/Blend2D/types/PBLGradientStop/","title":"PBLGradientStop","text":""},{"location":"Reference/Blend2D/types/PBLGradientStop/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLGradientStop = ^TBLGradientStop\n</code></pre> <p>Base type: <code>TBLGradientStop</code></p>"},{"location":"Reference/Blend2D/types/PBLImageData/","title":"PBLImageData","text":""},{"location":"Reference/Blend2D/types/PBLImageData/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLImageData = ^TBLImageData\n</code></pre> <p>Base type: <code>TBLImageData</code></p>"},{"location":"Reference/Blend2D/types/PBLImageInfo/","title":"PBLImageInfo","text":""},{"location":"Reference/Blend2D/types/PBLImageInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLImageInfo = ^TBLImageInfo\n</code></pre> <p>Base type: <code>TBLImageInfo</code></p>"},{"location":"Reference/Blend2D/types/PBLLine/","title":"PBLLine","text":""},{"location":"Reference/Blend2D/types/PBLLine/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLLine = ^TBLLine\n</code></pre> <p>Base type: <code>TBLLine</code></p>"},{"location":"Reference/Blend2D/types/PBLLinearGradientValues/","title":"PBLLinearGradientValues","text":""},{"location":"Reference/Blend2D/types/PBLLinearGradientValues/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLLinearGradientValues = ^TBLLinearGradientValues\n</code></pre> <p>Base type: <code>TBLLinearGradientValues</code></p>"},{"location":"Reference/Blend2D/types/PBLMatrix2D/","title":"PBLMatrix2D","text":""},{"location":"Reference/Blend2D/types/PBLMatrix2D/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLMatrix2D = ^TBLMatrix2D\n</code></pre> <p>Base type: <code>TBLMatrix2D</code></p>"},{"location":"Reference/Blend2D/types/PBLPixelConverterOptions/","title":"PBLPixelConverterOptions","text":""},{"location":"Reference/Blend2D/types/PBLPixelConverterOptions/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLPixelConverterOptions = ^TBLPixelConverterOptions\n</code></pre> <p>Base type: <code>TBLPixelConverterOptions</code></p>"},{"location":"Reference/Blend2D/types/PBLPoint/","title":"PBLPoint","text":""},{"location":"Reference/Blend2D/types/PBLPoint/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLPoint = ^TBLPoint\n</code></pre> <p>Base type: <code>TBLPoint</code></p>"},{"location":"Reference/Blend2D/types/PBLPointI/","title":"PBLPointI","text":""},{"location":"Reference/Blend2D/types/PBLPointI/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLPointI = ^TBLPointI\n</code></pre> <p>Base type: <code>TBLPointI</code></p>"},{"location":"Reference/Blend2D/types/PBLRadialGradientValues/","title":"PBLRadialGradientValues","text":""},{"location":"Reference/Blend2D/types/PBLRadialGradientValues/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLRadialGradientValues = ^TBLRadialGradientValues\n</code></pre> <p>Base type: <code>TBLRadialGradientValues</code></p>"},{"location":"Reference/Blend2D/types/PBLRange/","title":"PBLRange","text":""},{"location":"Reference/Blend2D/types/PBLRange/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLRange = ^TBLRange\n</code></pre> <p>Base type: <code>TBLRange</code></p>"},{"location":"Reference/Blend2D/types/PBLRect/","title":"PBLRect","text":""},{"location":"Reference/Blend2D/types/PBLRect/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLRect = ^TBLRect\n</code></pre> <p>Base type: <code>TBLRect</code></p>"},{"location":"Reference/Blend2D/types/PBLRectI/","title":"PBLRectI","text":""},{"location":"Reference/Blend2D/types/PBLRectI/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLRectI = ^TBLRectI\n</code></pre> <p>Base type: <code>TBLRectI</code></p>"},{"location":"Reference/Blend2D/types/PBLRgba/","title":"PBLRgba","text":""},{"location":"Reference/Blend2D/types/PBLRgba/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLRgba = ^TBLRgba\n</code></pre> <p>Base type: <code>TBLRgba</code></p>"},{"location":"Reference/Blend2D/types/PBLRgba32/","title":"PBLRgba32","text":""},{"location":"Reference/Blend2D/types/PBLRgba32/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLRgba32 = ^TBLRgba32\n</code></pre> <p>Base type: <code>TBLRgba32</code></p>"},{"location":"Reference/Blend2D/types/PBLRgba64/","title":"PBLRgba64","text":""},{"location":"Reference/Blend2D/types/PBLRgba64/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLRgba64 = ^TBLRgba64\n</code></pre> <p>Base type: <code>TBLRgba64</code></p>"},{"location":"Reference/Blend2D/types/PBLRoundRect/","title":"PBLRoundRect","text":""},{"location":"Reference/Blend2D/types/PBLRoundRect/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLRoundRect = ^TBLRoundRect\n</code></pre> <p>Base type: <code>TBLRoundRect</code></p>"},{"location":"Reference/Blend2D/types/PBLRuntimeBuildInfo/","title":"PBLRuntimeBuildInfo","text":""},{"location":"Reference/Blend2D/types/PBLRuntimeBuildInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLRuntimeBuildInfo = ^TBLRuntimeBuildInfo\n</code></pre> <p>Base type: <code>TBLRuntimeBuildInfo</code></p>"},{"location":"Reference/Blend2D/types/PBLRuntimeResourceInfo/","title":"PBLRuntimeResourceInfo","text":""},{"location":"Reference/Blend2D/types/PBLRuntimeResourceInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLRuntimeResourceInfo = ^TBLRuntimeResourceInfo\n</code></pre> <p>Base type: <code>TBLRuntimeResourceInfo</code></p>"},{"location":"Reference/Blend2D/types/PBLRuntimeSystemInfo/","title":"PBLRuntimeSystemInfo","text":""},{"location":"Reference/Blend2D/types/PBLRuntimeSystemInfo/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLRuntimeSystemInfo = ^TBLRuntimeSystemInfo\n</code></pre> <p>Base type: <code>TBLRuntimeSystemInfo</code></p>"},{"location":"Reference/Blend2D/types/PBLSize/","title":"PBLSize","text":""},{"location":"Reference/Blend2D/types/PBLSize/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLSize = ^TBLSize\n</code></pre> <p>Base type: <code>TBLSize</code></p>"},{"location":"Reference/Blend2D/types/PBLSizeI/","title":"PBLSizeI","text":""},{"location":"Reference/Blend2D/types/PBLSizeI/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLSizeI = ^TBLSizeI\n</code></pre> <p>Base type: <code>TBLSizeI</code></p>"},{"location":"Reference/Blend2D/types/PBLStrokeOptions/","title":"PBLStrokeOptions","text":""},{"location":"Reference/Blend2D/types/PBLStrokeOptions/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLStrokeOptions = ^TBLStrokeOptions\n</code></pre> <p>Base type: <code>TBLStrokeOptions</code></p>"},{"location":"Reference/Blend2D/types/PBLTextMetrics/","title":"PBLTextMetrics","text":""},{"location":"Reference/Blend2D/types/PBLTextMetrics/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLTextMetrics = ^TBLTextMetrics\n</code></pre> <p>Base type: <code>TBLTextMetrics</code></p>"},{"location":"Reference/Blend2D/types/PBLTriangle/","title":"PBLTriangle","text":""},{"location":"Reference/Blend2D/types/PBLTriangle/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PBLTriangle = ^TBLTriangle\n</code></pre> <p>Base type: <code>TBLTriangle</code></p>"},{"location":"Reference/Blend2D/types/PSize_T/","title":"PSize_T","text":""},{"location":"Reference/Blend2D/types/PSize_T/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type PSize_T = ^Size_T\n</code></pre> <p>Base type: <code>Size_T</code></p>"},{"location":"Reference/Blend2D/types/Size_T/","title":"Size_T","text":""},{"location":"Reference/Blend2D/types/Size_T/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type Size_T = NativeUInt\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLBooleanOp/","title":"TBLBooleanOp","text":"<p>Boolean operator (between A and B). </p>"},{"location":"Reference/Blend2D/types/TBLBooleanOp/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLBooleanOp = (Copy, &amp;And, &amp;Or, &amp;Xor, AndNot, NotAnd)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLBooleanOp/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLBooleanOp/#copy-0","title":"<code>Copy (0)</code>","text":"<p>Result = B. </p>"},{"location":"Reference/Blend2D/types/TBLBooleanOp/#and-1","title":"<code>&amp;And (1)</code>","text":"<p>Result = A and B. </p>"},{"location":"Reference/Blend2D/types/TBLBooleanOp/#or-2","title":"<code>&amp;Or (2)</code>","text":"<p>Result = A or B. </p>"},{"location":"Reference/Blend2D/types/TBLBooleanOp/#xor-3","title":"<code>&amp;Xor (3)</code>","text":"<p>Result = A xor B. </p>"},{"location":"Reference/Blend2D/types/TBLBooleanOp/#andnot-4","title":"<code>AndNot (4)</code>","text":"<p>Result = A and (not B). </p>"},{"location":"Reference/Blend2D/types/TBLBooleanOp/#notand-5","title":"<code>NotAnd (5)</code>","text":"<p>Result = (not A) and B. </p>"},{"location":"Reference/Blend2D/types/TBLByteOrder/","title":"TBLByteOrder","text":"<p>Byte order. </p>"},{"location":"Reference/Blend2D/types/TBLByteOrder/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLByteOrder = (LE, BE, Native, Swapped)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLByteOrder/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLByteOrder/#le-0","title":"<code>LE (0)</code>","text":"<p>Little endian byte-order. </p>"},{"location":"Reference/Blend2D/types/TBLByteOrder/#be-1","title":"<code>BE (1)</code>","text":"<p>Big endian byte-order. </p>"},{"location":"Reference/Blend2D/types/TBLByteOrder/#native-le","title":"<code>Native = LE</code>","text":"<p>Native (host) byte-order. </p>"},{"location":"Reference/Blend2D/types/TBLByteOrder/#swapped-be","title":"<code>Swapped = BE</code>","text":"<p>Swapped byte-order (BE if host is LE and vice versa). </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/","title":"TBLCompOp","text":"<p>Composition &amp; blending operator. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLCompOp = (SrcOver, SrcCopy, SrcIn, SrcOut, SrcAtop, DstOver, DstCopy, DstIn, DstOut, DstAtop, ExclusiveOr, Clear, Plus, Minus, Modulate...)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLCompOp/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLCompOp/#srcover-0","title":"<code>SrcOver (0)</code>","text":"<p>Source-over [default]. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#srccopy-1","title":"<code>SrcCopy (1)</code>","text":"<p>Source-copy. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#srcin-2","title":"<code>SrcIn (2)</code>","text":"<p>Source-in. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#srcout-3","title":"<code>SrcOut (3)</code>","text":"<p>Source-out. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#srcatop-4","title":"<code>SrcAtop (4)</code>","text":"<p>Source-atop. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#dstover-5","title":"<code>DstOver (5)</code>","text":"<p>Destination-over. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#dstcopy-6","title":"<code>DstCopy (6)</code>","text":"<p>Destination-copy [nop]. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#dstin-7","title":"<code>DstIn (7)</code>","text":"<p>Destination-in. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#dstout-8","title":"<code>DstOut (8)</code>","text":"<p>Destination-out. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#dstatop-9","title":"<code>DstAtop (9)</code>","text":"<p>Destination-atop. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#exclusiveor-10","title":"<code>ExclusiveOr (10)</code>","text":"<p>Xor. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#clear-11","title":"<code>Clear (11)</code>","text":"<p>Clear. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#plus-12","title":"<code>Plus (12)</code>","text":"<p>Plus. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#minus-13","title":"<code>Minus (13)</code>","text":"<p>Minus. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#modulate-14","title":"<code>Modulate (14)</code>","text":"<p>Modulate. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#multiply-15","title":"<code>Multiply (15)</code>","text":"<p>Multiply. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#screen-16","title":"<code>Screen (16)</code>","text":"<p>Screen. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#overlay-17","title":"<code>Overlay (17)</code>","text":"<p>Overlay. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#darken-18","title":"<code>Darken (18)</code>","text":"<p>Darken. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#lighten-19","title":"<code>Lighten (19)</code>","text":"<p>Lighten. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#colordodge-20","title":"<code>ColorDodge (20)</code>","text":"<p>Color dodge. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#colorburn-21","title":"<code>ColorBurn (21)</code>","text":"<p>Color burn. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#linearburn-22","title":"<code>LinearBurn (22)</code>","text":"<p>Linear burn. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#linearlight-23","title":"<code>LinearLight (23)</code>","text":"<p>Linear light. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#pinlight-24","title":"<code>PinLight (24)</code>","text":"<p>Pin light. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#hardlight-25","title":"<code>HardLight (25)</code>","text":"<p>Hard-light. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#softlight-26","title":"<code>SoftLight (26)</code>","text":"<p>Soft-light. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#difference-27","title":"<code>Difference (27)</code>","text":"<p>Difference. </p>"},{"location":"Reference/Blend2D/types/TBLCompOp/#exclusion-28","title":"<code>Exclusion (28)</code>","text":"<p>Exclusion. </p>"},{"location":"Reference/Blend2D/types/TBLContextCreateFlag/","title":"TBLContextCreateFlag","text":"<p>Rendering context creation flags. </p>"},{"location":"Reference/Blend2D/types/TBLContextCreateFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextCreateFlag = (DisableJit, FallbackToSync, IsolatedThreadPool, IsolatedJitRuntime, IsolatedJitLogging, OverrideCpuFeatures)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLContextCreateFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLContextCreateFlag/#disablejit-0","title":"<code>DisableJit = 0</code>","text":"<p>Disables JIT pipeline generator. </p>"},{"location":"Reference/Blend2D/types/TBLContextCreateFlag/#fallbacktosync-20","title":"<code>FallbackToSync = 20</code>","text":"<p>Fallbacks to a synchronous rendering in case that the rendering engine wasn't able to acquire threads. This flag only makes sense when the asynchronous mode was specified by having <code>ThreadCount</code> greater than 0. If the rendering context fails to acquire at least one thread it would fallback to synchronous mode with no worker threads. </p>"},{"location":"Reference/Blend2D/types/TBLContextCreateFlag/#isolatedthreadpool-24","title":"<code>IsolatedThreadPool = 24</code>","text":"<p>If this flag is specified and asynchronous rendering is enabled then the context would create its own isolated  thread-pool, which is useful for debugging purposes.</p> <p>Do not use this flag in production as rendering contexts with isolated thread-pool have to create and destroy all threads they use. This flag is only useful for testing, debugging, and isolated benchmarking. </p>"},{"location":"Reference/Blend2D/types/TBLContextCreateFlag/#isolatedjitruntime-25","title":"<code>IsolatedJitRuntime = 25</code>","text":"<p>If this flag is specified and JIT pipeline generation enabled then the rendering context would create its own isolated JIT runtime. which is useful for debugging purposes. This flag will be ignored if JIT pipeline compilation is either not supported or was disabled by other flags.</p> <p>Do not use this flag in production as rendering contexts with isolated JIT runtime do not use global pipeline cache, that's it, after the rendering context is destroyed the JIT runtime is destroyed with it with all compiled pipelines. This flag is only useful for testing, debugging, and isolated benchmarking. </p>"},{"location":"Reference/Blend2D/types/TBLContextCreateFlag/#isolatedjitlogging-26","title":"<code>IsolatedJitLogging = 26</code>","text":"<p>Enables logging to stderr of isolated runtime. </p>"},{"location":"Reference/Blend2D/types/TBLContextCreateFlag/#overridecpufeatures-27","title":"<code>OverrideCpuFeatures = 27</code>","text":"<p>Override CPU features when creating isolated context. </p>"},{"location":"Reference/Blend2D/types/TBLContextCreateFlags/","title":"TBLContextCreateFlags","text":"<p>Rendering context creation flags. </p>"},{"location":"Reference/Blend2D/types/TBLContextCreateFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextCreateFlags = set of TBLContextCreateFlag\n</code></pre> <p>Base type: <code>TBLContextCreateFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlag/","title":"TBLContextErrorFlag","text":"<p>Error flags that are accumulated during the rendering context lifetime and that can be queried through <code>TBLContext.AccumulatedErrorFlags</code>. The reason why these flags exist is that errors can happen during asynchronous rendering, and there is no way the user can catch these errors. </p>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextErrorFlag = (InvalidValue, InvalidState, InvalidGeometry, InvalidGlyph, InvalidFont, ThreadPoolExhausted, OutOfMemory, UnknownError)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlag/#see-also","title":"See Also","text":"<ul> <li>TBLContext.AccumulatedErrorFlags</li> </ul>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLContextErrorFlag/#invalidvalue-0","title":"<code>InvalidValue = 0</code>","text":"<p>The rendering context returned or encountered <code>TBLResult.InvalidValue</code>, which is mostly related to the function argument handling. It's very likely some argument was wrong when calling <code>TBLContext</code> API. </p>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlag/#invalidstate-1","title":"<code>InvalidState = 1</code>","text":"<p>Invalid state describes something wrong, for example a pipeline compilation error. </p>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlag/#invalidgeometry-2","title":"<code>InvalidGeometry = 2</code>","text":"<p>The rendering context has encountered invalid geometry. </p>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlag/#invalidglyph-3","title":"<code>InvalidGlyph = 3</code>","text":"<p>The rendering context has encountered invalid glyph. </p>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlag/#invalidfont-4","title":"<code>InvalidFont = 4</code>","text":"<p>The rendering context has encountered invalid or uninitialized font. </p>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlag/#threadpoolexhausted-29","title":"<code>ThreadPoolExhausted = 29</code>","text":"<p>Thread pool was exhausted and couldn't acquire the requested number of threads. </p>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlag/#outofmemory-30","title":"<code>OutOfMemory = 30</code>","text":"<p>Out of memory condition. </p>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlag/#unknownerror-31","title":"<code>UnknownError = 31</code>","text":"<p>Unknown error, which we don't have flag for. </p>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlags/","title":"TBLContextErrorFlags","text":"<p>Error flags that are accumulated during the rendering context lifetime. </p>"},{"location":"Reference/Blend2D/types/TBLContextErrorFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextErrorFlags = set of TBLContextErrorFlag\n</code></pre> <p>Base type: <code>TBLContextErrorFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLContextFlushFlag/","title":"TBLContextFlushFlag","text":"<p>Rendering context flush flags, used by <code>TBLContext.Flush</code>. </p>"},{"location":"Reference/Blend2D/types/TBLContextFlushFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextFlushFlag = (_Reserved, Sync)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLContextFlushFlag/#see-also","title":"See Also","text":"<ul> <li>TBLContext.Flush</li> </ul>"},{"location":"Reference/Blend2D/types/TBLContextFlushFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLContextFlushFlag/#_reserved-0","title":"<code>_Reserved = 0</code>","text":""},{"location":"Reference/Blend2D/types/TBLContextFlushFlag/#sync-31","title":"<code>Sync = 31</code>","text":"<p>Flushes the command queue and waits for its completion (will block until done). </p>"},{"location":"Reference/Blend2D/types/TBLContextFlushFlags/","title":"TBLContextFlushFlags","text":"<p>Rendering context flush flags, used by <code>TBLContext.Flush</code>. </p>"},{"location":"Reference/Blend2D/types/TBLContextFlushFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextFlushFlags = set of TBLContextFlushFlag\n</code></pre> <p>Base type: <code>TBLContextFlushFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLContextFlushFlags/#see-also","title":"See Also","text":"<ul> <li>TBLContext.Flush</li> </ul>"},{"location":"Reference/Blend2D/types/TBLContextHint/","title":"TBLContextHint","text":"<p>Rendering context hint. </p>"},{"location":"Reference/Blend2D/types/TBLContextHint/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextHint = (RenderingQuality, GradientQuality, PatternQuality)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLContextHint/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLContextHint/#renderingquality-0","title":"<code>RenderingQuality (0)</code>","text":"<p>Rendering quality. </p>"},{"location":"Reference/Blend2D/types/TBLContextHint/#gradientquality-1","title":"<code>GradientQuality (1)</code>","text":"<p>Gradient quality. </p>"},{"location":"Reference/Blend2D/types/TBLContextHint/#patternquality-2","title":"<code>PatternQuality (2)</code>","text":"<p>Pattern quality. </p>"},{"location":"Reference/Blend2D/types/TBLContextRenderTextOp/","title":"TBLContextRenderTextOp","text":"<p>The type of a text rendering operation.</p> <p>This value specifies the type of the parameter passed to the text rendering API. </p>"},{"location":"Reference/Blend2D/types/TBLContextRenderTextOp/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextRenderTextOp = (Utf8, Utf16, Utf32, Latin1, GlyphRun)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLContextRenderTextOp/#remarks","title":"Remarks","text":"<p>In most cases this should not be required to use by Blend2D users since the API provides functions that use <code>TBLContextRenderTextOp</code> internally. </p>"},{"location":"Reference/Blend2D/types/TBLContextRenderTextOp/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLContextRenderTextOp/#utf8-ordtbltextencodingutf8","title":"<code>Utf8 = Ord(TBLTextEncoding.Utf8</code>","text":"<p>UTF-8 text rendering operation - UTF-8 string passed as <code>TBLStringView</code>, <code>TBLArrayView&lt;byte&gt;</code> or <code>TBLArrayView&lt;utf8char&gt;</code>. </p>"},{"location":"Reference/Blend2D/types/TBLContextRenderTextOp/#utf16-ordtbltextencodingutf16","title":"<code>Utf16 = Ord(TBLTextEncoding.Utf16</code>","text":"<p>UTF-16 text rendering operation - UTF-16 string passed as <code>TBLArrayView&lt;uint16&gt;</code> or <code>TBLArrayView&lt;widechar&gt;</code>. </p>"},{"location":"Reference/Blend2D/types/TBLContextRenderTextOp/#utf32-ordtbltextencodingutf32","title":"<code>Utf32 = Ord(TBLTextEncoding.Utf32</code>","text":"<p>UTF-32 text rendering operation - UTF-32 string passed as <code>TBLArrayView&lt;uint32&gt;</code> or <code>TBLArrayView&lt;ucs4char&gt;</code>. </p>"},{"location":"Reference/Blend2D/types/TBLContextRenderTextOp/#latin1-ordtbltextencodinglatin1","title":"<code>Latin1 = Ord(TBLTextEncoding.Latin1</code>","text":"<p>LATIN1 text rendering operation - LATIN1 string is passed as <code>TBLStringView</code>, <code>TBLArrayView&lt;byte&gt;</code> or <code>TBLArrayView&lt;ansichar&gt;</code>. </p>"},{"location":"Reference/Blend2D/types/TBLContextRenderTextOp/#glyphrun-4","title":"<code>GlyphRun = 4</code>","text":"<p>Glyph run text rendering operation - the <code>TBLGlyphRun</code> parameter is passed. </p>"},{"location":"Reference/Blend2D/types/TBLContextStyleSlot/","title":"TBLContextStyleSlot","text":"<p>Describes a rendering context style slot - fill or stroke. </p>"},{"location":"Reference/Blend2D/types/TBLContextStyleSlot/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextStyleSlot = (Fill, Stroke)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLContextStyleSlot/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLContextStyleSlot/#fill-0","title":"<code>Fill (0)</code>","text":"<p>Fill operation style slot. </p>"},{"location":"Reference/Blend2D/types/TBLContextStyleSlot/#stroke-1","title":"<code>Stroke (1)</code>","text":"<p>Stroke operation style slot. </p>"},{"location":"Reference/Blend2D/types/TBLContextStyleSwapMode/","title":"TBLContextStyleSwapMode","text":"<p>Specifies the behavior of <code>TBLContext.SwapStyles</code> operation. </p>"},{"location":"Reference/Blend2D/types/TBLContextStyleSwapMode/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextStyleSwapMode = (Styles, StyledWithAlpha)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLContextStyleSwapMode/#see-also","title":"See Also","text":"<ul> <li>TBLContext.SwapStyles</li> </ul>"},{"location":"Reference/Blend2D/types/TBLContextStyleSwapMode/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLContextStyleSwapMode/#styles-0","title":"<code>Styles (0)</code>","text":"<p>Swap only fill and stroke styles without affecting fill and stroke alpha. </p>"},{"location":"Reference/Blend2D/types/TBLContextStyleSwapMode/#styledwithalpha-1","title":"<code>StyledWithAlpha (1)</code>","text":"<p>Swap both fill and stroke styles and their alpha values. </p>"},{"location":"Reference/Blend2D/types/TBLContextStyleTransformMode/","title":"TBLContextStyleTransformMode","text":"<p>Specifies how style transformation matrix is combined with the rendering context transformation matrix, used by <code>TBLContext.SetStyle</code> function. </p>"},{"location":"Reference/Blend2D/types/TBLContextStyleTransformMode/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextStyleTransformMode = (User, Meta, None)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLContextStyleTransformMode/#see-also","title":"See Also","text":"<ul> <li>TBLContext.SetStyle</li> </ul>"},{"location":"Reference/Blend2D/types/TBLContextStyleTransformMode/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLContextStyleTransformMode/#user-0","title":"<code>User (0)</code>","text":"<p>Style transformation matrix should be transformed with the rendering context user and meta matrix (default). </p>"},{"location":"Reference/Blend2D/types/TBLContextStyleTransformMode/#meta-1","title":"<code>Meta (1)</code>","text":"<p>Style transformation matrix should be transformed with the rendering context meta matrix. </p>"},{"location":"Reference/Blend2D/types/TBLContextStyleTransformMode/#none-2","title":"<code>None (2)</code>","text":"<p>Style transformation matrix is considered absolute, and is not combined with a rendering context transform. </p>"},{"location":"Reference/Blend2D/types/TBLContextType/","title":"TBLContextType","text":"<p>Rendering context type. </p>"},{"location":"Reference/Blend2D/types/TBLContextType/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLContextType = (None, Dummy, Raster)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLContextType/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLContextType/#none-0","title":"<code>None (0)</code>","text":"<p>No rendering context. </p>"},{"location":"Reference/Blend2D/types/TBLContextType/#dummy-1","title":"<code>Dummy (1)</code>","text":"<p>Dummy rendering context. </p>"},{"location":"Reference/Blend2D/types/TBLContextType/#raster-3","title":"<code>Raster = 3</code>","text":"<p>Software-accelerated rendering context. </p>"},{"location":"Reference/Blend2D/types/TBLDataAccessFlags/","title":"TBLDataAccessFlags","text":"<p>Data access flags. </p>"},{"location":"Reference/Blend2D/types/TBLDataAccessFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLDataAccessFlags = (None, Read, Write, RW)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLDataAccessFlags/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLDataAccessFlags/#none-00","title":"<code>None = $00</code>","text":"<p>No data access flags. </p>"},{"location":"Reference/Blend2D/types/TBLDataAccessFlags/#read-01","title":"<code>Read = $01</code>","text":"<p>Read access. </p>"},{"location":"Reference/Blend2D/types/TBLDataAccessFlags/#write-02","title":"<code>Write = $02</code>","text":"<p>Write access. </p>"},{"location":"Reference/Blend2D/types/TBLDataAccessFlags/#rw-03","title":"<code>RW = $03</code>","text":"<p>Read and write access. </p>"},{"location":"Reference/Blend2D/types/TBLDataSourceType/","title":"TBLDataSourceType","text":"<p>Data source type. </p>"},{"location":"Reference/Blend2D/types/TBLDataSourceType/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLDataSourceType = (None, Memory, &amp;File, Custom)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLDataSourceType/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLDataSourceType/#none-0","title":"<code>None (0)</code>","text":"<p>No data source. </p>"},{"location":"Reference/Blend2D/types/TBLDataSourceType/#memory-1","title":"<code>Memory (1)</code>","text":"<p>Memory data source. </p>"},{"location":"Reference/Blend2D/types/TBLDataSourceType/#file-2","title":"<code>&amp;File (2)</code>","text":"<p>File data source. </p>"},{"location":"Reference/Blend2D/types/TBLDataSourceType/#custom-3","title":"<code>Custom (3)</code>","text":"<p>Custom data source. </p>"},{"location":"Reference/Blend2D/types/TBLDataView/","title":"TBLDataView","text":"<p>View of untyped data. </p>"},{"location":"Reference/Blend2D/types/TBLDataView/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLDataView = TBLArrayView&lt;Byte&gt;\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLDebugMessageSinkFunc/","title":"TBLDebugMessageSinkFunc","text":"<p>A sink that can be used to debug various parts of Blend2D. </p>"},{"location":"Reference/Blend2D/types/TBLDebugMessageSinkFunc/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLDebugMessageSinkFunc = procedure(const AMessage: PUTF8Char; \n  ASize: Size_T; AUserData: Pointer); cdecl\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLDebugMessageSinkFunc/#parameters","title":"Parameters","text":"<p><code>AMessage</code>: <code>PUTF8Char</code></p> <p><code>ASize</code>: <code>Size_T</code></p> <p><code>AUserData</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/types/TBLDestroyExternalDataFunc/","title":"TBLDestroyExternalDataFunc","text":"<p>A function callback that is called when an object that holds external data is going to be destroyed. It's often used as a notification that a data passed to a certain object is no longer in use by Blend2D. </p>"},{"location":"Reference/Blend2D/types/TBLDestroyExternalDataFunc/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLDestroyExternalDataFunc = procedure(AImpl, \n  AExternalData, AUserData: Pointer); cdecl\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLDestroyExternalDataFunc/#parameters","title":"Parameters","text":"<p><code>AImpl</code>: <code>Pointer</code></p> <p><code>AExternalData</code>: <code>Pointer</code></p> <p><code>AUserData</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/types/TBLErrorHandler/","title":"TBLErrorHandler","text":"<p>Type of procedure that is called when a Blend2D error occurs. </p>"},{"location":"Reference/Blend2D/types/TBLErrorHandler/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLErrorHandler = procedure(const AResultCode: TBLResult; \n  const AUserData: Pointer)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLErrorHandler/#parameters","title":"Parameters","text":"<p><code>AResultCode</code>: <code>TBLResult</code></p> <p><code>AUserData</code>: <code>Pointer</code> : Any user data passed to <code>BLSetErrorHandler</code>.</p>"},{"location":"Reference/Blend2D/types/TBLErrorHandler/#see-also","title":"See Also","text":"<ul> <li>BLSetErrorHandler</li> </ul>"},{"location":"Reference/Blend2D/types/TBLExtendMode/","title":"TBLExtendMode","text":"<p>Extend mode. </p>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLExtendMode = (Pad, Repeating, Reflect, PadXPadY, PadXRepeatY, PadXReflectY, RepeatXRepeat, RepeatXPadY, RepeatXReflectY, ReflectXReflectY, ReflectXPadY, ReflectXRepeatY)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLExtendMode/#pad-0","title":"<code>Pad (0)</code>","text":"<p>Pad extend [default]. </p>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#repeating-1","title":"<code>Repeating (1)</code>","text":"<p>Repeat extend. </p>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#reflect-2","title":"<code>Reflect (2)</code>","text":"<p>Reflect extend. </p>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#padxpady-pad","title":"<code>PadXPadY = Pad</code>","text":"<p>Alias of <code>Pad</code>. </p>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#padxrepeaty-3","title":"<code>PadXRepeatY = 3</code>","text":"<p>Pad X and repeat Y. </p>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#padxreflecty-5","title":"<code>PadXReflectY (5)</code>","text":"<p>Pad X and reflect Y. </p>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#repeatxrepeat-repeating","title":"<code>RepeatXRepeat = Repeating</code>","text":"<p>Alias of <code>Repeating</code>. </p>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#repeatxpady-5","title":"<code>RepeatXPadY = 5</code>","text":"<p>Repeat X and pad Y. </p>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#repeatxreflecty-8","title":"<code>RepeatXReflectY (8)</code>","text":"<p>Repeat X and reflect Y. </p>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#reflectxreflecty-reflect","title":"<code>ReflectXReflectY = Reflect</code>","text":"<p>Alias of <code>Reflect</code>. </p>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#reflectxpady-7","title":"<code>ReflectXPadY = 7</code>","text":"<p>Reflect X and pad Y. </p>"},{"location":"Reference/Blend2D/types/TBLExtendMode/#reflectxrepeaty-11","title":"<code>ReflectXRepeatY (11)</code>","text":"<p>Reflect X and repeat Y. </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/","title":"TBLFileInfoFlag","text":"<p>File information flags, used by <code>TBLFileInfo</code>. </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFileInfoFlag = (OwnerR, OwnerW, OwnerX, GroupR, GroupW, GroupX, OtherR, OtherW, OtherX, SetUid, SetGid, Regular, Directory, SymLink, CharDevice...)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#see-also","title":"See Also","text":"<ul> <li>TBLFileInfo</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#ownerr-8","title":"<code>OwnerR = 8</code>","text":"<p>File owner has read permission (compatible with 0400 octal notation). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#ownerw-7","title":"<code>OwnerW = 7</code>","text":"<p>File owner has write permission (compatible with 0200 octal notation). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#ownerx-6","title":"<code>OwnerX = 6</code>","text":"<p>File owner has execute permission (compatible with 0100 octal notation). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#groupr-5","title":"<code>GroupR = 5</code>","text":"<p>File group owner has read permission (compatible with 040 octal notation). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#groupw-4","title":"<code>GroupW = 4</code>","text":"<p>File group owner has write permission (compatible with 020 octal notation). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#groupx-3","title":"<code>GroupX = 3</code>","text":"<p>File group owner has execute permission (compatible with 010 octal notation). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#otherr-2","title":"<code>OtherR = 2</code>","text":"<p>Other users have read permission (compatible with 04 octal notation). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#otherw-1","title":"<code>OtherW = 1</code>","text":"<p>Other users have write permission (compatible with 02 octal notation). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#otherx-0","title":"<code>OtherX = 0</code>","text":"<p>Other users have execute permission (compatible with 01 octal notation). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#setuid-11","title":"<code>SetUid = 11</code>","text":"<p>Set user ID to file owner user ID on execution (compatible with 04000 octal notation). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#setgid-10","title":"<code>SetGid = 10</code>","text":"<p>Set group ID to file's user group ID on execution (compatible with 02000 octal notation). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#regular-16","title":"<code>Regular = 16</code>","text":"<p>A flag specifying that this is a regular file. </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#directory-17","title":"<code>Directory = 17</code>","text":"<p>A flag specifying that this is a directory. </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#symlink-18","title":"<code>SymLink = 18</code>","text":"<p>A flag specifying that this is a symbolic link. </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#chardevice-20","title":"<code>CharDevice = 20</code>","text":"<p>A flag describing a character device. </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#blockdevice-21","title":"<code>BlockDevice = 21</code>","text":"<p>A flag describing a block device. </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#fifo-22","title":"<code>Fifo = 22</code>","text":"<p>A flag describing a FIFO (named pipe). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#socket-23","title":"<code>Socket = 23</code>","text":"<p>A flag describing a socket. </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#hidden-24","title":"<code>Hidden = 24</code>","text":"<p>A flag describing a hidden file (Windows only). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#executable-25","title":"<code>Executable = 25</code>","text":"<p>A flag describing an executable file (Windows only). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#archive-26","title":"<code>Archive = 26</code>","text":"<p>A flag describing an archive (Windows only). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#system-27","title":"<code>System = 27</code>","text":"<p>A flag describing a system file (Windows only). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlag/#valid-31","title":"<code>Valid = 31</code>","text":"<p>File information is valid (the request succeeded). </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlags/","title":"TBLFileInfoFlags","text":"<p>File information flags, used by <code>TBLFileInfo</code>. </p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFileInfoFlags = set of TBLFileInfoFlag\n</code></pre> <p>Base type: <code>TBLFileInfoFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLFileInfoFlags/#see-also","title":"See Also","text":"<ul> <li>TBLFileInfo</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/","title":"TBLFileOpenFlag","text":"<p>File open flags. </p>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFileOpenFlag = (Read, Write, Create, Delete, Truncate, ReadExclusive, WriteExclusive, CreateExclusive, DeleteExclusive)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/#see-also","title":"See Also","text":"<ul> <li>TBLFile.Open</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/#read-0","title":"<code>Read = 0</code>","text":"<p>Opens the file for reading.</p> <p>The following system flags are used when opening the file: - <code>O_RDONLY</code> (Posix) - <code>GENERIC_READ</code> (Windows) </p>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/#write-1","title":"<code>Write = 1</code>","text":"<p>Opens the file for writing:</p> <p>The following system flags are used when opening the file: - <code>O_WRONLY</code> (Posix) - <code>GENERIC_WRITE</code> (Windows) </p>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/#create-2","title":"<code>Create = 2</code>","text":"<p>Creates the file if it doesn't exist or opens it if it does.</p> <p>The following system flags are used when opening the file: - <code>O_CREAT</code> (Posix) - <code>CREATE_ALWAYS</code> or <code>OPEN_ALWAYS</code> depending on other flags (Windows) </p>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/#delete-3","title":"<code>Delete = 3</code>","text":"<p>Opens the file for deleting or renaming (Windows).</p> <p>Adds <code>DELETE</code> flag when opening the file to <code>ACCESS_MASK</code>. </p>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/#truncate-4","title":"<code>Truncate = 4</code>","text":"<p>Truncates the file.</p> <p>The following system flags are used when opening the file: - <code>O_TRUNC</code> (Posix) - <code>TRUNCATE_EXISTING</code> (Windows) </p>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/#readexclusive-28","title":"<code>ReadExclusive = 28</code>","text":"<p>Opens the file for reading in exclusive mode (Windows).</p> <p>Exclusive mode means to not specify the <code>FILE_SHARE_READ</code> option. </p>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/#writeexclusive-29","title":"<code>WriteExclusive = 29</code>","text":"<p>Opens the file for writing in exclusive mode (Windows).</p> <p>Exclusive mode means to not specify the <code>FILE_SHARE_WRITE</code> option. </p>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/#createexclusive-30","title":"<code>CreateExclusive = 30</code>","text":"<p>Creates the file in exclusive mode - fails if the file already exists.</p> <p>The following system flags are used when opening the file: - <code>O_EXCL</code> (Posix) - <code>CREATE_NEW</code> (Windows) </p>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlag/#deleteexclusive-31","title":"<code>DeleteExclusive = 31</code>","text":"<p>Opens the file for deleting or renaming in exclusive mode (Windows).</p> <p>Exclusive mode means to not specify the <code>FILE_SHARE_DELETE</code> option. </p>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlags/","title":"TBLFileOpenFlags","text":"<p>File open flags. </p>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFileOpenFlags = set of TBLFileOpenFlag\n</code></pre> <p>Base type: <code>TBLFileOpenFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLFileOpenFlags/#see-also","title":"See Also","text":"<ul> <li>TBLFile.Open</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFileReadFlag/","title":"TBLFileReadFlag","text":"<p>File read flags used by <code>TBLFileSystem.ReadFile</code>. </p>"},{"location":"Reference/Blend2D/types/TBLFileReadFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFileReadFlag = (MmapEnabled, MmapAvoidSmall, MmapNoFallback)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFileReadFlag/#see-also","title":"See Also","text":"<ul> <li>TBLFileSystem.ReadFile</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFileReadFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFileReadFlag/#mmapenabled-0","title":"<code>MmapEnabled = 0</code>","text":"<p>Use memory mapping to read the content of the file.</p> <p>The destination buffer <code>TBLArray&lt;&gt;</code> would be configured to use the memory mapped buffer instead of allocating its own. </p>"},{"location":"Reference/Blend2D/types/TBLFileReadFlag/#mmapavoidsmall-1","title":"<code>MmapAvoidSmall = 1</code>","text":"<p>Avoid memory mapping of small files.</p> <p>The size of small file is determined by Blend2D, however, you should expect it to be 16kB or 64kB depending on host operating system. </p>"},{"location":"Reference/Blend2D/types/TBLFileReadFlag/#mmapnofallback-3","title":"<code>MmapNoFallback = 3</code>","text":"<p>Do not fallback to regular read if memory mapping fails. It's worth noting that memory mapping would fail for files stored on filesystem that is not local (like a mounted network filesystem, etc...). </p>"},{"location":"Reference/Blend2D/types/TBLFileReadFlags/","title":"TBLFileReadFlags","text":"<p>File read flags used by <code>TBLFileSystem.ReadFile</code>. </p>"},{"location":"Reference/Blend2D/types/TBLFileReadFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFileReadFlags = set of TBLFileReadFlag\n</code></pre> <p>Base type: <code>TBLFileReadFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLFileReadFlags/#see-also","title":"See Also","text":"<ul> <li>TBLFileSystem.ReadFile</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFileSeekType/","title":"TBLFileSeekType","text":"<p>File seek mode. </p>"},{"location":"Reference/Blend2D/types/TBLFileSeekType/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFileSeekType = (FromBeginning, FromCurrent, FromEnd)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFileSeekType/#see-also","title":"See Also","text":"<ul> <li>TBLFile.Seek</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFileSeekType/#remarks","title":"Remarks","text":"<p>Seek constants should be compatible with constants used by both POSIX and Windows API. </p>"},{"location":"Reference/Blend2D/types/TBLFileSeekType/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFileSeekType/#frombeginning-0","title":"<code>FromBeginning (0)</code>","text":"<p>Seek from the beginning of the file (SEEK_SET). </p>"},{"location":"Reference/Blend2D/types/TBLFileSeekType/#fromcurrent-1","title":"<code>FromCurrent (1)</code>","text":"<p>Seek from the current position (SEEK_CUR). </p>"},{"location":"Reference/Blend2D/types/TBLFileSeekType/#fromend-2","title":"<code>FromEnd (2)</code>","text":"<p>Seek from the end of the file (SEEK_END). </p>"},{"location":"Reference/Blend2D/types/TBLFillRule/","title":"TBLFillRule","text":"<p>Fill rule. </p>"},{"location":"Reference/Blend2D/types/TBLFillRule/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFillRule = (NonZero, EvenOdd)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFillRule/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFillRule/#nonzero-0","title":"<code>NonZero (0)</code>","text":"<p>Non-zero fill-rule. </p>"},{"location":"Reference/Blend2D/types/TBLFillRule/#evenodd-1","title":"<code>EvenOdd (1)</code>","text":"<p>Even-odd fill-rule. </p>"},{"location":"Reference/Blend2D/types/TBLFlattenMode/","title":"TBLFlattenMode","text":"<p>Mode that specifies how curves are approximated to line segments. </p>"},{"location":"Reference/Blend2D/types/TBLFlattenMode/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFlattenMode = (Default, Recursive)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFlattenMode/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFlattenMode/#default-0","title":"<code>Default (0)</code>","text":"<p>Use default mode (decided by Blend2D). </p>"},{"location":"Reference/Blend2D/types/TBLFlattenMode/#recursive-1","title":"<code>Recursive (1)</code>","text":"<p>Recursive subdivision flattening. </p>"},{"location":"Reference/Blend2D/types/TBLFontDataFlag/","title":"TBLFontDataFlag","text":"<p>Flags used by `TBLFontData'. </p>"},{"location":"Reference/Blend2D/types/TBLFontDataFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontDataFlag = (Collection)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFontDataFlag/#see-also","title":"See Also","text":"<ul> <li>TBLFontData</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFontDataFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFontDataFlag/#collection-0","title":"<code>Collection = 0</code>","text":"data references a font-collection."},{"location":"Reference/Blend2D/types/TBLFontDataFlags/","title":"TBLFontDataFlags","text":"<p>Flags used by `TBLFontData'. </p>"},{"location":"Reference/Blend2D/types/TBLFontDataFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontDataFlags = set of TBLFontDataFlag\n</code></pre> <p>Base type: <code>TBLFontDataFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLFontDataFlags/#see-also","title":"See Also","text":"<ul> <li>TBLFontData</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlag/","title":"TBLFontFaceDiagFlag","text":"<p>Diagnostic flags offered by <code>TBLFontFace</code>. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontFaceDiagFlag = (WrongNameData, FixedNameData, WrongKernData, FixedKernData, WrongCmapData, WrongCmapFormat)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlag/#see-also","title":"See Also","text":"<ul> <li>TBLFontFace</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlag/#wrongnamedata-0","title":"<code>WrongNameData = 0</code>","text":"<p>Wrong data in 'name' table. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlag/#fixednamedata-1","title":"<code>FixedNameData = 1</code>","text":"<p>Fixed data read from 'name' table and possibly fixed font family/subfamily name. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlag/#wrongkerndata-2","title":"<code>WrongKernData = 2</code>","text":"<p>Wrong data in 'kern' table [kerning disabled]. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlag/#fixedkerndata-3","title":"<code>FixedKernData = 3</code>","text":"<p>Fixed data read from 'kern' table so it can be used. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlag/#wrongcmapdata-4","title":"<code>WrongCmapData = 4</code>","text":"<p>Wrong data in 'cmap' table. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlag/#wrongcmapformat-5","title":"<code>WrongCmapFormat = 5</code>","text":"<p>Wrong format in 'cmap' (sub)table. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlags/","title":"TBLFontFaceDiagFlags","text":"<p>Diagnostic flags offered by <code>TBLFontFace</code>. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontFaceDiagFlags = set of TBLFontFaceDiagFlag\n</code></pre> <p>Base type: <code>TBLFontFaceDiagFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLFontFaceDiagFlags/#see-also","title":"See Also","text":"<ul> <li>TBLFontFace</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/","title":"TBLFontFaceFlag","text":"<p>Flags used by <code>TBLFontFace</code> </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontFaceFlag = (TypographicNames, TypographicMetrics, CharToGlyphMapping, HorizontalMetrics, VerticalMetrics, HorizontalKerning, VerticalKerning, OpenTypeFeatures, PanoseData, UnicodeCoverage, BaselineYEquals0, LsbPointXEquals0, VariationSequences, OpenTypeVariations, SymbolFont...)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#see-also","title":"See Also","text":"<ul> <li>TBLFontFace</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#typographicnames-0","title":"<code>TypographicNames = 0</code>","text":"<p>Font uses typographic family and subfamily names. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#typographicmetrics-1","title":"<code>TypographicMetrics = 1</code>","text":"<p>Font uses typographic metrics. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#chartoglyphmapping-2","title":"<code>CharToGlyphMapping = 2</code>","text":"<p>Character to glyph mapping is available. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#horizontalmetrics-4","title":"<code>HorizontalMetrics = 4</code>","text":"<p>Horizontal glyph metrics (advances, side bearings) is available. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#verticalmetrics-5","title":"<code>VerticalMetrics = 5</code>","text":"<p>Vertical glyph metrics (advances, side bearings) is available. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#horizontalkerning-6","title":"<code>HorizontalKerning = 6</code>","text":"<p>Legacy horizontal kerning feature ('kern' table with horizontal kerning data). </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#verticalkerning-7","title":"<code>VerticalKerning = 7</code>","text":"<p>Legacy vertical kerning feature ('kern' table with vertical kerning data). </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#opentypefeatures-8","title":"<code>OpenTypeFeatures = 8</code>","text":"<p>OpenType features (GDEF, GPOS, GSUB) are available. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#panosedata-9","title":"<code>PanoseData = 9</code>","text":"<p>Panose classification is available. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#unicodecoverage-10","title":"<code>UnicodeCoverage = 10</code>","text":"<p>Unicode coverage information is available. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#baselineyequals0-12","title":"<code>BaselineYEquals0 = 12</code>","text":"<p>Baseline for font at <code>Y</code> equals 0. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#lsbpointxequals0-13","title":"<code>LsbPointXEquals0 = 13</code>","text":"<p>Left sidebearing point at <code>X = 0</code> (TT only). </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#variationsequences-28","title":"<code>VariationSequences = 28</code>","text":"<p>Unicode variation sequences feature is available. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#opentypevariations-29","title":"<code>OpenTypeVariations = 29</code>","text":"<p>OpenType Font Variations feature is available. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#symbolfont-30","title":"<code>SymbolFont = 30</code>","text":"<p>This is a symbol font. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlag/#lastresortfont-31","title":"<code>LastResortFont = 31</code>","text":"<p>This is a last resort font. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlags/","title":"TBLFontFaceFlags","text":"<p>Flags used by <code>TBLFontFace</code> </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontFaceFlags = set of TBLFontFaceFlag\n</code></pre> <p>Base type: <code>TBLFontFaceFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLFontFaceFlags/#see-also","title":"See Also","text":"<ul> <li>TBLFontFace</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFontFaceType/","title":"TBLFontFaceType","text":"<p>Type of a font or font face, see <code>TBLFontFace</code>. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceType/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontFaceType = (None, OpenType)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFontFaceType/#see-also","title":"See Also","text":"<ul> <li>TBLFontFace</li> </ul>"},{"location":"Reference/Blend2D/types/TBLFontFaceType/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFontFaceType/#none-0","title":"<code>None (0)</code>","text":"<p>None or unknown font type. </p>"},{"location":"Reference/Blend2D/types/TBLFontFaceType/#opentype-1","title":"<code>OpenType (1)</code>","text":"<p>TrueType/OpenType font type (.ttf/.otf files and font collections). </p>"},{"location":"Reference/Blend2D/types/TBLFontOutlineType/","title":"TBLFontOutlineType","text":"<p>Format of an outline stored in a font. </p>"},{"location":"Reference/Blend2D/types/TBLFontOutlineType/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontOutlineType = (None, Truetype, Cff, Cff2)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFontOutlineType/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFontOutlineType/#none-0","title":"<code>None (0)</code>","text":"<p>None. </p>"},{"location":"Reference/Blend2D/types/TBLFontOutlineType/#truetype-1","title":"<code>Truetype (1)</code>","text":"<p>Truetype outlines. </p>"},{"location":"Reference/Blend2D/types/TBLFontOutlineType/#cff-2","title":"<code>Cff (2)</code>","text":"<p>OpenType (CFF) outlines. </p>"},{"location":"Reference/Blend2D/types/TBLFontOutlineType/#cff2-3","title":"<code>Cff2 (3)</code>","text":"<p>OpenType (CFF2) outlines with font variations support. </p>"},{"location":"Reference/Blend2D/types/TBLFontStretch/","title":"TBLFontStretch","text":"<p>Font stretch. </p>"},{"location":"Reference/Blend2D/types/TBLFontStretch/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontStretch = (UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, Normal, SemiExpanded, Expanded, ExtraExpanded, UltraExpanded)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFontStretch/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFontStretch/#ultracondensed-1","title":"<code>UltraCondensed = 1</code>","text":"<p>Ultra condensed stretch. </p>"},{"location":"Reference/Blend2D/types/TBLFontStretch/#extracondensed-1","title":"<code>ExtraCondensed (1)</code>","text":"<p>Extra condensed stretch. </p>"},{"location":"Reference/Blend2D/types/TBLFontStretch/#condensed-2","title":"<code>Condensed (2)</code>","text":"<p>Condensed stretch. </p>"},{"location":"Reference/Blend2D/types/TBLFontStretch/#semicondensed-3","title":"<code>SemiCondensed (3)</code>","text":"<p>Semi condensed stretch. </p>"},{"location":"Reference/Blend2D/types/TBLFontStretch/#normal-4","title":"<code>Normal (4)</code>","text":"<p>Normal stretch. </p>"},{"location":"Reference/Blend2D/types/TBLFontStretch/#semiexpanded-5","title":"<code>SemiExpanded (5)</code>","text":"<p>Semi expanded stretch. </p>"},{"location":"Reference/Blend2D/types/TBLFontStretch/#expanded-6","title":"<code>Expanded (6)</code>","text":"<p>Expanded stretch. </p>"},{"location":"Reference/Blend2D/types/TBLFontStretch/#extraexpanded-7","title":"<code>ExtraExpanded (7)</code>","text":"<p>Extra expanded stretch. </p>"},{"location":"Reference/Blend2D/types/TBLFontStretch/#ultraexpanded-8","title":"<code>UltraExpanded (8)</code>","text":"<p>Ultra expanded stretch. </p>"},{"location":"Reference/Blend2D/types/TBLFontStyle/","title":"TBLFontStyle","text":"<p>Font style. </p>"},{"location":"Reference/Blend2D/types/TBLFontStyle/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontStyle = (Normal, Oblique, Italic)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFontStyle/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFontStyle/#normal-0","title":"<code>Normal (0)</code>","text":"<p>Normal style. </p>"},{"location":"Reference/Blend2D/types/TBLFontStyle/#oblique-1","title":"<code>Oblique (1)</code>","text":"<p>Oblique. </p>"},{"location":"Reference/Blend2D/types/TBLFontStyle/#italic-2","title":"<code>Italic (2)</code>","text":"<p>Italic. </p>"},{"location":"Reference/Blend2D/types/TBLFontWeight/","title":"TBLFontWeight","text":"<p>Font weight. </p>"},{"location":"Reference/Blend2D/types/TBLFontWeight/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFontWeight = (Thin, ExtraLight, Light, SemiLight, Normal, Medium, SemiBold, Bold, ExtraBold, Black, ExtraBlack)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFontWeight/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFontWeight/#thin-100","title":"<code>Thin = 100</code>","text":"<p>Thin weight (100). </p>"},{"location":"Reference/Blend2D/types/TBLFontWeight/#extralight-200","title":"<code>ExtraLight = 200</code>","text":"<p>Extra light weight (200). </p>"},{"location":"Reference/Blend2D/types/TBLFontWeight/#light-300","title":"<code>Light = 300</code>","text":"<p>Light weight (300). </p>"},{"location":"Reference/Blend2D/types/TBLFontWeight/#semilight-350","title":"<code>SemiLight = 350</code>","text":"<p>Semi light weight (350). </p>"},{"location":"Reference/Blend2D/types/TBLFontWeight/#normal-400","title":"<code>Normal = 400</code>","text":"<p>Normal weight (400). </p>"},{"location":"Reference/Blend2D/types/TBLFontWeight/#medium-500","title":"<code>Medium = 500</code>","text":"<p>Medium weight (500). </p>"},{"location":"Reference/Blend2D/types/TBLFontWeight/#semibold-600","title":"<code>SemiBold = 600</code>","text":"<p>Semi bold weight (600). </p>"},{"location":"Reference/Blend2D/types/TBLFontWeight/#bold-700","title":"<code>Bold = 700</code>","text":"<p>Bold weight (700). </p>"},{"location":"Reference/Blend2D/types/TBLFontWeight/#extrabold-800","title":"<code>ExtraBold = 800</code>","text":"<p>Extra bold weight (800). </p>"},{"location":"Reference/Blend2D/types/TBLFontWeight/#black-900","title":"<code>Black = 900</code>","text":"<p>Black weight (900). </p>"},{"location":"Reference/Blend2D/types/TBLFontWeight/#extrablack-950","title":"<code>ExtraBlack = 950</code>","text":"<p>Extra black weight (950). </p>"},{"location":"Reference/Blend2D/types/TBLFormat/","title":"TBLFormat","text":"<p>Pixel format. </p>"},{"location":"Reference/Blend2D/types/TBLFormat/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFormat = (None, Prgb32, Xrgb32, A8)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFormat/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFormat/#none-0","title":"<code>None (0)</code>","text":"<p>None or invalid pixel format. </p>"},{"location":"Reference/Blend2D/types/TBLFormat/#prgb32-1","title":"<code>Prgb32 (1)</code>","text":"<p>32-bit premultiplied ARGB pixel format (8-bit components). </p>"},{"location":"Reference/Blend2D/types/TBLFormat/#xrgb32-2","title":"<code>Xrgb32 (2)</code>","text":"<p>32-bit (X)RGB pixel format (8-bit components, alpha ignored). </p>"},{"location":"Reference/Blend2D/types/TBLFormat/#a8-3","title":"<code>A8 (3)</code>","text":"<p>8-bit alpha-only pixel format. </p>"},{"location":"Reference/Blend2D/types/TBLFormat/#methods","title":"Methods","text":"Name Description Info Get information about this format."},{"location":"Reference/Blend2D/types/TBLFormat/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/types/TBLFormat/#Info","title":"Info","text":"<p>Get information about this format. </p> <p><code>function Info: TBLFormatInfo; inline</code></p>"},{"location":"Reference/Blend2D/types/TBLFormat/#returns","title":"Returns","text":"<p><code>TBLFormatInfo</code></p>"},{"location":"Reference/Blend2D/types/TBLFormat/#remarks","title":"Remarks","text":"<p><code>TBLFormat.None</code> is considered invalid format, thus if it's passed to <code>Query</code> it will raise an error. &lt;.remarks&gt;Raised on failure.&lt;/.remarks&gt;</p>"},{"location":"Reference/Blend2D/types/TBLFormatFlag/","title":"TBLFormatFlag","text":"<p>Pixel format flags. </p>"},{"location":"Reference/Blend2D/types/TBLFormatFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFormatFlag = (Rgb, Alpha, Lum, Indexed, Premultiplied, ByteSwap, ByteAligned, UndefinedBits)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLFormatFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLFormatFlag/#rgb-0","title":"<code>Rgb = 0</code>","text":"<p>Pixel format provides RGB components. </p>"},{"location":"Reference/Blend2D/types/TBLFormatFlag/#alpha-1","title":"<code>Alpha = 1</code>","text":"<p>Pixel format provides only alpha component. </p>"},{"location":"Reference/Blend2D/types/TBLFormatFlag/#lum-2","title":"<code>Lum = 2</code>","text":"<p>Pixel format provides LUM component (and not RGB components). </p>"},{"location":"Reference/Blend2D/types/TBLFormatFlag/#indexed-4","title":"<code>Indexed = 4</code>","text":"<p>Indexed pixel format the requires a palette (I/O only). </p>"},{"location":"Reference/Blend2D/types/TBLFormatFlag/#premultiplied-8","title":"<code>Premultiplied = 8</code>","text":"<p>RGB components are premultiplied by alpha component. </p>"},{"location":"Reference/Blend2D/types/TBLFormatFlag/#byteswap-9","title":"<code>ByteSwap = 9</code>","text":"<p>Pixel format doesn't use native byte-order (I/O only). </p>"},{"location":"Reference/Blend2D/types/TBLFormatFlag/#bytealigned-16","title":"<code>ByteAligned = 16</code>","text":"<p>Pixel components are byte aligned (all 8bpp). </p>"},{"location":"Reference/Blend2D/types/TBLFormatFlag/#undefinedbits-17","title":"<code>UndefinedBits = 17</code>","text":"<p>Pixel has some undefined bits that represent no information.</p> <p>For example a 32-bit XRGB pixel has 8 undefined bits that are usually set to all ones so the format can be interpreted as premultiplied RGB as well. There are other formats like 16_0555 where the bit has no information and is usually set to zero. Blend2D doesn't rely on the content of such bits. </p>"},{"location":"Reference/Blend2D/types/TBLFormatFlags/","title":"TBLFormatFlags","text":"<p>Pixel format flags. </p>"},{"location":"Reference/Blend2D/types/TBLFormatFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFormatFlags = set of TBLFormatFlag\n</code></pre> <p>Base type: <code>TBLFormatFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLFourBytes/","title":"TBLFourBytes","text":""},{"location":"Reference/Blend2D/types/TBLFourBytes/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLFourBytes = array [0..3] of Byte\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLGeometryDirection/","title":"TBLGeometryDirection","text":"<p>Direction of a geometry used by geometric primitives and paths. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryDirection/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGeometryDirection = (None, CW, CCW)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLGeometryDirection/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLGeometryDirection/#none-0","title":"<code>None (0)</code>","text":"<p>No direction specified. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryDirection/#cw-1","title":"<code>CW (1)</code>","text":"<p>Clockwise direction. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryDirection/#ccw-2","title":"<code>CCW (2)</code>","text":"<p>Counter-clockwise direction. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/","title":"TBLGeometryType","text":"<p>Geometry type.</p> <p>Geometry describes a shape or path that can be either rendered or added to <code>TBLPath</code> container. Both <code>TBLPath</code> and <code>TBLContext</code> provide functionality to work with all geometry types. Please note that each type provided here requires to pass a matching record to the function that consumes <code>AGeometryType</code> and <code>AGeometryData</code> arguments. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGeometryType = (None, BoxI, BoxD, RectI, RectD, Circle, Ellipse, RoundRect, Arc, Chord, Pie, Line, Triangle, PolylineI, PolylineD...)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#see-also","title":"See Also","text":"<ul> <li>TBLPath</li> <li>TBLContext</li> </ul>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLGeometryType/#none-0","title":"<code>None (0)</code>","text":"<p>No geometry provided. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#boxi-1","title":"<code>BoxI (1)</code>","text":"<p>TBLBoxI record. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#boxd-2","title":"<code>BoxD (2)</code>","text":"<p>TBLBox record. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#recti-3","title":"<code>RectI (3)</code>","text":"<p>TBLRectI record. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#rectd-4","title":"<code>RectD (4)</code>","text":"<p>TBLRect record. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#circle-5","title":"<code>Circle (5)</code>","text":"<p>TBLCircle record. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#ellipse-6","title":"<code>Ellipse (6)</code>","text":"<p>TBLEllipse record. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#roundrect-7","title":"<code>RoundRect (7)</code>","text":"<p>TBLRoundRect record. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#arc-8","title":"<code>Arc (8)</code>","text":"<p>TBLArc record. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#chord-9","title":"<code>Chord (9)</code>","text":"<p>TBLArc record representing chord. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#pie-10","title":"<code>Pie (10)</code>","text":"<p>TBLArc record representing pie. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#line-11","title":"<code>Line (11)</code>","text":"<p>TBLLine record. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#triangle-12","title":"<code>Triangle (12)</code>","text":"<p>TBLTriangle record. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#polylinei-13","title":"<code>PolylineI (13)</code>","text":"<p>TBLArrayViewrepresenting a polyline. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#polylined-14","title":"<code>PolylineD (14)</code>","text":"<p>TBLArrayViewrepresenting a polyline. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#polygoni-15","title":"<code>PolygonI (15)</code>","text":"<p>TBLArrayViewrepresenting a polygon. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#polygond-16","title":"<code>PolygonD (16)</code>","text":"<p>TBLArrayViewrepresenting a polygon. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#arrayviewboxi-17","title":"<code>ArrayViewBoxI (17)</code>","text":"<p>TBLArrayViewrecord. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#arrayviewboxd-18","title":"<code>ArrayViewBoxD (18)</code>","text":"<p>TBLArrayViewrecord. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#arrayviewrecti-19","title":"<code>ArrayViewRectI (19)</code>","text":"<p>TBLArrayViewrecord. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#arrayviewrectd-20","title":"<code>ArrayViewRectD (20)</code>","text":"<p>TBLArrayViewrecord. </p>"},{"location":"Reference/Blend2D/types/TBLGeometryType/#path-21","title":"<code>Path (21)</code>","text":"<p>TBLPath. </p>"},{"location":"Reference/Blend2D/types/TBLGlyphId/","title":"TBLGlyphId","text":"<p>Glyph id - a 32-bit unsigned integer. </p>"},{"location":"Reference/Blend2D/types/TBLGlyphId/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGlyphId = UInt32\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLGlyphPlacementType/","title":"TBLGlyphPlacementType","text":"<p>Placement of glyphs stored in a <code>TBLGlyphRun</code>. </p>"},{"location":"Reference/Blend2D/types/TBLGlyphPlacementType/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGlyphPlacementType = (None, AdvanceOffset, DesignUnits, UserUnits, AbsoluteUnits)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLGlyphPlacementType/#see-also","title":"See Also","text":"<ul> <li>TBLGlyphRun</li> </ul>"},{"location":"Reference/Blend2D/types/TBLGlyphPlacementType/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLGlyphPlacementType/#none-0","title":"<code>None (0)</code>","text":"<p>No placement (custom handling by <code>TBLPathSinkFunc</code>). </p>"},{"location":"Reference/Blend2D/types/TBLGlyphPlacementType/#advanceoffset-1","title":"<code>AdvanceOffset (1)</code>","text":"<p>Each glyph has a TBLGlyphPlacement (advance + offset). </p>"},{"location":"Reference/Blend2D/types/TBLGlyphPlacementType/#designunits-2","title":"<code>DesignUnits (2)</code>","text":"<p>Each glyph has a TBLPoint offset in design-space units. </p>"},{"location":"Reference/Blend2D/types/TBLGlyphPlacementType/#userunits-3","title":"<code>UserUnits (3)</code>","text":"<p>Each glyph has a TBLPoint offset in user-space units. </p>"},{"location":"Reference/Blend2D/types/TBLGlyphPlacementType/#absoluteunits-4","title":"<code>AbsoluteUnits (4)</code>","text":"<p>Each glyph has a TBLPoint offset in absolute units. </p>"},{"location":"Reference/Blend2D/types/TBLGlyphRunFlag/","title":"TBLGlyphRunFlag","text":"<p>Flags used by <code>TBLGlyphRun</code>. </p>"},{"location":"Reference/Blend2D/types/TBLGlyphRunFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGlyphRunFlag = (_Reserved, Ucs4Content, InvalidText, UndefinedGlyphs, InvalidFontData)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLGlyphRunFlag/#see-also","title":"See Also","text":"<ul> <li>TBLGlyphRun</li> </ul>"},{"location":"Reference/Blend2D/types/TBLGlyphRunFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLGlyphRunFlag/#_reserved-0","title":"<code>_Reserved = 0</code>","text":""},{"location":"Reference/Blend2D/types/TBLGlyphRunFlag/#ucs4content-28","title":"<code>Ucs4Content = 28</code>","text":"<p>Glyph-run contains UCS-4 string and not glyphs (glyph-buffer only). </p>"},{"location":"Reference/Blend2D/types/TBLGlyphRunFlag/#invalidtext-29","title":"<code>InvalidText = 29</code>","text":"<p>Glyph-run was created from text that was not a valid unicode. </p>"},{"location":"Reference/Blend2D/types/TBLGlyphRunFlag/#undefinedglyphs-30","title":"<code>UndefinedGlyphs = 30</code>","text":"<p>Not the whole text was mapped to glyphs (contains undefined glyphs). </p>"},{"location":"Reference/Blend2D/types/TBLGlyphRunFlag/#invalidfontdata-31","title":"<code>InvalidFontData = 31</code>","text":"<p>Encountered invalid font data during text / glyph processing. </p>"},{"location":"Reference/Blend2D/types/TBLGlyphRunFlags/","title":"TBLGlyphRunFlags","text":"<p>Flags used by <code>TBLGlyphRun</code>. </p>"},{"location":"Reference/Blend2D/types/TBLGlyphRunFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGlyphRunFlags = set of TBLGlyphRunFlag\n</code></pre> <p>Base type: <code>TBLGlyphRunFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLGlyphRunFlags/#see-also","title":"See Also","text":"<ul> <li>TBLGlyphRun</li> </ul>"},{"location":"Reference/Blend2D/types/TBLGradientKind/","title":"TBLGradientKind","text":"<p>Gradient type. </p>"},{"location":"Reference/Blend2D/types/TBLGradientKind/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGradientKind = (Linear, Radial, Conic)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLGradientKind/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLGradientKind/#linear-0","title":"<code>Linear (0)</code>","text":"<p>Linear gradient type. </p>"},{"location":"Reference/Blend2D/types/TBLGradientKind/#radial-1","title":"<code>Radial (1)</code>","text":"<p>Radial gradient type. </p>"},{"location":"Reference/Blend2D/types/TBLGradientKind/#conic-2","title":"<code>Conic (2)</code>","text":"<p>Conic gradient type. </p>"},{"location":"Reference/Blend2D/types/TBLGradientQuality/","title":"TBLGradientQuality","text":"<p>Gradient rendering quality. </p>"},{"location":"Reference/Blend2D/types/TBLGradientQuality/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGradientQuality = (Nearest, Smooth, Dither)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLGradientQuality/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLGradientQuality/#nearest-0","title":"<code>Nearest (0)</code>","text":"<p>Nearest neighbor. </p>"},{"location":"Reference/Blend2D/types/TBLGradientQuality/#smooth-1","title":"<code>Smooth (1)</code>","text":"<p>Use smoothing, if available (currently never available). </p>"},{"location":"Reference/Blend2D/types/TBLGradientQuality/#dither-2","title":"<code>Dither (2)</code>","text":"<p>The renderer will use an implementation-specific dithering algorithm to prevent banding. </p>"},{"location":"Reference/Blend2D/types/TBLGradientValue/","title":"TBLGradientValue","text":"<p>Gradient data index. </p>"},{"location":"Reference/Blend2D/types/TBLGradientValue/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLGradientValue = (CommonX0, CommonY0, CommonX1, CommonY1, RadialR0, RadialR1, ConicAngle, ConicRepeat)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLGradientValue/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLGradientValue/#commonx0-0","title":"<code>CommonX0 (0)</code>","text":"<p>X0 - start 'X' for a Linear gradient and <code>X</code> center for both Radial and Conic gradients. </p>"},{"location":"Reference/Blend2D/types/TBLGradientValue/#commony0-1","title":"<code>CommonY0 (1)</code>","text":"<p>Y0 - start 'Y' for a Linear gradient and <code>Y</code> center for both Radial and Conic gradients. </p>"},{"location":"Reference/Blend2D/types/TBLGradientValue/#commonx1-2","title":"<code>CommonX1 (2)</code>","text":"<p>X1 - end 'X' for a Linear gradient and focal point <code>X</code> for a Radial gradient. </p>"},{"location":"Reference/Blend2D/types/TBLGradientValue/#commony1-3","title":"<code>CommonY1 (3)</code>","text":"<p>Y1 - end 'Y' for a Linear/gradient and focal point <code>Y</code> for a Radial gradient. </p>"},{"location":"Reference/Blend2D/types/TBLGradientValue/#radialr0-4","title":"<code>RadialR0 (4)</code>","text":"<p>Radial gradient center radius. </p>"},{"location":"Reference/Blend2D/types/TBLGradientValue/#radialr1-5","title":"<code>RadialR1 (5)</code>","text":"<p>Radial gradient focal radius. </p>"},{"location":"Reference/Blend2D/types/TBLGradientValue/#conicangle-2","title":"<code>ConicAngle = 2</code>","text":"<p>Conic gradient angle. </p>"},{"location":"Reference/Blend2D/types/TBLGradientValue/#conicrepeat-3","title":"<code>ConicRepeat = 3</code>","text":"<p>Conic gradient angle. </p>"},{"location":"Reference/Blend2D/types/TBLHitTest/","title":"TBLHitTest","text":"<p>Hit-test result. </p>"},{"location":"Reference/Blend2D/types/TBLHitTest/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLHitTest = (FullyIn, Partial, FullyOut, Invalid)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLHitTest/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLHitTest/#fullyin-0","title":"<code>FullyIn (0)</code>","text":"<p>Fully in. </p>"},{"location":"Reference/Blend2D/types/TBLHitTest/#partial-1","title":"<code>Partial (1)</code>","text":"<p>Partially in/out. </p>"},{"location":"Reference/Blend2D/types/TBLHitTest/#fullyout-2","title":"<code>FullyOut (2)</code>","text":"<p>Fully out. </p>"},{"location":"Reference/Blend2D/types/TBLHitTest/#invalid-integerffffffff","title":"<code>Invalid = Integer($FFFFFFFF</code>","text":"<p>Hit test failed (invalid argument, NaNs, etc). </p>"},{"location":"Reference/Blend2D/types/TBLImageCodecFeature/","title":"TBLImageCodecFeature","text":"<p>Image codec feature bits. </p>"},{"location":"Reference/Blend2D/types/TBLImageCodecFeature/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLImageCodecFeature = (Read, Write, Lossless, Lossy, MultiFrame, Iptc, Exif, Xmp)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLImageCodecFeature/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLImageCodecFeature/#read-0","title":"<code>Read = 0</code>","text":"<p>Image codec supports reading images (can create TBLImageDecoder). </p>"},{"location":"Reference/Blend2D/types/TBLImageCodecFeature/#write-1","title":"<code>Write = 1</code>","text":"<p>Image codec supports writing images (can create TBLImageEncoder). </p>"},{"location":"Reference/Blend2D/types/TBLImageCodecFeature/#lossless-2","title":"<code>Lossless = 2</code>","text":"<p>Image codec supports lossless compression. </p>"},{"location":"Reference/Blend2D/types/TBLImageCodecFeature/#lossy-3","title":"<code>Lossy = 3</code>","text":"<p>Image codec supports lossy compression. </p>"},{"location":"Reference/Blend2D/types/TBLImageCodecFeature/#multiframe-4","title":"<code>MultiFrame = 4</code>","text":"<p>Image codec supports writing multiple frames (GIF). </p>"},{"location":"Reference/Blend2D/types/TBLImageCodecFeature/#iptc-28","title":"<code>Iptc = 28</code>","text":"<p>Image codec supports IPTC metadata. </p>"},{"location":"Reference/Blend2D/types/TBLImageCodecFeature/#exif-29","title":"<code>Exif = 29</code>","text":"<p>Image codec supports EXIF metadata. </p>"},{"location":"Reference/Blend2D/types/TBLImageCodecFeature/#xmp-30","title":"<code>Xmp = 30</code>","text":"<p>Image codec supports XMP metadata. </p>"},{"location":"Reference/Blend2D/types/TBLImageCodecFeatures/","title":"TBLImageCodecFeatures","text":"<p>Image codec feature bits. </p>"},{"location":"Reference/Blend2D/types/TBLImageCodecFeatures/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLImageCodecFeatures = set of TBLImageCodecFeature\n</code></pre> <p>Base type: <code>TBLImageCodecFeature</code></p>"},{"location":"Reference/Blend2D/types/TBLImageInfoFlag/","title":"TBLImageInfoFlag","text":"<p>Flags used by <code>TBLImageInfo</code>. </p>"},{"location":"Reference/Blend2D/types/TBLImageInfoFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLImageInfoFlag = (Progressive)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLImageInfoFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLImageInfoFlag/#progressive-0","title":"<code>Progressive = 0</code>","text":"<p>Progressive mode. </p>"},{"location":"Reference/Blend2D/types/TBLImageInfoFlags/","title":"TBLImageInfoFlags","text":"<p>Flags used by <code>TBLImageInfo</code>. </p>"},{"location":"Reference/Blend2D/types/TBLImageInfoFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLImageInfoFlags = set of TBLImageInfoFlag\n</code></pre> <p>Base type: <code>TBLImageInfoFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLImageScaleFilter/","title":"TBLImageScaleFilter","text":"<p>Filter type used by <code>TBLImage.Scale</code>. </p>"},{"location":"Reference/Blend2D/types/TBLImageScaleFilter/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLImageScaleFilter = (None, Nearest, Bilinear, Bicubic, Lanczos)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLImageScaleFilter/#see-also","title":"See Also","text":"<ul> <li>TBLImage</li> </ul>"},{"location":"Reference/Blend2D/types/TBLImageScaleFilter/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLImageScaleFilter/#none-0","title":"<code>None (0)</code>","text":"<p>No filter or uninitialized. </p>"},{"location":"Reference/Blend2D/types/TBLImageScaleFilter/#nearest-1","title":"<code>Nearest (1)</code>","text":"<p>Nearest neighbor filter (radius 1.0). </p>"},{"location":"Reference/Blend2D/types/TBLImageScaleFilter/#bilinear-2","title":"<code>Bilinear (2)</code>","text":"<p>Bilinear filter (radius 1.0). </p>"},{"location":"Reference/Blend2D/types/TBLImageScaleFilter/#bicubic-3","title":"<code>Bicubic (3)</code>","text":"<p>Bicubic filter (radius 2.0). </p>"},{"location":"Reference/Blend2D/types/TBLImageScaleFilter/#lanczos-4","title":"<code>Lanczos (4)</code>","text":"<p>Lanczos filter (radius 2.0). </p>"},{"location":"Reference/Blend2D/types/TBLModifyOp/","title":"TBLModifyOp","text":"<p>Modification operation applied to Blend2D containers. </p>"},{"location":"Reference/Blend2D/types/TBLModifyOp/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLModifyOp = (AssignFit, AssignGrow, AppendFit, AppendGrow)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLModifyOp/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLModifyOp/#assignfit-0","title":"<code>AssignFit (0)</code>","text":"<p>Assign operation, which reserves space only to fit the requested input. </p>"},{"location":"Reference/Blend2D/types/TBLModifyOp/#assigngrow-1","title":"<code>AssignGrow (1)</code>","text":"<p>Assign operation, which takes into consideration successive appends. </p>"},{"location":"Reference/Blend2D/types/TBLModifyOp/#appendfit-2","title":"<code>AppendFit (2)</code>","text":"<p>Append operation, which reserves space only to fit the current and appended content. </p>"},{"location":"Reference/Blend2D/types/TBLModifyOp/#appendgrow-3","title":"<code>AppendGrow (3)</code>","text":"<p>Append operation, which takes into consideration successive appends. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/","title":"TBLObjectType","text":"<p>Object type identifier. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLObjectType = (Rgba, Rgba32, Rgba64, Null, Pattern, Gradient, Image, Path, Font, FontFeatureSettings, FontVariationSettings, BitArray, BitSet, Bool, Int64...)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLObjectType/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLObjectType/#rgba-0","title":"<code>Rgba = 0</code>","text":"<p>Object represents a TBLRgba value stored as four 32-bit floating point components (can be used as Style). </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#rgba32-1","title":"<code>Rgba32 = 1</code>","text":"<p>Object represents a TBLRgba32 value stored as 32-bit integer in <code>$AARRGGBB</code> form. Also compatible with Delphi's <code>TAlphaColor</code> and <code>TAlphaColorRec</code>. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#rgba64-2","title":"<code>Rgba64 = 2</code>","text":"<p>Object represents a TBLRgba64 value stored as 64-bit integer in <code>$AAAARRRRGGGGBBBB</code> form. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#null-3","title":"<code>Null = 3</code>","text":"<p>Object is <code>Null</code> (can be used as Style). </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#pattern-4","title":"<code>Pattern = 4</code>","text":"<p>Object is TBLPattern (can be used as Style). </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#gradient-5","title":"<code>Gradient = 5</code>","text":"<p>Object is TBLGradient (can be used as Style). </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#image-9","title":"<code>Image = 9</code>","text":"<p>Object is TBLImage. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#path-10","title":"<code>Path = 10</code>","text":"<p>Object is TBLPath. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#font-16","title":"<code>Font = 16</code>","text":"<p>Object is TBLFont. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#fontfeaturesettings-17","title":"<code>FontFeatureSettings = 17</code>","text":"<p>Object is TBLFontFeatureSettings. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#fontvariationsettings-18","title":"<code>FontVariationSettings = 18</code>","text":"<p>Object is TBLFontVariationSettings. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#bitarray-25","title":"<code>BitArray = 25</code>","text":"<p>Object is TBLBitArray. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#bitset-26","title":"<code>BitSet = 26</code>","text":"<p>Object is TBLBitSet. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#bool-28","title":"<code>Bool = 28</code>","text":"<p>Object represents a Boolean value. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#int64-29","title":"<code>Int64 = 29</code>","text":"<p>Object represents a 64-bit signed integer value. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#uint64-30","title":"<code>UInt64 = 30</code>","text":"<p>Object represents a 64-bit unsigned integer value. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#double-31","title":"<code>Double = 31</code>","text":"<p>Object represents a 64-bit floating point value. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#string-32","title":"<code>&amp;String = 32</code>","text":"<p>Object is TBLString. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arrayobject-33","title":"<code>ArrayObject = 33</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a <code>TBLObject</code> compatible type. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arrayint8-34","title":"<code>ArrayInt8 = 34</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> matches 8-bit signed integral type. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arrayuint8-35","title":"<code>ArrayUInt8 = 35</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> matches 8-bit unsigned integral type. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arrayint16-36","title":"<code>ArrayInt16 = 36</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> matches 16-bit signed integral type. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arrayuint16-37","title":"<code>ArrayUInt16 = 37</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> matches 16-bit unsigned integral type. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arrayint32-38","title":"<code>ArrayInt32 = 38</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> matches 32-bit signed integral type. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arrayuint32-39","title":"<code>ArrayUInt32 = 39</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> matches 32-bit unsigned integral type. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arrayint64-40","title":"<code>ArrayInt64 = 40</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> matches 64-bit signed integral type. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arrayuint64-41","title":"<code>ArrayUInt64 = 41</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> matches 64-bit unsigned integral type. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arrayfloat32-42","title":"<code>ArrayFloat32 = 42</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> matches 32-bit floating point type. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arrayfloat64-43","title":"<code>ArrayFloat64 = 43</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> matches 64-bit floating point type. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arraystruct1-44","title":"<code>ArrayStruct1 = 44</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a record of size 1. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arraystruct2-45","title":"<code>ArrayStruct2 = 45</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a record of size 2. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arraystruct3-46","title":"<code>ArrayStruct3 = 46</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a record of size 3. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arraystruct4-47","title":"<code>ArrayStruct4 = 47</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a record of size 4. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arraystruct6-48","title":"<code>ArrayStruct6 = 48</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a record of size 6. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arraystruct8-49","title":"<code>ArrayStruct8 = 49</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a record of size 8. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arraystruct10-50","title":"<code>ArrayStruct10 = 50</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a record of size 10. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arraystruct12-51","title":"<code>ArrayStruct12 = 51</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a record of size 12. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arraystruct16-52","title":"<code>ArrayStruct16 = 52</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a record of size 16. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arraystruct20-53","title":"<code>ArrayStruct20 = 53</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a record of size 20. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arraystruct24-54","title":"<code>ArrayStruct24 = 54</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a record of size 24. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#arraystruct32-55","title":"<code>ArrayStruct32 = 55</code>","text":"<p>Object is TBLArray&lt;T&gt; where <code>T</code> is a record of size 32. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#context-100","title":"<code>Context = 100</code>","text":"<p>Object is TBLContext. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#imagecodec-101","title":"<code>ImageCodec = 101</code>","text":"<p>Object is TBLImageCodec. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#imagedecoder-102","title":"<code>ImageDecoder = 102</code>","text":"<p>Object is TBLImageDecoder. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#imageencoder-103","title":"<code>ImageEncoder = 103</code>","text":"<p>Object is TBLImageEncoder. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#fontface-104","title":"<code>FontFace = 104</code>","text":"<p>Object is TBLFontFace. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#fontdata-105","title":"<code>FontData = 105</code>","text":"<p>Object is TBLFontData. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#fontmanager-106","title":"<code>FontManager = 106</code>","text":"<p>Object is TBLFontManager. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#minarray-33","title":"<code>MinArray = 33</code>","text":"<p>Minimum object type of an array object. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#maxarray-55","title":"<code>MaxArray = 55</code>","text":"<p>Maximum object type of an array object. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#minstyle-0","title":"<code>MinStyle = 0</code>","text":"<p>Minimum object type identifier that can be used as a style. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#maxstyle-5","title":"<code>MaxStyle = 5</code>","text":"<p>Maximum object type identifier that can be used as a style. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#minvirtual-100","title":"<code>MinVirtual = 100</code>","text":"<p>Minimum object type of an object with virtual function table. </p>"},{"location":"Reference/Blend2D/types/TBLObjectType/#maxvirtual-127","title":"<code>MaxVirtual = 127</code>","text":"<p>Maximum object type of an object with virtual function table. </p>"},{"location":"Reference/Blend2D/types/TBLOffsetMode/","title":"TBLOffsetMode","text":"<p>Mode that specifies how to construct offset curves. </p>"},{"location":"Reference/Blend2D/types/TBLOffsetMode/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLOffsetMode = (Default, Iterative)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLOffsetMode/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLOffsetMode/#default-0","title":"<code>Default (0)</code>","text":"<p>Use default mode (decided by Blend2D). </p>"},{"location":"Reference/Blend2D/types/TBLOffsetMode/#iterative-1","title":"<code>Iterative (1)</code>","text":"<p>Iterative offset construction. </p>"},{"location":"Reference/Blend2D/types/TBLOrientation/","title":"TBLOrientation","text":"<p>Orientation. </p>"},{"location":"Reference/Blend2D/types/TBLOrientation/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLOrientation = (Horizontal, Vertical)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLOrientation/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLOrientation/#horizontal-0","title":"<code>Horizontal (0)</code>","text":"<p>Horizontal orientation. </p>"},{"location":"Reference/Blend2D/types/TBLOrientation/#vertical-1","title":"<code>Vertical (1)</code>","text":"<p>Vertical orientation. </p>"},{"location":"Reference/Blend2D/types/TBLPathCmd/","title":"TBLPathCmd","text":"<p>Path command. </p>"},{"location":"Reference/Blend2D/types/TBLPathCmd/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPathCmd = (Move, OnPath, Quad, Conic, Cubic, Close, Weight, Preserve)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLPathCmd/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLPathCmd/#move-0","title":"<code>Move (0)</code>","text":"<p>Move-to command (starts a new figure). </p>"},{"location":"Reference/Blend2D/types/TBLPathCmd/#onpath-1","title":"<code>OnPath (1)</code>","text":"<p>On-path command (interpreted as line-to or the end of a curve). </p>"},{"location":"Reference/Blend2D/types/TBLPathCmd/#quad-2","title":"<code>Quad (2)</code>","text":"<p>Quad-to control point. </p>"},{"location":"Reference/Blend2D/types/TBLPathCmd/#conic-3","title":"<code>Conic (3)</code>","text":"<p>Conic-to control point </p>"},{"location":"Reference/Blend2D/types/TBLPathCmd/#cubic-4","title":"<code>Cubic (4)</code>","text":"<p>Cubic-to control point (always used as a pair of commands). </p>"},{"location":"Reference/Blend2D/types/TBLPathCmd/#close-5","title":"<code>Close (5)</code>","text":"<p>Close path. </p>"},{"location":"Reference/Blend2D/types/TBLPathCmd/#weight-6","title":"<code>Weight (6)</code>","text":"<p>Conic weight. </p>"},{"location":"Reference/Blend2D/types/TBLPathCmd/#preserve-integerffffffff","title":"<code>Preserve = Integer($FFFFFFFF</code>","text":"<p>Used by <code>TBLPath.SetVertexAt</code> to preserve the current command value. </p>"},{"location":"Reference/Blend2D/types/TBLPathFlag/","title":"TBLPathFlag","text":"<p>Path flags. </p>"},{"location":"Reference/Blend2D/types/TBLPathFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPathFlag = (Empty, Multiple, Quads, Conics, Cubics, Invalid, Dirty)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLPathFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLPathFlag/#empty-0","title":"<code>Empty = 0</code>","text":"<p>Path is empty (no commands or close commands only). </p>"},{"location":"Reference/Blend2D/types/TBLPathFlag/#multiple-1","title":"<code>Multiple = 1</code>","text":"<p>Path contains multiple figures. </p>"},{"location":"Reference/Blend2D/types/TBLPathFlag/#quads-2","title":"<code>Quads = 2</code>","text":"<p>Path contains one or more quad curves. </p>"},{"location":"Reference/Blend2D/types/TBLPathFlag/#conics-3","title":"<code>Conics = 3</code>","text":"<p>Path contains one or more conic curves. </p>"},{"location":"Reference/Blend2D/types/TBLPathFlag/#cubics-4","title":"<code>Cubics = 4</code>","text":"<p>Path contains one or more cubic curves. </p>"},{"location":"Reference/Blend2D/types/TBLPathFlag/#invalid-30","title":"<code>Invalid = 30</code>","text":"<p>Path is invalid. </p>"},{"location":"Reference/Blend2D/types/TBLPathFlag/#dirty-31","title":"<code>Dirty = 31</code>","text":"<p>Flags are dirty (not reflecting the current status). </p>"},{"location":"Reference/Blend2D/types/TBLPathFlags/","title":"TBLPathFlags","text":"<p>Path flags. </p>"},{"location":"Reference/Blend2D/types/TBLPathFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPathFlags = set of TBLPathFlag\n</code></pre> <p>Base type: <code>TBLPathFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLPathReverseMode/","title":"TBLPathReverseMode","text":"<p>Path reversal mode. </p>"},{"location":"Reference/Blend2D/types/TBLPathReverseMode/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPathReverseMode = (Complete, Separate)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLPathReverseMode/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLPathReverseMode/#complete-0","title":"<code>Complete (0)</code>","text":"<p>Reverse each figure and their order as well (default). </p>"},{"location":"Reference/Blend2D/types/TBLPathReverseMode/#separate-1","title":"<code>Separate (1)</code>","text":"<p>Reverse each figure separately (keeps their order). </p>"},{"location":"Reference/Blend2D/types/TBLPathSinkFunc/","title":"TBLPathSinkFunc","text":"<p>Optional callback that can be used to consume a path data. </p>"},{"location":"Reference/Blend2D/types/TBLPathSinkFunc/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPathSinkFunc = function(const APath: TBLPath; \n  const AInfo, AUserData: Pointer): TBLResult; cdecl\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLPathSinkFunc/#parameters","title":"Parameters","text":"<p><code>APath</code>: <code>TBLPath</code></p> <p><code>AInfo</code>: <code>Pointer</code></p> <p><code>AUserData</code>: <code>Pointer</code></p>"},{"location":"Reference/Blend2D/types/TBLPathSinkFunc/#returns","title":"Returns","text":"<p><code>TBLResult</code></p>"},{"location":"Reference/Blend2D/types/TBLPatternQuality/","title":"TBLPatternQuality","text":"<p>Pattern quality. </p>"},{"location":"Reference/Blend2D/types/TBLPatternQuality/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPatternQuality = (Nearest, Bilinear)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLPatternQuality/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLPatternQuality/#nearest-0","title":"<code>Nearest (0)</code>","text":"<p>Nearest neighbor interpolation. </p>"},{"location":"Reference/Blend2D/types/TBLPatternQuality/#bilinear-1","title":"<code>Bilinear (1)</code>","text":"<p>Bilinear interpolation. </p>"},{"location":"Reference/Blend2D/types/TBLPixelConverterCreateFlag/","title":"TBLPixelConverterCreateFlag","text":"<p>Flags used by <code>TBLPixelConverter.Make</code> function. </p>"},{"location":"Reference/Blend2D/types/TBLPixelConverterCreateFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPixelConverterCreateFlag = (DontCopyPalette, AlterablePalette, NoMultiStep)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLPixelConverterCreateFlag/#see-also","title":"See Also","text":"<ul> <li>TBLPixelConverter</li> </ul>"},{"location":"Reference/Blend2D/types/TBLPixelConverterCreateFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLPixelConverterCreateFlag/#dontcopypalette-0","title":"<code>DontCopyPalette = 0</code>","text":"<p>Specifies that the source palette in <code>TBLFormatInfo</code> doesn't have to by copied by <code>TBLPixelConverter</code>. The caller must ensure that the palette would stay valid until the pixel converter is destroyed. </p>"},{"location":"Reference/Blend2D/types/TBLPixelConverterCreateFlag/#alterablepalette-1","title":"<code>AlterablePalette = 1</code>","text":"<p>Specifies that the source palette in <code>TBLFormatInfo</code> is alterable and the pixel converter can modify it when preparing the conversion. The modification can be irreversible so only use this flag when you are sure that the palette passed to <code>TBLPixelConverter.Make</code> won't be needed outside of pixel conversion. </p>"},{"location":"Reference/Blend2D/types/TBLPixelConverterCreateFlag/#nomultistep-2","title":"<code>NoMultiStep = 2</code>","text":"<p>When there is no built-in conversion between the given pixel formats it's possible to use an intermediate format that is used during conversion. In such case the base pixel converter creates two more converters that are then used internally.</p> <p>This option disables such feature - creating a pixel converter would fail if direct conversion is not possible. </p>"},{"location":"Reference/Blend2D/types/TBLPixelConverterCreateFlags/","title":"TBLPixelConverterCreateFlags","text":"<p>Flags used by <code>TBLPixelConverter.Make</code> function. </p>"},{"location":"Reference/Blend2D/types/TBLPixelConverterCreateFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLPixelConverterCreateFlags = set of TBLPixelConverterCreateFlag\n</code></pre> <p>Base type: <code>TBLPixelConverterCreateFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLRenderingQuality/","title":"TBLRenderingQuality","text":"<p>Rendering quality. </p>"},{"location":"Reference/Blend2D/types/TBLRenderingQuality/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRenderingQuality = (AntiAlias)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLRenderingQuality/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLRenderingQuality/#antialias-0","title":"<code>AntiAlias (0)</code>","text":"<p>Render using anti-aliasing. </p>"},{"location":"Reference/Blend2D/types/TBLResult/","title":"TBLResult","text":"<p>Blend2D result code. </p>"},{"location":"Reference/Blend2D/types/TBLResult/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLResult = (Success, OutOfMemory, InvalidValue, InvalidState, InvalidHandle, InvalidConversion, Overflow, NotInitialized, NotImplemented, NotPermitted, IOError, Busy, Interrupted, TryAgain, TimedOut...)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLResult/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLResult/#success-0","title":"<code>Success = 0</code>","text":"<p>Successful result code.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#outofmemory-00010000","title":"<code>OutOfMemory = $00010000</code>","text":"<p>Out of memory [ENOMEM].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidvalue-2","title":"<code>InvalidValue (2)</code>","text":"<p>Invalid value/argument [EINVAL].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidstate-3","title":"<code>InvalidState (3)</code>","text":"<p>Invalid state [EFAULT].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidhandle-4","title":"<code>InvalidHandle (4)</code>","text":"<p>Invalid handle or file [EBADF].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidconversion-5","title":"<code>InvalidConversion (5)</code>","text":"<p>Invalid conversion.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#overflow-6","title":"<code>Overflow (6)</code>","text":"<p>Value too large [EOVERFLOW].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#notinitialized-7","title":"<code>NotInitialized (7)</code>","text":"<p>Object not initialized.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#notimplemented-8","title":"<code>NotImplemented (8)</code>","text":"<p>Not implemented [ENOSYS].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#notpermitted-9","title":"<code>NotPermitted (9)</code>","text":"<p>Operation not permitted [EPERM].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#ioerror-10","title":"<code>IOError (10)</code>","text":"<p>IO error [EIO].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#busy-11","title":"<code>Busy (11)</code>","text":"<p>Device or resource busy [EBUSY].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#interrupted-12","title":"<code>Interrupted (12)</code>","text":"<p>Operation interrupted [EINTR].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#tryagain-13","title":"<code>TryAgain (13)</code>","text":"<p>Try again [EAGAIN].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#timedout-14","title":"<code>TimedOut (14)</code>","text":"<p>Timed out [ETIMEDOUT].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#brokenpipe-15","title":"<code>BrokenPipe (15)</code>","text":"<p>Broken pipe [EPIPE].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidseek-16","title":"<code>InvalidSeek (16)</code>","text":"<p>File is not seekable [ESPIPE].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#symlinkloop-17","title":"<code>SymlinkLoop (17)</code>","text":"<p>Too many levels of symlinks [ELOOP].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#filetoolarge-18","title":"<code>FileTooLarge (18)</code>","text":"<p>File is too large [EFBIG].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#alreadyexists-19","title":"<code>AlreadyExists (19)</code>","text":"<p>File/directory already exists [EEXIST].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#accessdenied-20","title":"<code>AccessDenied (20)</code>","text":"<p>Access denied [EACCES].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#mediachanged-21","title":"<code>MediaChanged (21)</code>","text":"<p>Media changed [Windows::ERROR_MEDIA_CHANGED].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#readonlyfs-22","title":"<code>ReadOnlyFS (22)</code>","text":"<p>The file/FS is read-only [EROFS].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#nodevice-23","title":"<code>NoDevice (23)</code>","text":"<p>Device doesn't exist [ENXIO].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#noentry-24","title":"<code>NoEntry (24)</code>","text":"<p>Not found, no entry (fs) [ENOENT].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#nomedia-25","title":"<code>NoMedia (25)</code>","text":"<p>No media in drive/device [ENOMEDIUM].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#nomoredata-26","title":"<code>NoMoreData (26)</code>","text":"<p>No more data / end of file [ENODATA].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#nomorefiles-27","title":"<code>NoMoreFiles (27)</code>","text":"<p>No more files [ENMFILE].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#nospaceleft-28","title":"<code>NoSpaceLeft (28)</code>","text":"<p>No space left on device [ENOSPC].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#notempty-29","title":"<code>NotEmpty (29)</code>","text":"<p>Directory is not empty [ENOTEMPTY].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#notfile-30","title":"<code>NotFile (30)</code>","text":"<p>Not a file [EISDIR].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#notdirectory-31","title":"<code>NotDirectory (31)</code>","text":"<p>Not a directory [ENOTDIR].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#notsamedevice-32","title":"<code>NotSameDevice (32)</code>","text":"<p>Not same device [EXDEV].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#notblockdevice-33","title":"<code>NotBlockDevice (33)</code>","text":"<p>Not a block device [ENOTBLK].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidfilename-34","title":"<code>InvalidFilename (34)</code>","text":"<p>File/path name is invalid.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#filenametoolong-35","title":"<code>FilenameTooLong (35)</code>","text":"<p>File/path name is too long [ENAMETOOLONG].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#toomanyopenfiles-36","title":"<code>TooManyOpenFiles (36)</code>","text":"<p>Too many open files [EMFILE].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#toomanyopenfilesbyos-37","title":"<code>TooManyOpenFilesByOS (37)</code>","text":"<p>Too many open files by OS [ENFILE].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#toomanylinks-38","title":"<code>TooManyLinks (38)</code>","text":"<p>Too many symbolic links on FS [EMLINK].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#toomanythreads-39","title":"<code>TooManyThreads (39)</code>","text":"<p>Too many threads [EAGAIN].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#threadpoolexhausted-40","title":"<code>ThreadPoolExhausted (40)</code>","text":"<p>Thread pool is exhausted and couldn't acquire the requested thread count.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#fileempty-41","title":"<code>FileEmpty (41)</code>","text":"<p>File is empty (not specific to any OS error).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#openfailed-42","title":"<code>OpenFailed (42)</code>","text":"<p>File open failed [Windows::ERROR_OPEN_FAILED].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#notrootdevice-43","title":"<code>NotRootDevice (43)</code>","text":"<p>Not a root device/directory [Windows::ERROR_DIR_NOT_ROOT].</p>"},{"location":"Reference/Blend2D/types/TBLResult/#unknownsystemerror-44","title":"<code>UnknownSystemError (44)</code>","text":"<p>Unknown system error that failed to translate to Blend2D result code.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidargument-45","title":"<code>InvalidArgument (45)</code>","text":"<p>Invalid data alignment.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidsignature-46","title":"<code>InvalidSignature (46)</code>","text":"<p>Invalid data signature or header.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invaliddata-47","title":"<code>InvalidData (47)</code>","text":"<p>Invalid or corrupted data.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidstring-48","title":"<code>InvalidString (48)</code>","text":"<p>Invalid string (invalid data of either UTF8, UTF16, or UTF32).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidkey-49","title":"<code>InvalidKey (49)</code>","text":"<p>Invalid key or property.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#datatruncated-50","title":"<code>DataTruncated (50)</code>","text":"<p>Truncated data (more data required than memory/stream provides).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#datatoolarge-51","title":"<code>DataTooLarge (51)</code>","text":"<p>Input data too large to be processed.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#decompressionfailed-52","title":"<code>DecompressionFailed (52)</code>","text":"<p>Decompression failed due to invalid data (RLE, Huffman, etc).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidgeometry-53","title":"<code>InvalidGeometry (53)</code>","text":"<p>Invalid geometry (invalid path data or shape).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#nomatchingvertex-54","title":"<code>NoMatchingVertex (54)</code>","text":"<p>Returned when there is no matching vertex in path data.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidcreateflags-55","title":"<code>InvalidCreateFlags (55)</code>","text":"<p>Invalid create flags (TBLContext).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#nomatchingcookie-56","title":"<code>NoMatchingCookie (56)</code>","text":"<p>No matching cookie (TBLContext).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#nostatestorestore-57","title":"<code>NoStatesToRestore (57)</code>","text":"<p>No states to restore (TBLContext).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#toomanysavedstates-58","title":"<code>TooManySavedStates (58)</code>","text":"<p>Cannot save state as the number of saved states reached the limit (TBLContext).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#imagetoobig-59","title":"<code>ImageTooBig (59)</code>","text":"<p>The size of the image is too large.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#imagenomatchingcodec-60","title":"<code>ImageNoMatchingCodec (60)</code>","text":"<p>Image codec for a required format doesn't exist.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#imageunknownfileformat-61","title":"<code>ImageUnknownFileFormat (61)</code>","text":"<p>Unknown or invalid file format that cannot be read.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#imagedecodernotprovided-62","title":"<code>ImageDecoderNotProvided (62)</code>","text":"<p>Image codec doesn't support reading the file format.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#imageencodernotprovided-63","title":"<code>ImageEncoderNotProvided (63)</code>","text":"<p>Image codec doesn't support writing the file format.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#pngmultipleihdr-64","title":"<code>PngMultipleIHDR (64)</code>","text":"<p>Multiple IHDR chunks are not allowed (PNG).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#pnginvalididat-65","title":"<code>PngInvalidIDAT (65)</code>","text":"<p>Invalid IDAT chunk (PNG).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#pnginvalidiend-66","title":"<code>PngInvalidIEND (66)</code>","text":"<p>Invalid IEND chunk (PNG).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#pnginvalidplte-67","title":"<code>PngInvalidPLTE (67)</code>","text":"<p>Invalid PLTE chunk (PNG).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#pnginvalidtrns-68","title":"<code>PngInvalidTRNS (68)</code>","text":"<p>Invalid tRNS chunk (PNG).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#pnginvalidfilter-69","title":"<code>PngInvalidFilter (69)</code>","text":"<p>Invalid filter type (PNG).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#jpegunsupportedfeature-70","title":"<code>JpegUnsupportedFeature (70)</code>","text":"<p>Unsupported feature (JPEG).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#jpeginvalidsos-71","title":"<code>JpegInvalidSOS (71)</code>","text":"<p>Invalid SOS marker or header (JPEG).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#jpeginvalidsof-72","title":"<code>JpegInvalidSOF (72)</code>","text":"<p>Invalid SOF marker (JPEG).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#jpegmultiplesof-73","title":"<code>JpegMultipleSOF (73)</code>","text":"<p>Multiple SOF markers (JPEG).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#jpegunsupportedsof-74","title":"<code>JpegUnsupportedSOF (74)</code>","text":"<p>Unsupported SOF marker (JPEG).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#fontnotinitialized-75","title":"<code>FontNotInitialized (75)</code>","text":"<p>Font doesn't have any data as it's not initialized.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#fontnomatch-76","title":"<code>FontNoMatch (76)</code>","text":"<p>Font or font-face was not matched (TBLFontManager).</p>"},{"location":"Reference/Blend2D/types/TBLResult/#fontnocharactermapping-77","title":"<code>FontNoCharacterMapping (77)</code>","text":"<p>Font has no character to glyph mapping data.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#fontmissingimportanttable-78","title":"<code>FontMissingImportantTable (78)</code>","text":"<p>Font has missing an important table.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#fontfeaturenotavailable-79","title":"<code>FontFeatureNotAvailable (79)</code>","text":"<p>Font feature is not available.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#fontcffinvaliddata-80","title":"<code>FontCFFInvalidData (80)</code>","text":"<p>Font has an invalid CFF data.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#fontprogramterminated-81","title":"<code>FontProgramTerminated (81)</code>","text":"<p>Font program terminated because the execution reached the limit.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#glyphsubstitutiontoolarge-82","title":"<code>GlyphSubstitutionTooLarge (82)</code>","text":"<p>Glyph substitution requires too much space and was terminated.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#invalidglyph-83","title":"<code>InvalidGlyph (83)</code>","text":"<p>Invalid glyph identifier.</p>"},{"location":"Reference/Blend2D/types/TBLResult/#methods","title":"Methods","text":"Name Description ToString Converts the result code to a string."},{"location":"Reference/Blend2D/types/TBLResult/#method-descriptions","title":"Method Descriptions","text":""},{"location":"Reference/Blend2D/types/TBLResult/#ToString","title":"ToString","text":"<p>Converts the result code to a string. </p> <p><code>function ToString: String</code></p>"},{"location":"Reference/Blend2D/types/TBLResult/#returns","title":"Returns","text":"<p><code>String</code></p>"},{"location":"Reference/Blend2D/types/TBLRuntimeBuildType/","title":"TBLRuntimeBuildType","text":"<p>Blend2D runtime build type. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeBuildType/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRuntimeBuildType = (Debug, Release)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLRuntimeBuildType/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeBuildType/#debug-0","title":"<code>Debug (0)</code>","text":"<p>Describes a Blend2D debug build. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeBuildType/#release-1","title":"<code>Release (1)</code>","text":"<p>Describes a Blend2D release build. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCleanupFlag/","title":"TBLRuntimeCleanupFlag","text":"<p>Runtime cleanup flags that can be used through <code>TBLRuntime.Cleanup</code>. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCleanupFlag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRuntimeCleanupFlag = (ObjectPool, ZeroedPool, ThreadPool)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLRuntimeCleanupFlag/#see-also","title":"See Also","text":"<ul> <li>TBLRuntime.Cleanup</li> </ul>"},{"location":"Reference/Blend2D/types/TBLRuntimeCleanupFlag/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCleanupFlag/#objectpool-0","title":"<code>ObjectPool = 0</code>","text":"<p>Cleanup object memory pool. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCleanupFlag/#zeroedpool-1","title":"<code>ZeroedPool = 1</code>","text":"<p>Cleanup zeroed memory pool. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCleanupFlag/#threadpool-4","title":"<code>ThreadPool = 4</code>","text":"<p>Cleanup thread pool (would join unused threads). </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCleanupFlags/","title":"TBLRuntimeCleanupFlags","text":"<p>Runtime cleanup flags that can be used through <code>TBLRuntime.Cleanup</code>. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCleanupFlags/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRuntimeCleanupFlags = set of TBLRuntimeCleanupFlag\n</code></pre> <p>Base type: <code>TBLRuntimeCleanupFlag</code></p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCleanupFlags/#see-also","title":"See Also","text":"<ul> <li>TBLRuntime.Cleanup</li> </ul>"},{"location":"Reference/Blend2D/types/TBLRuntimeCpuArch/","title":"TBLRuntimeCpuArch","text":"<p>CPU architecture that can be queried by <code>TBLRuntime.QuerySystemInfo</code>. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCpuArch/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRuntimeCpuArch = (Unknown, X86, Arm, Mips)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLRuntimeCpuArch/#see-also","title":"See Also","text":"<ul> <li>TBLRuntime.QuerySystemInfo</li> </ul>"},{"location":"Reference/Blend2D/types/TBLRuntimeCpuArch/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuArch/#unknown-0","title":"<code>Unknown (0)</code>","text":"<p>Unknown architecture. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCpuArch/#x86-1","title":"<code>X86 (1)</code>","text":"<p>32-bit or 64-bit X86 architecture. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCpuArch/#arm-2","title":"<code>Arm (2)</code>","text":"<p>32-bit or 64-bit ARM architecture. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCpuArch/#mips-3","title":"<code>Mips (3)</code>","text":"<p>32-bit or 64-bit MIPS architecture. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/","title":"TBLRuntimeCpuFeature","text":"<p>CPU features Blend2D supports. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRuntimeCpuFeature = (X86Sse2, X86Sse3, X86Ssse3, X86Sse4_1, X86Sse4_2, X86Avx, X86Avx2, X86Avx512, ArmAsimd, ArmCrc32, ArmPmull, _Reserved)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#x86sse2-0","title":"<code>X86Sse2 = 0</code>","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#x86sse3-1","title":"<code>X86Sse3 = 1</code>","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#x86ssse3-2","title":"<code>X86Ssse3 = 2</code>","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#x86sse4_1-3","title":"<code>X86Sse4_1 = 3</code>","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#x86sse4_2-4","title":"<code>X86Sse4_2 = 4</code>","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#x86avx-5","title":"<code>X86Avx = 5</code>","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#x86avx2-6","title":"<code>X86Avx2 = 6</code>","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#x86avx512-7","title":"<code>X86Avx512 = 7</code>","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#armasimd-0","title":"<code>ArmAsimd = 0</code>","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#armcrc32-1","title":"<code>ArmCrc32 = 1</code>","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#armpmull-2","title":"<code>ArmPmull = 2</code>","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeature/#_reserved-31","title":"<code>_Reserved = 31</code>","text":""},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeatures/","title":"TBLRuntimeCpuFeatures","text":"<p>CPU features Blend2D supports. </p>"},{"location":"Reference/Blend2D/types/TBLRuntimeCpuFeatures/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLRuntimeCpuFeatures = set of TBLRuntimeCpuFeature\n</code></pre> <p>Base type: <code>TBLRuntimeCpuFeature</code></p>"},{"location":"Reference/Blend2D/types/TBLStringView/","title":"TBLStringView","text":"<p>View of <code>UTF8Char[]</code> data used by TBLString. </p>"},{"location":"Reference/Blend2D/types/TBLStringView/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLStringView = TBLArrayView&lt;UTF8Char&gt;\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLStrokeCap/","title":"TBLStrokeCap","text":"<p>A presentation attribute defining the shape to be used at the end of open sub-paths. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeCap/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLStrokeCap = (Butt, Square, Round, RoundRev, Triangle, TriangleRev)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLStrokeCap/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLStrokeCap/#butt-0","title":"<code>Butt (0)</code>","text":"<p>Butt cap [default]. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeCap/#square-1","title":"<code>Square (1)</code>","text":"<p>Square cap. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeCap/#round-2","title":"<code>Round (2)</code>","text":"<p>Round cap. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeCap/#roundrev-3","title":"<code>RoundRev (3)</code>","text":"<p>Round cap reversed. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeCap/#triangle-4","title":"<code>Triangle (4)</code>","text":"<p>Triangle cap. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeCap/#trianglerev-5","title":"<code>TriangleRev (5)</code>","text":"<p>Triangle cap reversed. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeCapPosition/","title":"TBLStrokeCapPosition","text":"<p>Position of a stroke-cap. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeCapPosition/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLStrokeCapPosition = (StartOfPath, EndOfPath)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLStrokeCapPosition/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLStrokeCapPosition/#startofpath-0","title":"<code>StartOfPath (0)</code>","text":"<p>Start of the path. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeCapPosition/#endofpath-1","title":"<code>EndOfPath (1)</code>","text":"<p>End of the path. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeJoin/","title":"TBLStrokeJoin","text":"<p>Stroke join type. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeJoin/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLStrokeJoin = (MiterClip, MiterBevel, MiterRound, Bevel, Round)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLStrokeJoin/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLStrokeJoin/#miterclip-0","title":"<code>MiterClip (0)</code>","text":"<p>Miter-join possibly clipped at <code>MiterLimit</code> [default]. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeJoin/#miterbevel-1","title":"<code>MiterBevel (1)</code>","text":"<p>Miter-join or bevel-join depending on miterLimit condition. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeJoin/#miterround-2","title":"<code>MiterRound (2)</code>","text":"<p>Miter-join or round-join depending on miterLimit condition. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeJoin/#bevel-3","title":"<code>Bevel (3)</code>","text":"<p>Bevel-join. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeJoin/#round-4","title":"<code>Round (4)</code>","text":"<p>Round-join. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeTransformOrder/","title":"TBLStrokeTransformOrder","text":"<p>Stroke transform order. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeTransformOrder/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLStrokeTransformOrder = (After, Before)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLStrokeTransformOrder/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLStrokeTransformOrder/#after-0","title":"<code>After (0)</code>","text":"<p>Transform after stroke  =&gt; <code>Transform(Stroke(Input))</code> [default]. </p>"},{"location":"Reference/Blend2D/types/TBLStrokeTransformOrder/#before-1","title":"<code>Before (1)</code>","text":"<p>Transform before stroke =&gt; <code>Stroke(Transform(Input))</code>. </p>"},{"location":"Reference/Blend2D/types/TBLTag/","title":"TBLTag","text":"<p>Tag is a 32-bit integer consisting of 4 bytes (or ASCII characters) in the following format:</p> <pre><code>  Tag := (A shl 24) or (B shl 16) or (C shl 8) or D;\n</code></pre> <p>Tags are used extensively by OpenType fonts and other binary formats like PNG. In most cases TAGs should only contain ASCII letters, digits, and spaces.</p> <p>Blend2D uses TBLTag in public and internal APIs to distinguish between a regular <code>UInt32</code> and tag. </p>"},{"location":"Reference/Blend2D/types/TBLTag/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLTag = type UInt32\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLTextDirection/","title":"TBLTextDirection","text":"<p>Text direction. </p>"},{"location":"Reference/Blend2D/types/TBLTextDirection/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLTextDirection = (LeftToRight, RightToLeft)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLTextDirection/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLTextDirection/#lefttoright-0","title":"<code>LeftToRight (0)</code>","text":"<p>Left-to-right direction. </p>"},{"location":"Reference/Blend2D/types/TBLTextDirection/#righttoleft-1","title":"<code>RightToLeft (1)</code>","text":"<p>Right-to-left direction. </p>"},{"location":"Reference/Blend2D/types/TBLTextEncoding/","title":"TBLTextEncoding","text":"<p>Text encoding. </p>"},{"location":"Reference/Blend2D/types/TBLTextEncoding/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLTextEncoding = (Utf8, Utf16, Utf32, Latin1)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLTextEncoding/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLTextEncoding/#utf8-0","title":"<code>Utf8 (0)</code>","text":"<p>UTF-8 encoding. </p>"},{"location":"Reference/Blend2D/types/TBLTextEncoding/#utf16-1","title":"<code>Utf16 (1)</code>","text":"<p>UTF-16 encoding. </p>"},{"location":"Reference/Blend2D/types/TBLTextEncoding/#utf32-2","title":"<code>Utf32 (2)</code>","text":"<p>UTF-32 encoding. </p>"},{"location":"Reference/Blend2D/types/TBLTextEncoding/#latin1-3","title":"<code>Latin1 (3)</code>","text":"<p>LATIN1 encoding (one byte per character). </p>"},{"location":"Reference/Blend2D/types/TBLTransformKind/","title":"TBLTransformKind","text":"<p>Transformation matrix type that can be obtained by calling <code>TBLMatrix2D.Kind</code>.</p> <pre><code>   Identity  Transl.  Scale     Swap    Affine\n    [1  0]   [1  0]   [.  0]   [0  .]   [.  .]\n    [0  1]   [0  1]   [0  .]   [.  0]   [.  .]\n    [0  0]   [.  .]   [.  .]   [.  .]   [.  .]\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLTransformKind/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLTransformKind = (Identity, Translate, Scale, Swap, Affine, Invalid)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLTransformKind/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLTransformKind/#identity-0","title":"<code>Identity (0)</code>","text":"<p>Identity matrix. </p>"},{"location":"Reference/Blend2D/types/TBLTransformKind/#translate-1","title":"<code>Translate (1)</code>","text":"<p>Has translation part (the rest is like identity). </p>"},{"location":"Reference/Blend2D/types/TBLTransformKind/#scale-2","title":"<code>Scale (2)</code>","text":"<p>Has translation and scaling parts. </p>"},{"location":"Reference/Blend2D/types/TBLTransformKind/#swap-3","title":"<code>Swap (3)</code>","text":"<p>Has translation and scaling parts, however scaling swaps X/Y. </p>"},{"location":"Reference/Blend2D/types/TBLTransformKind/#affine-4","title":"<code>Affine (4)</code>","text":"<p>Generic affine matrix. </p>"},{"location":"Reference/Blend2D/types/TBLTransformKind/#invalid-5","title":"<code>Invalid (5)</code>","text":"<p>Invalid/degenerate matrix not useful for transformations. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/","title":"TBLTransformOp","text":"<p>Transformation matrix operation type. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLTransformOp = (Reset, Assign, Translate, Scale, Skew, Rotate, RotatePoint, Transform, PostTranslate, PostScale, PostSkew, PostRotate, PostRotatePoint, PostTransform)\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#enumeration-values","title":"Enumeration Values","text":""},{"location":"Reference/Blend2D/types/TBLTransformOp/#reset-0","title":"<code>Reset (0)</code>","text":"<p>Reset matrix to identity (argument ignored, should be nil). </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#assign-1","title":"<code>Assign (1)</code>","text":"<p>Assign (copy) the other matrix. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#translate-2","title":"<code>Translate (2)</code>","text":"<p>Translate the matrix by [X, Y]. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#scale-3","title":"<code>Scale (3)</code>","text":"<p>Scale the matrix by [X, Y]. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#skew-4","title":"<code>Skew (4)</code>","text":"<p>Skew the matrix by [X, Y]. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#rotate-5","title":"<code>Rotate (5)</code>","text":"<p>Rotate the matrix by the given angle about [0, 0]. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#rotatepoint-6","title":"<code>RotatePoint (6)</code>","text":"<p>Rotate the matrix by the given angle about [X, Y]. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#transform-7","title":"<code>Transform (7)</code>","text":"<p>Transform this matrix by other <code>TBLMatrix2D</code>. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#posttranslate-8","title":"<code>PostTranslate (8)</code>","text":"<p>Post-translate the matrix by [X, Y]. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#postscale-9","title":"<code>PostScale (9)</code>","text":"<p>Post-scale the matrix by [X, Y]. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#postskew-10","title":"<code>PostSkew (10)</code>","text":"<p>Post-skew the matrix by [X, Y]. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#postrotate-11","title":"<code>PostRotate (11)</code>","text":"<p>Post-rotate the matrix about [0, 0]. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#postrotatepoint-12","title":"<code>PostRotatePoint (12)</code>","text":"<p>Post-rotate the matrix about a reference <code>TBLPoint</code>. </p>"},{"location":"Reference/Blend2D/types/TBLTransformOp/#posttransform-13","title":"<code>PostTransform (13)</code>","text":"<p>Post-transform this matrix by other <code>TBLMatrix2D</code>. </p>"},{"location":"Reference/Blend2D/types/TBLUniqueId/","title":"TBLUniqueId","text":"<p>Unique identifier that can be used for caching purposes.</p> <p>Some objects such as TBLImage and TBLFontFace have assigned an unique identifier that can be used to identify such objects for caching purposes. This identifier is never zero, so zero can be safely used as \"uncached\". </p>"},{"location":"Reference/Blend2D/types/TBLUniqueId/#definition","title":"Definition","text":"<p>Unit: Blend2D</p> <pre><code>type TBLUniqueId = UInt64\n</code></pre>"},{"location":"Reference/Blend2D/types/TBLUniqueId/#see-also","title":"See Also","text":"<ul> <li>TBLImage</li> <li>TBLFontFace</li> </ul>"},{"location":"Reference/Blend2D/types/TBLUniqueId/#remarks","title":"Remarks","text":"<p>Unique identifier is per-process. It's implemented as an increasing global or thread-local counter in a way that identifiers would not collide. </p>"}]}